{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lenguajes de Marcas","text":""},{"location":"#bienvenidos-al-modulo-de-lenguajes-de-marcas-y-sistemas-de-gestion-de-la-informacion-del-ciclo-de-desarrollo-de-aplicaciones-web","title":"\u00a1Bienvenidos al m\u00f3dulo de Lenguajes de Marcas y Sistemas de Gesti\u00f3n de la Informaci\u00f3n del ciclo de Desarrollo de Aplicaciones Web!","text":"<p>Este curso est\u00e1 dise\u00f1ado para que adquieras las habilidades necesarias en el manejo de lenguajes de marcas y sistemas de gesti\u00f3n de informaci\u00f3n, los cuales son fundamentales en el desarrollo de aplicaciones web modernas. A lo largo del m\u00f3dulo, aprender\u00e1s c\u00f3mo estructurar, transmitir y presentar informaci\u00f3n utilizando tecnolog\u00edas clave como HTML, CSS, JSON, y JavaScript.</p>"},{"location":"#tabla-de-contenido","title":"Tabla de contenido","text":"<ul> <li>Unidad 1: Introducci\u00f3n a los lenguajes de marcas</li> <li>Unidad 2: HTML5</li> <li>Unidad 3: CSS3</li> <li>Unidad 4: Introducci\u00f3n a JavaScript</li> <li>Unidad 4.1: Manipulaci\u00f3n del DOM y eventos</li> <li>Unidad 5: Definici\u00f3n de esquemas y vocabularios</li> <li>Unidad 5.1: JSON Schema y Herramientas de Validaci\u00f3n</li> <li>Unidad 5.2: Trabajo con APIs </li> </ul>"},{"location":"#referencias-web-generales","title":"Referencias web generales","text":"<p>El desarrollo de software est\u00e1 en constante evoluci\u00f3n, actualmente podemos observar como una avalancha de nuevas tendencias tecnol\u00f3gicas y metodolog\u00edas se va abriendo paso. Este es el motivo principal por el que la mayor parte de los apuntes proporcionados no son m\u00e1s que referencias web actuales a los temas que vamos a tratar.</p> <ul> <li>HTML5 by Manz</li> <li>SVG by Manz</li> <li>CSS by Manz</li> <li>Javascript by Manz</li> <li>DOM by Manz</li> <li>FreeCodeCamp</li> <li>developer.mozilla.org</li> <li>The Modern JavaScript Tutorial</li> <li>lenguajejs.com</li> <li>Javascript Cheatsheet</li> <li>Javascript notes By Majo Ledesma</li> </ul>"},{"location":"#que-vas-a-aprender","title":"\u00bfQu\u00e9 vas a aprender?","text":""},{"location":"#1-lenguajes-de-marcas","title":"1. Lenguajes de Marcas","text":"<p>Estudiar\u00e1s las caracter\u00edsticas fundamentales de los lenguajes de marcas como HTML y XML, los cuales permiten estructurar y almacenar informaci\u00f3n de manera eficiente. Te familiarizar\u00e1s con las diferentes versiones de estos lenguajes y c\u00f3mo aplicarlos en contextos reales, analizando la estructura de documentos y comprendiendo las ventajas que ofrecen en el manejo de la informaci\u00f3n.</p>"},{"location":"#2-creacion-de-documentos-web","title":"2. Creaci\u00f3n de Documentos Web","text":"<p>Aqu\u00ed te sumergir\u00e1s en la construcci\u00f3n de p\u00e1ginas web utilizando HTML5 para la estructura y CSS para la presentaci\u00f3n. Aprender\u00e1s a aplicar hojas de estilo que mejoren la apariencia de los sitios web, optimizando su dise\u00f1o para diferentes dispositivos y validando tanto el c\u00f3digo HTML como las hojas de estilo para cumplir con los est\u00e1ndares de la web.</p>"},{"location":"#3-programacion-con-javascript","title":"3. Programaci\u00f3n con JavaScript","text":"<p>Ver\u00e1s c\u00f3mo JavaScript te permite interactuar con las p\u00e1ginas web, manipulando el DOM (Document Object Model) para cambiar din\u00e1micamente el contenido, el estilo y la estructura de los documentos. Aprender\u00e1s a seleccionar, modificar y eliminar elementos de una p\u00e1gina web, as\u00ed como a hacer que estos cambios sean reactivos e interactivos.</p>"},{"location":"#4-validacion-de-documentos-con-json","title":"4. Validaci\u00f3n de Documentos con JSON","text":"<p>Uno de los formatos m\u00e1s populares para el intercambio de datos en la web es JSON (JavaScript Object Notation). Aprender\u00e1s a: - Describir y estructurar la informaci\u00f3n en formato JSON, utilizando objetos, arrays y pares clave-valor. - Validar documentos JSON mediante el uso de herramientas como JSON Schema, que te permitir\u00e1n asegurar que los datos recibidos cumplen con las reglas de estructura y tipos requeridos. - Aplicar JSON en APIs web, entendiendo c\u00f3mo se utiliza para transmitir informaci\u00f3n entre servidores y clientes en aplicaciones modernas.</p>"},{"location":"#5-hojas-de-estilo-css","title":"5. Hojas de Estilo CSS","text":"<p>Adem\u00e1s de aprender a estructurar p\u00e1ginas web con HTML, ver\u00e1s c\u00f3mo CSS te permite mejorar la presentaci\u00f3n visual de estas p\u00e1ginas. Aprender\u00e1s a aplicar estilos a los elementos HTML, a crear dise\u00f1os responsivos que se adapten a distintos dispositivos y a utilizar las \u00faltimas caracter\u00edsticas de CSS3 para animaciones, transiciones y otros efectos visuales avanzados.</p>"},{"location":"#por-que-es-importante","title":"\u00bfPor qu\u00e9 es importante?","text":"<p>El manejo adecuado de estos lenguajes es esencial para el desarrollo web profesional. Aprender\u00e1s no solo a crear p\u00e1ginas web est\u00e9ticamente atractivas, sino tambi\u00e9n a garantizar que la informaci\u00f3n que manejen sea clara, accesible y bien estructurada. Estas habilidades son clave para el desarrollo de aplicaciones modernas que interact\u00faan con datos y ofrecen experiencias din\u00e1micas y personalizadas para los usuarios.</p>"},{"location":"#herramientas-que-usaras","title":"Herramientas que usar\u00e1s:","text":"<ul> <li>HTML5 y CSS3: Para estructurar y dar estilo a las p\u00e1ginas web.</li> <li>JavaScript: Para hacer que las p\u00e1ginas sean din\u00e1micas e interactivas.</li> <li>JSON: Para el intercambio y validaci\u00f3n de datos entre aplicaciones.</li> <li>JSON Schema: Para garantizar que los datos cumplan con una estructura determinada.</li> </ul> <p>Al finalizar este curso, estar\u00e1s preparado para desarrollar aplicaciones web modernas que gestionen y presenten informaci\u00f3n de forma eficaz, aplicando las mejores pr\u00e1cticas de desarrollo y dise\u00f1o web.</p>"},{"location":"sesiones/","title":"Planificaci\u00f3n de 6 sesiones (12h) - Lenguaje de Marcas","text":""},{"location":"sesiones/#enfoque-general","title":"Enfoque general","text":"<ul> <li>Total de horas: 12 (6 sesiones de 2 horas)</li> <li>Metodolog\u00eda: Te\u00f3rico-pr\u00e1ctica en clase. Proyectos y actividades fuera del aula.</li> <li>Tecnolog\u00edas y formatos: JSON (principal), JSON Schema, XML (solo para contexto), MongoDB, conversi\u00f3n entre formatos.</li> <li>IDE recomendado: WebStorm (JetBrains) con extensiones para JSON y MongoDB.</li> </ul>"},{"location":"sesiones/#sesion-1-introduccion-a-esquemas-y-vocabularios","title":"\u231a\ufe0f Sesi\u00f3n 1: Introducci\u00f3n a esquemas y vocabularios","text":""},{"location":"sesiones/#objetivos","title":"Objetivos","text":"<ul> <li>Comprender qu\u00e9 son los esquemas y vocabularios.</li> <li>Contextualizar XML y JSON.</li> </ul>"},{"location":"sesiones/#contenidos","title":"Contenidos","text":"<ul> <li>Tecnolog\u00edas para definir documentos: DTD, XML Schema, JSON Schema.</li> <li>Estructura vs sintaxis vs sem\u00e1ntica.</li> <li>Validaci\u00f3n de documentos: \u00bfpor qu\u00e9 y para qu\u00e9?</li> <li>Asociaci\u00f3n de documentos y esquemas.</li> </ul>"},{"location":"sesiones/#practica","title":"Pr\u00e1ctica","text":"<ul> <li>Validar XML con DTD/XSD (usando XMLValidation).</li> <li>Comparativa JSON vs XML.</li> </ul>"},{"location":"sesiones/#herramientas","title":"Herramientas","text":"<ul> <li>Navegador web</li> <li>VSCode o WebStorm</li> </ul>"},{"location":"sesiones/#sesion-2-json-schema","title":"\u231a\ufe0f Sesi\u00f3n 2: JSON Schema","text":""},{"location":"sesiones/#objetivos_1","title":"Objetivos","text":"<ul> <li>Aprender a crear esquemas en JSON Schema.</li> <li>Validar documentos JSON.</li> </ul>"},{"location":"sesiones/#contenidos_1","title":"Contenidos","text":"<ul> <li>Tipos de datos en JSON Schema</li> <li>Reglas: <code>required</code>, <code>minLength</code>, <code>format</code>, <code>enum</code></li> <li>Estructuras anidadas y arrays</li> <li>Reutilizaci\u00f3n: <code>$ref</code></li> </ul>"},{"location":"sesiones/#practica_1","title":"Pr\u00e1ctica","text":"<ul> <li>Dise\u00f1ar un esquema para un objeto \"Receta\" o \"Alumno\".</li> <li>Validar documentos con https://jsonschemalint.com/</li> </ul>"},{"location":"sesiones/#herramientas_1","title":"Herramientas","text":"<ul> <li>WebStorm (validaci\u00f3n integrada)</li> <li>JSON Schema Store</li> </ul>"},{"location":"sesiones/#sesion-3-herramientas-de-creacion-y-validacion","title":"\u231a\ufe0f Sesi\u00f3n 3: Herramientas de creaci\u00f3n y validaci\u00f3n","text":""},{"location":"sesiones/#objetivos_2","title":"Objetivos","text":"<ul> <li>Manejar herramientas profesionales para trabajar con esquemas.</li> </ul>"},{"location":"sesiones/#contenidos_2","title":"Contenidos","text":"<ul> <li>Validadores online y linters</li> <li>Plugins en IDEs (WebStorm: JSON Schema plugin, Mongo plugin)</li> <li>JSON en APIs: uso de esquemas para frontend y backend</li> </ul>"},{"location":"sesiones/#practica_2","title":"Pr\u00e1ctica","text":"<ul> <li>Validar varios documentos JSON reales (por ejemplo, desde APIs p\u00fablicas)</li> <li>Crear esquemas que validen peticiones simuladas</li> </ul>"},{"location":"sesiones/#herramientas_2","title":"Herramientas","text":"<ul> <li>WebStorm + JSON Schema plugin</li> <li>Extensiones de navegador para probar APIs (como Postman o REST Client en VSCode)</li> </ul>"},{"location":"sesiones/#sesion-4-transformacion-de-documentos","title":"\u231a\ufe0f Sesi\u00f3n 4: Transformaci\u00f3n de documentos","text":""},{"location":"sesiones/#objetivos_3","title":"Objetivos","text":"<ul> <li>Convertir documentos entre distintos formatos.</li> </ul>"},{"location":"sesiones/#contenidos_3","title":"Contenidos","text":"<ul> <li>XSLT: introducci\u00f3n y demo (XML)</li> <li>Conversi\u00f3n JSON \u21c4 XML, JSON \u21c4 CSV</li> <li>Uso de plantillas de transformaci\u00f3n</li> </ul>"},{"location":"sesiones/#practica_3","title":"Pr\u00e1ctica","text":"<ul> <li>Convertir una receta de CSV a JSON y validarla con JSON Schema</li> <li>Simular integraci\u00f3n con una API que entrega XML</li> </ul>"},{"location":"sesiones/#herramientas_3","title":"Herramientas","text":"<ul> <li>CSV to JSON</li> <li>Online XML to JSON converter</li> <li>WebStorm</li> </ul>"},{"location":"sesiones/#sesion-5-almacenamiento-de-documentos-json-mongodb","title":"\u231a\ufe0f Sesi\u00f3n 5: Almacenamiento de documentos JSON \u2013 MongoDB","text":""},{"location":"sesiones/#objetivos_4","title":"Objetivos","text":"<ul> <li>Introducci\u00f3n al almacenamiento de documentos JSON.</li> </ul>"},{"location":"sesiones/#contenidos_4","title":"Contenidos","text":"<ul> <li>Qu\u00e9 es MongoDB y para qu\u00e9 sirve</li> <li>Documentos, colecciones, bases de datos</li> <li>Sentencias b\u00e1sicas: <code>insertOne</code>, <code>find</code>, operadores</li> <li>Estructura flexible de datos</li> </ul>"},{"location":"sesiones/#practica_4","title":"Pr\u00e1ctica","text":"<ul> <li>Insertar un documento JSON en MongoDB</li> <li>Realizar consultas sencillas</li> </ul>"},{"location":"sesiones/#herramientas_4","title":"Herramientas","text":"<ul> <li>MongoDB Compass (GUI)</li> <li>MongoDB Atlas (online)</li> <li>WebStorm con Mongo plugin o terminal</li> </ul>"},{"location":"sesiones/#sesion-6-intercambio-de-datos-y-repaso","title":"\u231a\ufe0f Sesi\u00f3n 6: Intercambio de datos y repaso","text":""},{"location":"sesiones/#objetivos_5","title":"Objetivos","text":"<ul> <li>Consolidar conocimientos</li> <li>Aprender a importar y exportar documentos</li> </ul>"},{"location":"sesiones/#contenidos_5","title":"Contenidos","text":"<ul> <li>Importaci\u00f3n/exportaci\u00f3n en MongoDB: JSON y CSV</li> <li>Manipulaci\u00f3n de datos en sistemas externos</li> <li>Integraci\u00f3n con frontend o APIs REST</li> </ul>"},{"location":"sesiones/#practica_5","title":"Pr\u00e1ctica","text":"<ul> <li>Mini caso guiado: importar CSV, convertir a JSON, validar, almacenar en MongoDB</li> </ul>"},{"location":"sesiones/#herramientas_5","title":"Herramientas","text":"<ul> <li>WebStorm</li> <li>MongoDB Compass o Atlas</li> <li>CSV/JSON online tools</li> </ul>"},{"location":"sesiones/#referencias","title":"Referencias","text":"<ul> <li>JSON Schema Docs</li> <li>MongoDB University</li> <li>WebStorm</li> <li>XML Schema Tutorial</li> <li>JSON Schema Store</li> <li>XSLT Introduction</li> <li>CSV to JSON</li> </ul> <p>Si quieres, puedo transformar este Markdown en presentaciones para cada sesi\u00f3n usando Canva.</p>"},{"location":"ud1/","title":"UT1 Introducci\u00f3n a los Lenguajes de Marcas","text":""},{"location":"ud1/#1-que-es-un-lenguaje-de-marcas-y-para-que-sirve","title":"1. \u00bfQu\u00e9 es un lenguaje de marcas y para qu\u00e9 sirve?","text":"<p>Los lenguajes de marcas son sistemas que utilizan etiquetas (marcas) para estructurar, organizar o describir contenido dentro de un documento. Estas marcas no son visibles en la salida final, sino que proporcionan instrucciones sobre c\u00f3mo presentar o procesar la informaci\u00f3n. Su prop\u00f3sito es permitir la separaci\u00f3n del contenido de su estructura o presentaci\u00f3n, facilitando la manipulaci\u00f3n y el intercambio de datos entre diferentes sistemas.</p>"},{"location":"ud1/#ejemplos-de-aplicaciones","title":"Ejemplos de aplicaciones:","text":"<ul> <li>HTML (HyperText Markup Language) estructura p\u00e1ginas web.</li> <li>XML (eXtensible Markup Language) intercambia y almacena datos entre sistemas.</li> <li>Markdown simplifica la escritura de texto estructurado para generar documentos o p\u00e1ginas web.</li> </ul>"},{"location":"ud1/#2-breve-historia-de-los-lenguajes-de-marcas","title":"2. Breve historia de los lenguajes de marcas","text":"<p>La evoluci\u00f3n de los lenguajes de marcas comenz\u00f3 con el GML (Generalized Markup Language) creado en los a\u00f1os 60 por IBM. Este lenguaje fue precursor de muchos otros:</p> <ul> <li>GML (Generalized Markup Language): Creado por IBM en los a\u00f1os 60, permit\u00eda a los usuarios etiquetar el contenido de un documento para diferentes prop\u00f3sitos.</li> <li>SGML (Standard Generalized Markup Language): Aprobado como est\u00e1ndar en 1986, fue una evoluci\u00f3n del GML y estableci\u00f3 las bases de muchos lenguajes posteriores.</li> <li>HTML (HyperText Markup Language): Basado en SGML, fue desarrollado en los 90 para estructurar documentos web. Marc\u00f3 el auge de la Web.</li> <li>XML (eXtensible Markup Language): Introducido en 1998, ofrece un formato m\u00e1s simple y flexible que SGML y se utiliza ampliamente para el intercambio de datos entre sistemas.</li> <li>Otros lenguajes, como Markdown, LaTeX y JSON, surgieron para resolver problemas espec\u00edficos en cuanto a la presentaci\u00f3n o manipulaci\u00f3n de informaci\u00f3n.</li> </ul>"},{"location":"ud1/#3-tipos-de-lenguajes-de-marcas-con-ejemplos-y-ampliacion","title":"3. Tipos de lenguajes de marcas con ejemplos y ampliaci\u00f3n","text":""},{"location":"ud1/#31-gml-generalized-markup-language","title":"3.1. GML (Generalized Markup Language)","text":"<p>GML fue desarrollado por IBM en la d\u00e9cada de los 60. Se considera uno de los primeros lenguajes de marcas y sent\u00f3 las bases de lo que m\u00e1s tarde se convertir\u00eda en SGML. Su principal objetivo era permitir a los autores etiquetar documentos para su procesamiento y presentaci\u00f3n, pero fue reemplazado por lenguajes m\u00e1s avanzados debido a su simplicidad.</p> <ul> <li>Uso t\u00edpico: Documentaci\u00f3n t\u00e9cnica en sistemas antiguos.</li> <li>Ventaja: Marc\u00f3 el inicio de los lenguajes de marcas.</li> <li>Desventaja: Limitado en t\u00e9rminos de flexibilidad y capacidad para definir estructuras complejas.</li> </ul> <pre><code>:title.General Markup Language\n:author.John Doe\n:section.Starting GML\nThis is a paragraph in GML.\n</code></pre>"},{"location":"ud1/#32-sgml-standard-generalized-markup-language","title":"3.2. SGML (Standard Generalized Markup Language)","text":"<p>SGML fue desarrollado en los a\u00f1os 80 como una evoluci\u00f3n de GML, con el prop\u00f3sito de ser un meta-lenguaje, es decir, un lenguaje para definir otros lenguajes de marcas. SGML es muy flexible, pero tambi\u00e9n bastante complejo, lo que llev\u00f3 a la creaci\u00f3n de lenguajes m\u00e1s espec\u00edficos y sencillos como HTML y XML.</p> <ul> <li>Uso t\u00edpico: Documentaci\u00f3n t\u00e9cnica y sistemas de publicaci\u00f3n.</li> <li>Ventaja: Extremadamente flexible, permite definir cualquier tipo de documento.</li> <li>Desventaja: Complejo de implementar, y poco adecuado para entornos web.</li> </ul> <pre><code>&lt;!DOCTYPE example SYSTEM \"example.dtd\"&gt;\n&lt;document&gt;\n  &lt;title&gt;This is SGML&lt;/title&gt;\n  &lt;body&gt;\n    &lt;p&gt;SGML example content&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/document&gt;\n</code></pre>"},{"location":"ud1/#33-html-hypertext-markup-language","title":"3.3. HTML (HyperText Markup Language)","text":"<p>HTML es el est\u00e1ndar para crear p\u00e1ginas web. Se desarroll\u00f3 en los a\u00f1os 90 y est\u00e1 basado en SGML, aunque simplificado para facilitar su uso en la Web. A lo largo de los a\u00f1os, HTML ha evolucionado, con HTML5 siendo la versi\u00f3n m\u00e1s reciente, que incluye soporte para multimedia, gr\u00e1ficos y aplicaciones interactivas.</p> <ul> <li>Uso t\u00edpico: Estructuraci\u00f3n de contenido web.</li> <li>Ventaja: Amplio soporte en navegadores, f\u00e1cil de aprender.</li> <li>Desventaja: Limitado para el manejo de datos complejos; dependiente de CSS y JavaScript para la presentaci\u00f3n y funcionalidad avanzada.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;HTML Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph in HTML.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ud1/#34-xml-extensible-markup-language","title":"3.4. XML (eXtensible Markup Language)","text":"<p>XML es una versi\u00f3n simplificada de SGML, dise\u00f1ada para ser tanto legible por humanos como por m\u00e1quinas. Su prop\u00f3sito principal es estructurar datos para intercambiarlos entre sistemas heterog\u00e9neos, sin atarse a la presentaci\u00f3n visual. XML no tiene etiquetas predefinidas, lo que permite a los usuarios definir sus propias estructuras.</p> <ul> <li>Uso t\u00edpico: Intercambio y almacenamiento de datos en aplicaciones web y empresariales.</li> <li>Ventaja: Flexible y extensible; puede ser interpretado por muchos sistemas.</li> <li>Desventaja: La sintaxis es verbosa y puede ser dif\u00edcil de manejar en documentos muy grandes.</li> </ul> <pre><code>&lt;book&gt;\n  &lt;title&gt;XML Developer's Guide&lt;/title&gt;\n  &lt;author&gt;Jane Doe&lt;/author&gt;\n  &lt;price&gt;44.95&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>"},{"location":"ud1/#35-markdown","title":"3.5. Markdown","text":"<p>Markdown es un lenguaje de marcas ligero creado para ser f\u00e1cil de leer y escribir. Est\u00e1 dise\u00f1ado para ser convertido r\u00e1pidamente a HTML u otros formatos, lo que lo hace ideal para la redacci\u00f3n de textos simples con formato. Es com\u00fanmente usado en documentaci\u00f3n de software, blogs y foros.</p> <ul> <li>Uso t\u00edpico: Blogs, documentaci\u00f3n t\u00e9cnica, generaci\u00f3n de HTML simple.</li> <li>Ventaja: Sencillo y r\u00e1pido de escribir, alta legibilidad.</li> <li>Desventaja: No es adecuado para documentos complejos o con muchos estilos avanzados.</li> </ul> <pre><code># This is a title\nThis is a paragraph with **bold** and *italic* text.\n</code></pre>"},{"location":"ud1/#36-latex","title":"3.6. LaTeX","text":"<p>LaTeX es un sistema de composici\u00f3n tipogr\u00e1fica utilizado principalmente en entornos acad\u00e9micos y cient\u00edficos. Es ideal para crear documentos con f\u00f3rmulas matem\u00e1ticas complejas, bibliograf\u00edas y tablas de contenido automatizadas. Aunque tiene una curva de aprendizaje m\u00e1s pronunciada, ofrece un control fino sobre la presentaci\u00f3n de los documentos.</p> <ul> <li>Uso t\u00edpico: Publicaciones acad\u00e9micas, libros, informes cient\u00edficos.</li> <li>Ventaja: Excelente para documentos cient\u00edficos y matem\u00e1ticos.</li> <li>Desventaja: Curva de aprendizaje pronunciada; requiere compilaci\u00f3n.</li> </ul> <pre><code>\\documentclass{article}\n\\title{LaTeX Example}\n\\author{John Doe}\n\\begin{document}\n\\maketitle\n\\section{Introduction}\nThis is a paragraph in LaTeX.\n\\end{document}\n</code></pre>"},{"location":"ud1/#37-json-javascript-object-notation","title":"3.7. JSON (JavaScript Object Notation)","text":"<p>JSON es un formato ligero para el intercambio de datos entre servidores y aplicaciones web. Su estructura es sencilla, basada en pares de clave-valor, y est\u00e1 ampliamente utilizado en APIs y aplicaciones web debido a su compatibilidad con JavaScript.</p> <ul> <li>Uso t\u00edpico: Intercambio de datos entre servidores y aplicaciones web.</li> <li>Ventaja: Ligero, f\u00e1cil de interpretar por m\u00e1quinas y legible para humanos.</li> <li>Desventaja: No es adecuado para documentos muy complejos o con relaciones jer\u00e1rquicas profundas.</li> </ul> <pre><code>{\n  \"title\": \"JSON Example\",\n  \"author\": \"John Doe\",\n  \"published\": true\n}\n</code></pre>"},{"location":"ud1/#4-cuadro-resumen-comparativo","title":"4. Cuadro resumen comparativo","text":"Lenguaje Prop\u00f3sito Basado en \u00c1mbito de uso Sintaxis Ejemplo Ventajas Desventajas GML Estructurar documentos IBM Documentaci\u00f3n t\u00e9cnica B\u00e1sico <code>:title.General Markup</code> Simple, pionero de los lenguajes de marcas Limitado en flexibilidad y uso moderno SGML Definir otros lenguajes de marcas GML Documentaci\u00f3n compleja Complejo <code>&lt;document&gt;&lt;title&gt;SGML</code> Extremadamente flexible Complejo y dif\u00edcil de implementar HTML Estructurar p\u00e1ginas web SGML Web Etiquetas predef. <code>&lt;html&gt;&lt;body&gt;&lt;h1&gt;</code> Soporte universal en navegadores Necesita CSS y JavaScript para ser funcional XML Estructurar e intercambiar datos SGML Almacenamiento, intercambio Flexible <code>&lt;book&gt;&lt;title&gt;XML Guide&lt;/title&gt;</code> Extensible, universal para datos Verboso y dif\u00edcil de manejar en documentos grandes Markdown Escritura de texto con formato Independ. Documentaci\u00f3n, blogs Ligero <code># Title</code> Simple, legible, f\u00e1cil de convertir a HTML Limitado para documentos complejos LaTeX Composici\u00f3n de documentos TEX Publicaciones cient\u00edficas R\u00edgido <code>\\section{Introduction}</code> Excelente para matem\u00e1ticas y publicaciones formales Curva de aprendizaje pronunciada JSON Intercambio de datos Independ. Aplicaciones web, APIs Clave-valor <code>{ \"title\": \"JSON\" }</code> Ligero, f\u00e1cil de interpretar No apto para datos complejos con muchas relaciones ```"},{"location":"ud2-1/","title":"UT2.1 Introducci\u00f3n a HTML5","text":""},{"location":"ud2-1/#1-historia-de-html-y-evolucion-hacia-html5","title":"1. Historia de HTML y evoluci\u00f3n hacia HTML5","text":"<ul> <li>Origen de HTML (1990-1991): HTML (HyperText Markup Language) fue creado por Tim Berners-Lee, el padre de la World Wide Web. La primera versi\u00f3n fue muy b\u00e1sica, con un conjunto limitado de etiquetas que permit\u00edan estructurar contenido sencillo.</li> <li>Evoluci\u00f3n de HTML: A lo largo de los a\u00f1os, HTML evolucion\u00f3 para incluir nuevas funcionalidades como tablas, estilos, y formularios en HTML 3.2 y 4.01.</li> <li>La necesidad de HTML5:<ul> <li>Con el auge de la web multimedia y las aplicaciones interactivas, HTML4 se qued\u00f3 atr\u00e1s.</li> <li>Se necesitaba un lenguaje est\u00e1ndar que soportara video, audio y gr\u00e1ficos sin necesidad de plugins como Flash.</li> <li>HTML5 fue desarrollado por el W3C e introducido en 2008, con la meta de crear una web m\u00e1s sem\u00e1ntica, accesible y compatible con dispositivos m\u00f3viles.</li> </ul> </li> <li>Caracter\u00edsticas clave de HTML5:<ul> <li>Soporte multimedia nativo (audio y video).</li> <li>Nuevas APIs, como Canvas para gr\u00e1ficos 2D, Web Storage y Geolocation.</li> <li>Mayor \u00e9nfasis en la sem\u00e1ntica del contenido con nuevas etiquetas.</li> </ul> </li> </ul>"},{"location":"ud2-1/#2-estructura-basica-de-un-documento-html5","title":"2. Estructura b\u00e1sica de un documento HTML5","text":"<ul> <li>DOCTYPE: El documento HTML5 comienza con <code>&lt;!DOCTYPE html&gt;</code>, que le indica al navegador que debe interpretar el documento como HTML5.</li> <li>Etiquetas principales:<ul> <li><code>&lt;html&gt;</code>: Elemento ra\u00edz que envuelve todo el contenido.</li> <li><code>&lt;head&gt;</code>: Contiene metadatos sobre el documento (como el t\u00edtulo, enlaces a hojas de estilo, meta descripciones, etc.).</li> <li><code>&lt;meta charset=\"UTF-8\"&gt;</code>: Para definir la codificaci\u00f3n de caracteres del documento (UTF-8 es el est\u00e1ndar recomendado).</li> <li><code>&lt;title&gt;</code>: Define el t\u00edtulo que se muestra en la pesta\u00f1a del navegador.</li> <li><code>&lt;body&gt;</code>: Contiene el contenido visible para el usuario (texto, im\u00e1genes, videos, etc.).</li> </ul> </li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;title&gt;Mi primer documento HTML5&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\u00a1Hola, Mundo!&lt;/h1&gt;\n        &lt;p&gt;Este es un documento b\u00e1sico en HTML5.&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>"},{"location":"ud2-1/#3-etiquetas-basicas-en-html5","title":"3. Etiquetas b\u00e1sicas en HTML5","text":""},{"location":"ud2-1/#31-etiquetas-de-encabezado-y-parrafo","title":"3.1. Etiquetas de encabezado y p\u00e1rrafo","text":"<ul> <li><code>&lt;h1&gt;</code> a <code>&lt;h6&gt;</code>: Para definir t\u00edtulos y subt\u00edtulos en el documento.<ul> <li><code>&lt;h1&gt;</code> es el nivel m\u00e1s importante y <code>&lt;h6&gt;</code> el menos importante.</li> </ul> </li> <li><code>&lt;p&gt;</code>: Para definir p\u00e1rrafos de texto.</li> </ul>"},{"location":"ud2-1/#32-etiquetas-de-contenido-en-bloque-y-en-linea","title":"3.2. Etiquetas de contenido en bloque y en l\u00ednea","text":"<ul> <li>Contenido en bloque:<ul> <li><code>&lt;div&gt;</code>: Un contenedor gen\u00e9rico para contenido en bloque.</li> <li><code>&lt;section&gt;</code>: Agrupa contenido tem\u00e1tico relacionado.</li> <li><code>&lt;article&gt;</code>: Para contenido independiente que podr\u00eda ser reutilizado, como una publicaci\u00f3n de blog.</li> <li><code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;nav&gt;</code>: Partes estructurales de una p\u00e1gina web.</li> </ul> </li> <li>Contenido en l\u00ednea:<ul> <li><code>&lt;span&gt;</code>: Un contenedor gen\u00e9rico para contenido en l\u00ednea.</li> <li><code>&lt;a href=\"#\"&gt;</code>: Enlaces que permiten la navegaci\u00f3n entre p\u00e1ginas.</li> <li>Etiquetas de estilo en l\u00ednea: <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;mark&gt;</code>, <code>&lt;code&gt;</code> para marcar texto con importancia, \u00e9nfasis, resaltado o c\u00f3digo fuente.</li> </ul> </li> </ul>"},{"location":"ud2-1/#33-listas","title":"3.3. Listas","text":"<ul> <li>Listas ordenadas (<code>&lt;ol&gt;</code>) y no ordenadas (<code>&lt;ul&gt;</code>) con elementos de lista (<code>&lt;li&gt;</code>).</li> </ul>"},{"location":"ud2-1/#34-imagenes-y-multimedia","title":"3.4. Im\u00e1genes y multimedia","text":"<ul> <li><code>&lt;img src=\"ruta\" alt=\"descripci\u00f3n\"&gt;</code>: Inserta una imagen.</li> <li><code>&lt;video&gt;</code> y <code>&lt;audio&gt;</code>: Etiquetas para incorporar multimedia nativa, sin necesidad de plugins.<ul> <li>Ejemplo de video:</li> </ul> </li> </ul> <pre><code>    &lt;video controls&gt;\n        &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n        Tu navegador no soporta la etiqueta video.\n    &lt;/video&gt;\n</code></pre>"},{"location":"ud2-1/#35-formularios","title":"3.5. Formularios","text":"<ul> <li>El uso de formularios es esencial para la interacci\u00f3n del usuario.<ul> <li><code>&lt;form&gt;</code>: Contenedor del formulario.</li> <li><code>&lt;input type=\"text\"&gt;</code>, <code>&lt;input type=\"email\"&gt;</code>, <code>&lt;input type=\"submit\"&gt;</code>: Campos de entrada de datos.</li> <li><code>&lt;label&gt;</code>: Para etiquetar los campos de entrada.</li> </ul> </li> </ul> <pre><code>  &lt;form action=\"/submit\" method=\"POST\"&gt;\n      &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;\n      &lt;input type=\"submit\" value=\"Enviar\"&gt;\n  &lt;/form&gt;\n</code></pre>"},{"location":"ud2-1/#36-tablas-en-html5","title":"3.6. Tablas en HTML5","text":"<p>Las tablas permiten organizar datos en filas y columnas. Aunque no se recomienda para la maquetaci\u00f3n de p\u00e1ginas, siguen siendo \u00fatiles para mostrar datos tabulares.</p> <ul> <li><code>&lt;table&gt;</code>: Elemento contenedor de la tabla.</li> <li><code>&lt;thead&gt;</code>: Agrupa el encabezado de la tabla.</li> <li><code>&lt;tbody&gt;</code>: Agrupa el cuerpo de la tabla.</li> <li><code>&lt;tr&gt;</code>: Define una fila en la tabla.</li> <li><code>&lt;th&gt;</code>: Define una celda de encabezado (por defecto en negrita y centrada).</li> <li><code>&lt;td&gt;</code>: Define una celda de datos en la tabla.</li> </ul> <p>Ejemplo b\u00e1sico de tabla:</p> <pre><code>   &lt;table&gt;\n       &lt;thead&gt;\n           &lt;tr&gt;\n               &lt;th&gt;Nombre&lt;/th&gt;\n               &lt;th&gt;Edad&lt;/th&gt;\n               &lt;th&gt;Ciudad&lt;/th&gt;\n           &lt;/tr&gt;\n       &lt;/thead&gt;\n       &lt;tbody&gt;\n           &lt;tr&gt;\n               &lt;td&gt;Juan&lt;/td&gt;\n               &lt;td&gt;25&lt;/td&gt;\n               &lt;td&gt;Madrid&lt;/td&gt;\n           &lt;/tr&gt;\n           &lt;tr&gt;\n               &lt;td&gt;Ana&lt;/td&gt;\n               &lt;td&gt;30&lt;/td&gt;\n               &lt;td&gt;Barcelona&lt;/td&gt;\n           &lt;/tr&gt;\n       &lt;/tbody&gt;\n   &lt;/table&gt;\n</code></pre> <ul> <li>Atributos importantes:<ul> <li><code>border</code>: Define el grosor del borde de la tabla. (En HTML5 se recomienda usar CSS para manejar estilos).</li> <li><code>colspan</code>: Hace que una celda se extienda por varias columnas.</li> <li><code>rowspan</code>: Hace que una celda se extienda por varias filas.</li> </ul> </li> </ul> <p>Ejemplo con <code>colspan</code> y <code>rowspan</code>:</p> <pre><code>   &lt;table border=\"1\"&gt;\n       &lt;thead&gt;\n           &lt;tr&gt;\n               &lt;th&gt;Producto&lt;/th&gt;\n               &lt;th&gt;Precio&lt;/th&gt;\n               &lt;th&gt;Cantidad&lt;/th&gt;\n           &lt;/tr&gt;\n       &lt;/thead&gt;\n       &lt;tbody&gt;\n           &lt;tr&gt;\n               &lt;td&gt;Manzanas&lt;/td&gt;\n               &lt;td&gt;1.00\u20ac&lt;/td&gt;\n               &lt;td rowspan=\"2\"&gt;10&lt;/td&gt;\n           &lt;/tr&gt;\n           &lt;tr&gt;\n               &lt;td&gt;Peras&lt;/td&gt;\n               &lt;td&gt;1.50\u20ac&lt;/td&gt;\n           &lt;/tr&gt;\n           &lt;tr&gt;\n               &lt;td colspan=\"2\"&gt;Total&lt;/td&gt;\n               &lt;td&gt;20\u20ac&lt;/td&gt;\n           &lt;/tr&gt;\n       &lt;/tbody&gt;\n   &lt;/table&gt;\n</code></pre>"},{"location":"ud2-1/#4-html5-semantico-un-enfoque-hacia-la-accesibilidad-y-seo","title":"4. HTML5 Sem\u00e1ntico: Un enfoque hacia la accesibilidad y SEO","text":"<ul> <li>La introducci\u00f3n de etiquetas sem\u00e1nticas en HTML5 mejora la accesibilidad para lectores de pantalla y optimiza el SEO.<ul> <li><code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;nav&gt;</code>: Ayudan a estructurar mejor el contenido, proporcionando informaci\u00f3n clara sobre su funci\u00f3n.</li> </ul> </li> <li>Beneficios de las etiquetas sem\u00e1nticas:<ul> <li>Mejoran la comprensi\u00f3n del contenido por parte de los motores de b\u00fasqueda.</li> <li>Facilitan la lectura del c\u00f3digo por otros desarrolladores.</li> <li>Mejoran la accesibilidad para usuarios con discapacidades.</li> </ul> </li> </ul>"},{"location":"ud2-1/#recursos-complementarios","title":"Recursos complementarios","text":"<ul> <li>Documentaci\u00f3n oficial de HTML5 (MDN Web Docs)</li> <li>W3C HTML5 Specification</li> <li>HTML5 by Manz</li> </ul> <p>Ejemplos y ejercicios pr\u00e1cticos: Crear una p\u00e1gina HTML b\u00e1sica que incluya un formulario de contacto, un art\u00edculo con im\u00e1genes y videos, y una lista de tareas.</p>"},{"location":"ud2-1/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la Learn HTML by Building a Cat Photo App  de freeCodeCamp.</p>"},{"location":"ud2/","title":"UT2 Gu\u00eda completa de HTML5.","text":"<p>Esta gu\u00eda integra los conceptos esenciales de HTML5, incluyendo su sintaxis, atributos, etiquetas sem\u00e1nticas, multimedia, formularios, tablas, y etiquetas modernas. Est\u00e1 organizada de manera l\u00f3gica para facilitar el aprendizaje progresivo del lenguaje.</p>"},{"location":"ud2/#1-introduccion-a-html5","title":"1. Introducci\u00f3n a HTML5","text":"<p>HTML5 es la quinta y m\u00e1s reciente versi\u00f3n del lenguaje de marcado HTML (HyperText Markup Language), utilizado para estructurar y presentar contenido en la web. Fue desarrollado para mejorar las capacidades de HTML4 y XHTML, ofreciendo nuevas caracter\u00edsticas que facilitan la creaci\u00f3n de aplicaciones web m\u00e1s ricas, interactivas y sem\u00e1nticas.</p>"},{"location":"ud2/#caracteristicas-principales-de-html5","title":"Caracter\u00edsticas Principales de HTML5:","text":"<ul> <li>Sem\u00e1ntica Mejorada: Nuevas etiquetas que proporcionan una mejor estructura y significado al contenido.</li> <li>Multimedia Integrada: Soporte nativo para audio y video sin necesidad de plugins externos.</li> <li>Gr\u00e1ficos y Efectos Visuales: Elemento <code>&lt;canvas&gt;</code> para gr\u00e1ficos din\u00e1micos y <code>&lt;svg&gt;</code> para gr\u00e1ficos vectoriales.</li> <li>Formularios Mejorados: Nuevos tipos de entrada y validaciones.</li> <li>APIs y Funcionalidades Avanzadas: Geolocalizaci\u00f3n, almacenamiento local, arrastrar y soltar, entre otros.</li> </ul>"},{"location":"ud2/#2-estructura-basica-de-un-documento-html5","title":"2. Estructura B\u00e1sica de un Documento HTML5","text":"<p>Comprender la estructura b\u00e1sica de un documento HTML5 es fundamental antes de profundizar en etiquetas y atributos espec\u00edficos.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;T\u00edtulo de la P\u00e1gina&lt;/title&gt;\n    &lt;!-- Enlaces a hojas de estilo, scripts, etc. --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- Contenido de la p\u00e1gina --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ud2/#descripcion-de-la-estructura","title":"Descripci\u00f3n de la Estructura:","text":"<ul> <li><code>&lt;!DOCTYPE html&gt;</code>: Declara el tipo de documento y la versi\u00f3n de HTML (HTML5).</li> <li><code>&lt;html lang=\"es\"&gt;</code>: Elemento ra\u00edz del documento, con el atributo <code>lang</code> indicando el idioma.</li> <li><code>&lt;head&gt;</code>: Contiene metadatos, enlaces a hojas de estilo, scripts y el t\u00edtulo de la p\u00e1gina.</li> <li><code>&lt;meta charset=\"UTF-8\"&gt;</code>: Define la codificaci\u00f3n de caracteres.</li> <li><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;</code>: Configura el viewport para dispositivos m\u00f3viles.</li> <li><code>&lt;title&gt;</code>: T\u00edtulo que aparece en la pesta\u00f1a del navegador.</li> <li><code>&lt;body&gt;</code>: Contiene todo el contenido visible de la p\u00e1gina web.</li> </ul>"},{"location":"ud2/#3-sintaxis-de-las-etiquetas-en-html5","title":"3. Sintaxis de las Etiquetas en HTML5","text":""},{"location":"ud2/#estructura-basica-de-una-etiqueta-html5","title":"Estructura B\u00e1sica de una Etiqueta HTML5","text":"<p>Cada elemento en HTML5 se representa mediante una etiqueta que generalmente consta de una etiqueta de apertura y una de cierre, aunque algunas son auto-cerradas.</p> <pre><code>&lt;etiqueta atributo=\"valor\"&gt;Contenido&lt;/etiqueta&gt;\n</code></pre> <ul> <li>Etiqueta de Apertura (<code>&lt;etiqueta&gt;</code>): Indica el inicio de un elemento.</li> <li>Atributos: Proporcionan informaci\u00f3n adicional sobre el elemento.</li> <li>Contenido: Lo que se encuentra entre la etiqueta de apertura y la de cierre.</li> <li>Etiqueta de Cierre (<code>&lt;/etiqueta&gt;</code>): Indica el final del elemento.</li> </ul>"},{"location":"ud2/#etiquetas-auto-cerradas","title":"Etiquetas Auto-cerradas","text":"<p>Algunas etiquetas no requieren contenido y se auto-cierran.</p> <pre><code>&lt;etiqueta atributo=\"valor\" /&gt;\n</code></pre> <p>Ejemplos Comunes:</p> <ul> <li><code>&lt;img src=\"imagen.jpg\" alt=\"Descripci\u00f3n de la imagen\" /&gt;</code></li> <li><code>&lt;br /&gt;</code> (Salto de l\u00ednea)</li> <li><code>&lt;hr /&gt;</code> (L\u00ednea horizontal)</li> </ul>"},{"location":"ud2/#buenas-practicas-de-sintaxis","title":"Buenas Pr\u00e1cticas de Sintaxis","text":"<ol> <li>Indentaci\u00f3n y Formato: Mant\u00e9n una estructura clara y bien indentada para mejorar la legibilidad.</li> <li>Uso de Comillas: Siempre utiliza comillas para los valores de los atributos (<code>atributo=\"valor\"</code>).</li> <li>Atributos Relevantes: Incluye solo los atributos necesarios para cada etiqueta.</li> <li>Cierre de Etiquetas: Aseg\u00farate de cerrar todas las etiquetas que lo requieran para evitar errores de renderizado.</li> </ol>"},{"location":"ud2/#4-atributos-en-html5","title":"4. Atributos en HTML5","text":"<p>HTML5 introduce una variedad de atributos que mejoran la funcionalidad y la accesibilidad de los elementos. A continuaci\u00f3n, se detallan los atributos globales, espec\u00edficos de etiquetas comunes, y de accesibilidad.</p>"},{"location":"ud2/#41-atributos-globales","title":"4.1. Atributos Globales","text":"<p>Los atributos globales est\u00e1n disponibles para la mayor\u00eda de las etiquetas HTML5.</p>"},{"location":"ud2/#1-id","title":"1. <code>id</code>","text":"<ul> <li>Descripci\u00f3n: Identificador \u00fanico para el elemento.</li> <li>Uso: Permite la referencia del elemento mediante CSS o JavaScript.</li> <li> <p>Ejemplo:</p> <p><code>html &lt;div id=\"miDiv\"&gt;Contenido&lt;/div&gt;</code></p> </li> </ul>"},{"location":"ud2/#2-class","title":"2. <code>class</code>","text":"<ul> <li>Descripci\u00f3n: Define una o varias clases para el elemento.</li> <li>Uso: Facilita la aplicaci\u00f3n de estilos CSS o la selecci\u00f3n en JavaScript.</li> <li> <p>Ejemplo:</p> <p><code>html &lt;p class=\"texto-importante\"&gt;Texto destacado&lt;/p&gt;</code></p> </li> </ul>"},{"location":"ud2/#3-style","title":"3. <code>style</code>","text":"<ul> <li>Descripci\u00f3n: Aplica estilos CSS en l\u00ednea al elemento.</li> <li>Uso: \u00datil para estilos r\u00e1pidos o espec\u00edficos.</li> <li> <p>Ejemplo:</p> <p><code>html &lt;h1 style=\"color: blue;\"&gt;T\u00edtulo Azul&lt;/h1&gt;</code></p> </li> </ul>"},{"location":"ud2/#4-title","title":"4. <code>title</code>","text":"<ul> <li>Descripci\u00f3n: Proporciona informaci\u00f3n adicional que aparece como tooltip al pasar el cursor.</li> <li> <p>Ejemplo:</p> <p><code>html   &lt;abbr title=\"World Health Organization\"&gt;WHO&lt;/abbr&gt;</code></p> </li> </ul>"},{"location":"ud2/#5-data-","title":"5. <code>data-*</code>","text":"<ul> <li>Descripci\u00f3n: Permite almacenar datos personalizados privados para la p\u00e1gina o aplicaci\u00f3n.</li> <li>Uso: Accesibles mediante JavaScript.</li> <li>Ejemplo:</li> </ul> <p>```html  Usuario</p> <p>```</p>"},{"location":"ud2/#6-hidden","title":"6. <code>hidden</code>","text":"<ul> <li>Descripci\u00f3n: Indica que el elemento no es relevante y debe ocultarse.</li> <li>Ejemplo:</li> </ul> <p>```html  <p>Este p\u00e1rrafo est\u00e1 oculto.</p></p> <p>```</p>"},{"location":"ud2/#7-lang","title":"7. <code>lang</code>","text":"<ul> <li>Descripci\u00f3n: Especifica el idioma del elemento.</li> <li>Ejemplo:</li> </ul> <p>```html  <p>Este texto est\u00e1 en espa\u00f1ol.</p></p> <p>```</p>"},{"location":"ud2/#8-tabindex","title":"8. <code>tabindex</code>","text":"<ul> <li>Descripci\u00f3n: Controla el orden de tabulaci\u00f3n de los elementos interactivos.</li> <li>Ejemplo:</li> </ul> <p><code>html   &lt;button tabindex=\"1\"&gt;Primer Bot\u00f3n&lt;/button&gt;</code></p>"},{"location":"ud2/#42-atributos-especificos-de-etiquetas-comunes","title":"4.2. Atributos Espec\u00edficos de Etiquetas Comunes","text":""},{"location":"ud2/#1-a-enlace","title":"1. <code>&lt;a&gt;</code> (Enlace)","text":"<ul> <li><code>href</code>: URL del destino del enlace.</li> <li><code>target</code>: Especifica d\u00f3nde abrir el enlace (e.g., <code>_blank</code> para una nueva pesta\u00f1a).</li> <li><code>rel</code>: Define la relaci\u00f3n entre el documento actual y el enlazado (e.g., <code>noopener</code>, <code>nofollow</code>).</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;a href=\"https://www.ejemplo.com\" target=\"_blank\" rel=\"noopener\"&gt;Visitar Ejemplo&lt;/a&gt;\n</code></pre>"},{"location":"ud2/#2-img-imagen","title":"2. <code>&lt;img&gt;</code> (Imagen)","text":"<ul> <li><code>src</code>: Ruta de la imagen.</li> <li><code>alt</code>: Texto alternativo que describe la imagen.</li> <li><code>width</code> y <code>height</code>: Dimensiones de la imagen.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;img src=\"logo.png\" alt=\"Logo de la Empresa\" width=\"200\" height=\"100\" /&gt;\n</code></pre>"},{"location":"ud2/#3-input-campo-de-entrada","title":"3. <code>&lt;input&gt;</code> (Campo de Entrada)","text":"<ul> <li><code>type</code>: Tipo de entrada (e.g., <code>text</code>, <code>email</code>, <code>password</code>).</li> <li><code>name</code>: Nombre del campo para el env\u00edo de datos.</li> <li><code>value</code>: Valor predefinido del campo.</li> <li><code>placeholder</code>: Texto de ayuda dentro del campo.</li> <li><code>required</code>: Indica que el campo es obligatorio.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;input type=\"email\" name=\"correo\" placeholder=\"tuemail@ejemplo.com\" required /&gt;\n</code></pre>"},{"location":"ud2/#4-button-boton","title":"4. <code>&lt;button&gt;</code> (Bot\u00f3n)","text":"<ul> <li><code>type</code>: Tipo de bot\u00f3n (e.g., <code>button</code>, <code>submit</code>, <code>reset</code>).</li> <li><code>disabled</code>: Desactiva el bot\u00f3n.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n</code></pre>"},{"location":"ud2/#5-form-formulario","title":"5. <code>&lt;form&gt;</code> (Formulario)","text":"<ul> <li><code>action</code>: URL a la que se enviar\u00e1n los datos del formulario.</li> <li><code>method</code>: M\u00e9todo de env\u00edo (<code>GET</code> o <code>POST</code>).</li> <li><code>enctype</code>: Tipo de codificaci\u00f3n para los datos del formulario.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;form action=\"/enviar\" method=\"post\"&gt;\n    &lt;!-- Campos del formulario --&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"ud2/#43-atributos-de-accesibilidad","title":"4.3. Atributos de Accesibilidad","text":"<p>HTML5 tambi\u00e9n enfatiza la accesibilidad, permitiendo el uso de atributos que mejoran la interacci\u00f3n con tecnolog\u00edas de asistencia.</p>"},{"location":"ud2/#aria-","title":"<code>aria-*</code>","text":"<ul> <li>Descripci\u00f3n: Atributos de accesibilidad que mejoran la interacci\u00f3n con tecnolog\u00edas de asistencia.</li> <li>Ejemplo: <code>html   &lt;button aria-label=\"Cerrar\" onclick=\"cerrarVentana()\"&gt;X&lt;/button&gt;</code></li> </ul>"},{"location":"ud2/#5-etiquetas-semanticas-en-html5","title":"5. Etiquetas Sem\u00e1nticas en HTML5","text":"<p>Las etiquetas sem\u00e1nticas proporcionan significado al contenido, mejorando la accesibilidad y optimizando el SEO.</p>"},{"location":"ud2/#principales-etiquetas-semanticas","title":"Principales Etiquetas Sem\u00e1nticas:","text":"<ol> <li> <p><code>&lt;header&gt;</code></p> <ul> <li>Descripci\u00f3n: Define el encabezado de una p\u00e1gina o secci\u00f3n.</li> <li>Ejemplo:</li> </ul> <p><code>html   &lt;header&gt;       &lt;h1&gt;Bienvenido a Mi Sitio Web&lt;/h1&gt;       &lt;nav&gt;           &lt;ul&gt;               &lt;li&gt;&lt;a href=\"#\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;               &lt;li&gt;&lt;a href=\"#\"&gt;Servicios&lt;/a&gt;&lt;/li&gt;               &lt;li&gt;&lt;a href=\"#\"&gt;Contacto&lt;/a&gt;&lt;/li&gt;           &lt;/ul&gt;       &lt;/nav&gt;   &lt;/header&gt;</code></p> </li> <li> <p><code>&lt;nav&gt;</code></p> <ul> <li>Descripci\u00f3n: Define un conjunto de enlaces de navegaci\u00f3n.</li> <li>Ejemplo: (Incluido en el ejemplo de <code>&lt;header&gt;</code> arriba)</li> </ul> </li> <li> <p><code>&lt;main&gt;</code></p> <ul> <li>Descripci\u00f3n: Representa el contenido principal del documento.</li> <li>Ejemplo:</li> </ul> <p><code>html   &lt;main&gt;       &lt;article&gt;           &lt;h2&gt;T\u00edtulo del Art\u00edculo&lt;/h2&gt;           &lt;p&gt;Contenido del art\u00edculo...&lt;/p&gt;       &lt;/article&gt;   &lt;/main&gt;</code></p> </li> <li> <p><code>&lt;section&gt;</code></p> <ul> <li>Descripci\u00f3n: Define una secci\u00f3n gen\u00e9rica del documento.</li> <li>Ejemplo:</li> </ul> <p><code>html   &lt;section&gt;       &lt;h2&gt;Secci\u00f3n de Servicios&lt;/h2&gt;       &lt;p&gt;Descripci\u00f3n de los servicios ofrecidos...&lt;/p&gt;   &lt;/section&gt;</code></p> </li> <li> <p><code>&lt;article&gt;</code></p> <ul> <li>Descripci\u00f3n: Representa contenido independiente, como un art\u00edculo de blog o una noticia.</li> <li>Ejemplo: (Incluido en el ejemplo de <code>&lt;main&gt;</code> arriba)</li> </ul> </li> <li> <p><code>&lt;aside&gt;</code></p> <ul> <li>Descripci\u00f3n: Define contenido complementario, como barras laterales o widgets.</li> <li>Ejemplo:</li> </ul> <p><code>html   &lt;aside&gt;       &lt;h3&gt;Informaci\u00f3n Adicional&lt;/h3&gt;       &lt;p&gt;Contenido adicional relacionado...&lt;/p&gt;   &lt;/aside&gt;</code></p> </li> <li> <p><code>&lt;footer&gt;</code></p> <ul> <li>Descripci\u00f3n: Define el pie de p\u00e1gina de una secci\u00f3n o documento.</li> <li>Ejemplo:</li> </ul> <p><code>html   &lt;footer&gt;       &lt;p&gt;&amp;copy; 2024 Mi Sitio Web. Todos los derechos reservados.&lt;/p&gt;   &lt;/footer&gt;</code></p> </li> </ol>"},{"location":"ud2/#6-multimedia-en-html5","title":"6. Multimedia en HTML5","text":"<p>HTML5 facilita la incorporaci\u00f3n de contenido multimedia sin necesidad de plugins externos.</p>"},{"location":"ud2/#61-etiqueta-video","title":"6.1. Etiqueta <code>&lt;video&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Inserta contenido de video.</li> <li>Atributos Comunes:<ul> <li><code>controls</code>: Muestra los controles de reproducci\u00f3n.</li> <li><code>autoplay</code>: Inicia la reproducci\u00f3n autom\u00e1ticamente.</li> <li><code>loop</code>: Reproduce el video en bucle.</li> <li><code>muted</code>: Inicia el video sin sonido.</li> <li><code>poster</code>: Imagen de previsualizaci\u00f3n antes de la reproducci\u00f3n.</li> </ul> </li> </ul> <p>Ejemplo:</p> <pre><code>&lt;video width=\"640\" height=\"360\" controls&gt;\n    &lt;source src=\"video-ejemplo.mp4\" type=\"video/mp4\"&gt;\n    &lt;source src=\"video-ejemplo.ogg\" type=\"video/ogg\"&gt;\n    Tu navegador no soporta el elemento de video.\n&lt;/video&gt;\n</code></pre>"},{"location":"ud2/#62-etiqueta-audio","title":"6.2. Etiqueta <code>&lt;audio&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Inserta contenido de audio.</li> <li>Atributos Comunes: Similar a <code>&lt;video&gt;</code>.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;audio controls&gt;\n    &lt;source src=\"audio-ejemplo.mp3\" type=\"audio/mpeg\"&gt;\n    &lt;source src=\"audio-ejemplo.ogg\" type=\"audio/ogg\"&gt;\n    Tu navegador no soporta el elemento de audio.\n&lt;/audio&gt;\n</code></pre>"},{"location":"ud2/#63-etiqueta-canvas","title":"6.3. Etiqueta <code>&lt;canvas&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Permite dibujar gr\u00e1ficos mediante scripting (JavaScript).</li> <li>Ejemplo:</li> </ul> <pre><code>  &lt;canvas id=\"miCanvas\" width=\"200\" height=\"100\" style=\"border:1px solid #000000;\"&gt;\n      Tu navegador no soporta el elemento canvas.\n  &lt;/canvas&gt;\n\n  &lt;script&gt;\n      var canvas = document.getElementById('miCanvas');\n      var contexto = canvas.getContext('2d');\n      contexto.fillStyle = '#FF0000';\n      contexto.fillRect(20, 20, 150, 75);\n  &lt;/script&gt;\n</code></pre>"},{"location":"ud2/#64-etiqueta-svg","title":"6.4. Etiqueta <code>&lt;svg&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Permite integrar gr\u00e1ficos vectoriales escalables directamente en HTML.</li> <li>Ejemplo:</li> </ul> <p><code>html   &lt;svg width=\"100\" height=\"100\"&gt;       &lt;circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" /&gt;   &lt;/svg&gt;</code></p> <p>Descripci\u00f3n del Ejemplo:</p> <ul> <li>Dibuja un c\u00edrculo con centro en (50,50), radio 40, borde verde y relleno amarillo.</li> </ul>"},{"location":"ud2/#7-formularios-mejorados-en-html5","title":"7. Formularios Mejorados en HTML5","text":"<p>HTML5 introduce nuevas etiquetas y atributos que mejoran la funcionalidad y la validaci\u00f3n de los formularios.</p>"},{"location":"ud2/#71-fieldsets-y-leyendas","title":"7.1. Fieldsets y Leyendas","text":"<p>Los fieldsets agrupan elementos relacionados dentro de un formulario, mientras que la leyenda proporciona una descripci\u00f3n para el grupo.</p> <p>Ejemplo de Fieldset:</p> <pre><code>&lt;form action=\"/registrar\" method=\"post\"&gt;\n    &lt;fieldset&gt;\n        &lt;legend&gt;Informaci\u00f3n Personal&lt;/legend&gt;\n\n        &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" required /&gt;\n\n        &lt;label for=\"apellido\"&gt;Apellido:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"apellido\" name=\"apellido\" required /&gt;\n    &lt;/fieldset&gt;\n\n    &lt;fieldset&gt;\n        &lt;legend&gt;Informaci\u00f3n de Contacto&lt;/legend&gt;\n\n        &lt;label for=\"email\"&gt;Correo Electr\u00f3nico:&lt;/label&gt;\n        &lt;input type=\"email\" id=\"email\" name=\"email\" required /&gt;\n\n        &lt;label for=\"telefono\"&gt;Tel\u00e9fono:&lt;/label&gt;\n        &lt;input type=\"tel\" id=\"telefono\" name=\"telefono\" /&gt;\n    &lt;/fieldset&gt;\n\n    &lt;input type=\"submit\" value=\"Registrar\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Descripci\u00f3n del Ejemplo:</p> <ul> <li><code>&lt;fieldset&gt;</code>: Agrupa campos relacionados del formulario.</li> <li><code>&lt;legend&gt;</code>: T\u00edtulo descriptivo del grupo de campos.</li> </ul>"},{"location":"ud2/#72-nuevos-tipos-de-input","title":"7.2. Nuevos Tipos de Input","text":"<p>HTML5 introduce varios nuevos tipos de campos de entrada que mejoran la experiencia del usuario y la validaci\u00f3n de datos.</p> <ul> <li><code>email</code>: Valida que el contenido sea una direcci\u00f3n de correo electr\u00f3nico.</li> <li><code>tel</code>: Para n\u00fameros de tel\u00e9fono.</li> <li><code>url</code>: Valida que el contenido sea una URL v\u00e1lida.</li> <li><code>number</code>: Para n\u00fameros con controles de incremento y decremento.</li> <li><code>date</code>, <code>time</code>, <code>datetime-local</code>: Para seleccionar fechas y horas.</li> <li><code>range</code>: Para seleccionar un rango de valores mediante un control deslizante.</li> </ul>"},{"location":"ud2/#73-atributos-nuevos-en-formularios","title":"7.3. Atributos Nuevos en Formularios","text":"<ul> <li><code>placeholder</code>: Texto de ayuda dentro del campo de entrada.</li> <li><code>required</code>: Campo obligatorio.</li> <li><code>pattern</code>: Expresi\u00f3n regular para validar el formato.</li> <li><code>autocomplete</code>: Habilita o deshabilita la autocompletaci\u00f3n.</li> </ul> <p>Ejemplo de Formulario Completo:</p> <pre><code>&lt;form action=\"/submit\" method=\"post\"&gt;\n    &lt;fieldset&gt;\n        &lt;legend&gt;Datos Personales&lt;/legend&gt;\n\n        &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" placeholder=\"Tu Nombre\" required /&gt;\n\n        &lt;label for=\"email\"&gt;Correo Electr\u00f3nico:&lt;/label&gt;\n        &lt;input type=\"email\" id=\"email\" name=\"email\" placeholder=\"tuemail@ejemplo.com\" required /&gt;\n\n        &lt;label for=\"edad\"&gt;Edad:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"edad\" name=\"edad\" min=\"1\" max=\"120\" /&gt;\n    &lt;/fieldset&gt;\n\n    &lt;fieldset&gt;\n        &lt;legend&gt;Preferencias&lt;/legend&gt;\n\n        &lt;label for=\"satisfaccion\"&gt;Nivel de Satisfacci\u00f3n:&lt;/label&gt;\n        &lt;input type=\"range\" id=\"satisfaccion\" name=\"satisfaccion\" min=\"0\" max=\"10\" /&gt;\n    &lt;/fieldset&gt;\n\n    &lt;input type=\"submit\" value=\"Enviar\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"ud2/#8-tablas-en-html5","title":"8. Tablas en HTML5","text":"<p>Las tablas se utilizan para representar datos tabulares. HTML5 introduce nuevas etiquetas sem\u00e1nticas para mejorar su estructura.</p>"},{"location":"ud2/#elementos-principales-de-una-tabla","title":"Elementos Principales de una Tabla:","text":"<ol> <li> <p><code>&lt;table&gt;</code></p> <ul> <li>Contenedor principal de la tabla.</li> </ul> </li> <li> <p><code>&lt;caption&gt;</code></p> <ul> <li>Proporciona un t\u00edtulo o descripci\u00f3n para la tabla.</li> </ul> </li> <li> <p><code>&lt;thead&gt;</code></p> <ul> <li>Agrupa el encabezado de la tabla.</li> </ul> </li> <li> <p><code>&lt;tbody&gt;</code></p> <ul> <li>Agrupa el cuerpo de la tabla.</li> </ul> </li> <li> <p><code>&lt;tfoot&gt;</code></p> <ul> <li>Agrupa el pie de la tabla.</li> </ul> </li> <li> <p><code>&lt;tr&gt;</code></p> <ul> <li>Define una fila en la tabla.</li> </ul> </li> <li> <p><code>&lt;th&gt;</code></p> <ul> <li>Define una celda de encabezado.</li> </ul> </li> <li> <p><code>&lt;td&gt;</code></p> <ul> <li>Define una celda de datos.</li> </ul> </li> </ol>"},{"location":"ud2/#ejemplo-de-tabla-completa","title":"Ejemplo de Tabla Completa:","text":"<pre><code>&lt;table&gt;\n    &lt;caption&gt;Estad\u00edsticas de Ventas 2024&lt;/caption&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Mes&lt;/th&gt;\n            &lt;th&gt;Ventas&lt;/th&gt;\n            &lt;th&gt;Objetivo&lt;/th&gt;\n            &lt;th&gt;Resultado&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Enero&lt;/td&gt;\n            &lt;td&gt;$10,000&lt;/td&gt;\n            &lt;td&gt;$8,000&lt;/td&gt;\n            &lt;td&gt;Superado&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Febrero&lt;/td&gt;\n            &lt;td&gt;$7,500&lt;/td&gt;\n            &lt;td&gt;$9,000&lt;/td&gt;\n            &lt;td&gt;No alcanzado&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;!-- M\u00e1s filas --&gt;\n    &lt;/tbody&gt;\n    &lt;tfoot&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Total&lt;/td&gt;\n            &lt;td&gt;$17,500&lt;/td&gt;\n            &lt;td&gt;$17,000&lt;/td&gt;\n            &lt;td&gt;Promedio&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"ud2/#estilos-css-para-tablas","title":"Estilos CSS para Tablas:","text":"<p>Para mejorar la apariencia de las tablas, puedes aplicar estilos CSS.</p> <pre><code>&lt;style&gt;\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    caption {\n        caption-side: top;\n        font-weight: bold;\n        margin-bottom: 10px;\n    }\n    th, td {\n        border: 1px solid #ddd;\n        padding: 8px;\n        text-align: center;\n    }\n    th {\n        background-color: #f2f2f2;\n    }\n    tr:nth-child(even) {\n        background-color: #f9f9f9;\n    }\n    tr:hover {\n        background-color: #eaeaea;\n    }\n&lt;/style&gt;\n</code></pre>"},{"location":"ud2/#9-etiquetas-modernas-en-html5","title":"9. Etiquetas Modernas en HTML5","text":"<p>HTML5 introduce etiquetas que mejoran la interactividad y la experiencia del usuario sin depender de scripts adicionales.</p>"},{"location":"ud2/#91-etiquetas-details-y-summary","title":"9.1. Etiquetas <code>&lt;details&gt;</code> y <code>&lt;summary&gt;</code>","text":"<p>Permiten crear secciones desplegables que mejoran la interactividad y la experiencia del usuario.</p> <p>Descripci\u00f3n de las Etiquetas:</p> <ul> <li><code>&lt;details&gt;</code>: Contenedor para contenido adicional que puede ser mostrado u ocultado.</li> <li><code>&lt;summary&gt;</code>: Proporciona un resumen o t\u00edtulo para el contenido dentro de <code>&lt;details&gt;</code>. Es visible siempre y al hacer clic despliega el contenido.</li> </ul> <p>Ejemplo de Uso:</p> <pre><code>&lt;details&gt;\n    &lt;summary&gt;M\u00e1s Informaci\u00f3n&lt;/summary&gt;\n    &lt;p&gt;Este es el contenido adicional que se muestra al expandir el detalle.&lt;/p&gt;\n&lt;/details&gt;\n</code></pre> <p>Descripci\u00f3n del Ejemplo:</p> <ul> <li>Al cargar la p\u00e1gina, solo se muestra \"M\u00e1s Informaci\u00f3n\".</li> <li>Al hacer clic, se despliega el p\u00e1rrafo con el contenido adicional.</li> </ul>"},{"location":"ud2/#92-etiqueta-progress","title":"9.2. Etiqueta <code>&lt;progress&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Representa el progreso de una tarea.</li> <li>Atributos:<ul> <li><code>value</code>: Valor actual del progreso.</li> <li><code>max</code>: Valor m\u00e1ximo del progreso.</li> </ul> </li> </ul> <p>Ejemplo:</p> <pre><code>&lt;label for=\"prog\"&gt;Carga:&lt;/label&gt;\n&lt;progress id=\"prog\" value=\"70\" max=\"100\"&gt;70%&lt;/progress&gt;\n</code></pre>"},{"location":"ud2/#93-etiqueta-meter","title":"9.3. Etiqueta <code>&lt;meter&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Representa una medida escalar dentro de un rango conocido.</li> <li>Atributos:<ul> <li><code>value</code>: Valor actual.</li> <li><code>min</code>, <code>max</code>: Rango de valores.</li> <li><code>low</code>, <code>high</code>, <code>optimum</code>: Valores para indicar rangos espec\u00edficos.</li> </ul> </li> </ul> <p>Ejemplo:</p> <pre><code>&lt;label for=\"cpu\"&gt;Uso de CPU:&lt;/label&gt;\n&lt;meter id=\"cpu\" value=\"0.6\" min=\"0\" max=\"1\"&gt;60%&lt;/meter&gt;\n</code></pre>"},{"location":"ud2/#94-etiqueta-mark","title":"9.4. Etiqueta <code>&lt;mark&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Resalta texto importante.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;p&gt;Este es un &lt;mark&gt;texto destacado&lt;/mark&gt; en el p\u00e1rrafo.&lt;/p&gt;\n</code></pre>"},{"location":"ud2/#95-etiqueta-time","title":"9.5. Etiqueta <code>&lt;time&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Representa una fecha u hora.</li> <li>Atributo <code>datetime</code>: Proporciona una representaci\u00f3n legible por m\u00e1quinas de la fecha/hora.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;time datetime=\"2024-10-10\"&gt;10 de Octubre de 2024&lt;/time&gt;\n</code></pre>"},{"location":"ud2/#96-etiqueta-template","title":"9.6. Etiqueta <code>&lt;template&gt;</code>","text":"<ul> <li>Descripci\u00f3n: Contiene contenido que no se muestra en la p\u00e1gina hasta que se lo active mediante JavaScript.</li> </ul> <p>Ejemplo:</p> <pre><code>&lt;template id=\"miPlantilla\"&gt;\n    &lt;div class=\"card\"&gt;\n        &lt;h3&gt;T\u00edtulo&lt;/h3&gt;\n        &lt;p&gt;Contenido de la tarjeta.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>"},{"location":"ud2/#10-buenas-practicas-de-html5","title":"10. Buenas Pr\u00e1cticas de HTML5","text":"<ol> <li>Sem\u00e1ntica: Utiliza etiquetas sem\u00e1nticas para mejorar la accesibilidad y el SEO.</li> <li>Accesibilidad: Emplea atributos como <code>aria-*</code> y etiquetas adecuadas para asegurar que tu contenido sea accesible para todos los usuarios.</li> <li>Validaci\u00f3n: Utiliza validadores de HTML para asegurarte de que tu c\u00f3digo cumple con los est\u00e1ndares.</li> <li>Optimizaci\u00f3n de Recursos: Minimiza el uso de recursos externos y optimiza im\u00e1genes y scripts para mejorar el rendimiento.</li> <li>Responsive Design: Aseg\u00farate de que tu sitio sea adaptable a diferentes tama\u00f1os de pantalla utilizando la etiqueta <code>&lt;meta viewport&gt;</code> y t\u00e9cnicas de dise\u00f1o responsivo.</li> <li>Evitar Uso Excesivo de Inline Styles: Prefiere el uso de hojas de estilo externas para mantener el c\u00f3digo limpio y facilitar el mantenimiento.</li> </ol>"},{"location":"ud2/#11-conclusion","title":"11. Conclusi\u00f3n","text":"<p>HTML5 ha transformado el desarrollo web al proporcionar una estructura m\u00e1s sem\u00e1ntica, herramientas multimedia integradas y mejoras en la interacci\u00f3n del usuario. Dominar las etiquetas, atributos y nuevas funcionalidades de HTML5 es esencial para crear aplicaciones web modernas, accesibles y eficientes.</p>"},{"location":"ud2/#puntos-clave-a-recordar","title":"Puntos Clave a Recordar:","text":"<ol> <li>Sem\u00e1ntica: Utiliza etiquetas sem\u00e1nticas para mejorar la accesibilidad y el SEO.</li> <li>Accesibilidad: Emplea atributos como <code>aria-*</code> y etiquetas adecuadas para asegurar que tu contenido sea accesible para todos los usuarios.</li> <li>Multimedia y Gr\u00e1ficos: Aprovecha las capacidades integradas para audio, video y gr\u00e1ficos sin depender de plugins externos.</li> <li>Formularios Avanzados: Implementa formularios con validaciones y tipos de entrada mejorados para una mejor experiencia del usuario.</li> <li>Interactividad: Utiliza etiquetas como <code>&lt;details&gt;</code> y <code>&lt;summary&gt;</code> para agregar interactividad sin necesidad de scripts adicionales.</li> </ol>"},{"location":"ud2/#12-recursos-adicionales","title":"12. Recursos Adicionales","text":"<ul> <li>Documentaci\u00f3n Oficial de HTML5 (MDN Web Docs)</li> <li>Gu\u00eda de Accesibilidad en HTML5</li> <li>Tutoriales de CSS para Estilizar HTML5</li> <li>Validador de HTML del W3C</li> <li>Introducci\u00f3n a las APIs de HTML5</li> <li>Documentaci\u00f3n oficial de HTML5 (MDN Web Docs)</li> <li>W3C HTML5 Specification</li> <li>HTML5 by Manz</li> </ul> <p>Ejemplos y ejercicios pr\u00e1cticos: Crear una p\u00e1gina HTML b\u00e1sica que incluya un formulario de contacto, un art\u00edculo con im\u00e1genes y videos, y una lista de tareas.</p>"},{"location":"ud2/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la Learn HTML by Building a Cat Photo App  de freeCodeCamp.</p>"},{"location":"ud3/","title":"UT3 Gu\u00eda completa de CSS3.","text":""},{"location":"ud3/#introduccion-a-css3","title":"Introducci\u00f3n a CSS3","text":"<p>CSS3 (Cascading Style Sheets Level 3) es la \u00faltima versi\u00f3n de CSS, utilizada para describir la presentaci\u00f3n de documentos HTML y XML. CSS3 introduce nuevas caracter\u00edsticas y mejoras que facilitan la creaci\u00f3n de dise\u00f1os web m\u00e1s atractivos y funcionales.</p>"},{"location":"ud3/#por-que-usar-css3","title":"\u00bfPor qu\u00e9 usar CSS3?","text":"<ul> <li>Modularidad: CSS3 se divide en m\u00f3dulos, lo que facilita su uso y comprensi\u00f3n.</li> <li>Nuevas propiedades: Permite efectos visuales avanzados como sombras, transiciones y animaciones.</li> <li>Responsive Design: Facilita la creaci\u00f3n de sitios web que se adaptan a diferentes tama\u00f1os de pantalla.</li> <li>Mejoras en el dise\u00f1o: Nuevas herramientas como Flexbox y Grid Layout para layouts m\u00e1s complejos y flexibles.</li> </ul>"},{"location":"ud3/#estructura-basica-de-css","title":"Estructura B\u00e1sica de CSS","text":"<p>Un archivo CSS est\u00e1 compuesto por reglas que definen c\u00f3mo se deben mostrar los elementos HTML.</p>"},{"location":"ud3/#sintaxis-basica","title":"Sintaxis B\u00e1sica","text":"<pre><code>selector {\n    propiedad: valor;\n}\n</code></pre>"},{"location":"ud3/#ejemplo","title":"Ejemplo","text":"<pre><code>body {\n    background-color: #f0f0f0;\n    font-family: Arial, sans-serif;\n}\n\nh1 {\n    color: #333333;\n    text-align: center;\n}\n</code></pre>"},{"location":"ud3/#selectores-css","title":"Selectores CSS","text":"<p>Los selectores son patrones utilizados para seleccionar los elementos HTML que deseas estilizar.</p>"},{"location":"ud3/#selectores-basicos","title":"Selectores B\u00e1sicos","text":"<ul> <li> <p>Selector de Tipo: Selecciona todos los elementos de un tipo espec\u00edfico.</p> <p><code>css p {     color: blue; }</code></p> </li> <li> <p>Selector Universal: Selecciona todos los elementos.</p> <p><code>css * {     margin: 0;     padding: 0; }</code></p> </li> </ul>"},{"location":"ud3/#selectores-de-clase-y-id","title":"Selectores de Clase y ID","text":"<ul> <li> <p>Clase: Selecciona elementos con una clase espec\u00edfica.</p> <p><code>css .mi-clase {     background-color: yellow; }</code></p> </li> <li> <p>ID: Selecciona un elemento con un ID espec\u00edfico (debe ser \u00fanico).</p> <p><code>css **#**mi-id {     border: 1px solid black; }</code></p> </li> </ul>"},{"location":"ud3/#selectores-de-atributo","title":"Selectores de Atributo","text":"<p>Seleccionan elementos basados en atributos o valores de atributos.</p> <pre><code>input[type=\"text\"] {\n    width: 200px;\n    padding: 5px;\n}\n</code></pre>"},{"location":"ud3/#selectores-de-pseudo-clases-y-pseudo-elementos","title":"Selectores de Pseudo-clases y Pseudo-elementos","text":"<ul> <li> <p>Pseudo-clases: Seleccionan elementos en un estado espec\u00edfico.</p> <p><code>css a:hover {     color: red; }</code></p> </li> <li> <p>Pseudo-elementos: Seleccionan una parte espec\u00edfica de un elemento.</p> <p><code>css p::first-line {     font-weight: bold; }</code></p> </li> </ul>"},{"location":"ud3/#modelo-de-caja-box-model","title":"Modelo de Caja (Box Model)","text":"<p>El Box Model de CSS describe c\u00f3mo se calculan las dimensiones y el espacio alrededor de los elementos.</p>"},{"location":"ud3/#componentes-del-box-model","title":"Componentes del Box Model","text":"<ol> <li>Contenido: \u00c1rea donde se muestra el contenido (texto, im\u00e1genes, etc.).</li> <li>Padding (Relleno): Espacio entre el contenido y el borde.</li> <li>Border (Borde): L\u00ednea que rodea el padding y el contenido.</li> <li>Margin (Margen): Espacio fuera del borde.</li> </ol>"},{"location":"ud3/#ejemplo_1","title":"Ejemplo","text":"<pre><code>div {\n    width: 300px;\n    padding: 20px;\n    border: 5px solid #333;\n    margin: 15px;\n}\n</code></pre>"},{"location":"ud3/#visualizacion","title":"Visualizaci\u00f3n","text":"<pre><code>+-----------------------------+\n|          Margin             |\n|  +-----------------------+  |\n|  |        Border         |  |\n|  |  +-----------------+  |  |\n|  |  |     Padding     |  |  |\n|  |  |  +-----------+  |  |  |\n|  |  |  |  Content  |  |  |  |\n|  |  |  +-----------+  |  |  |\n|  |  +-----------------+  |  |\n|  +-----------------------+  |\n+-----------------------------+\n</code></pre>"},{"location":"ud3/#propiedades-de-texto-y-fuente","title":"Propiedades de Texto y Fuente","text":"<p>CSS3 ofrece una amplia gama de propiedades para estilizar el texto.</p>"},{"location":"ud3/#tipografia","title":"Tipograf\u00eda","text":"<ul> <li> <p>font-family: Define la familia de fuentes.</p> <p><code>css body {     font-family: 'Helvetica Neue', sans-serif; }</code></p> </li> <li> <p>font-size: Tama\u00f1o de la fuente.</p> <p><code>css h1 {     font-size: 2em; }</code></p> </li> <li> <p>font-weight: Grosor de la fuente.</p> <p><code>css p {     font-weight: bold; }</code></p> </li> <li> <p>font-style: Estilo de la fuente (normal, italic, oblique).</p> <p><code>css em {     font-style: italic; }</code></p> </li> </ul>"},{"location":"ud3/#propiedades-de-texto","title":"Propiedades de Texto","text":"<ul> <li> <p>color: Color del texto.</p> <p><code>css span {     color: #ff5733; }</code></p> </li> <li> <p>text-align: Alineaci\u00f3n del texto.</p> <p><code>css .centrado {     text-align: center; }</code></p> </li> <li> <p>text-decoration: Decoraciones del texto (subrayado, tachado, etc.).</p> <p><code>css a {     text-decoration: none; } a:hover {     text-decoration: underline; }</code></p> </li> <li> <p>line-height: Altura de la l\u00ednea.</p> <p><code>css p {     line-height: 1.6; }</code></p> </li> </ul>"},{"location":"ud3/#colores-y-fondos","title":"Colores y Fondos","text":""},{"location":"ud3/#colores","title":"Colores","text":"<p>Puedes definir colores usando nombres, c\u00f3digos hexadecimales, RGB, RGBA, HSL y HSLA.</p> <pre><code>h2 {\n    color: #3498db; /* Hexadecimal */\n}\n\np {\n    color: rgb(52, 152, 219); /* RGB */\n}\n\ndiv {\n    background-color: rgba(52, 152, 219, 0.5); /* RGBA */\n}\n</code></pre>"},{"location":"ud3/#fondos","title":"Fondos","text":"<ul> <li>background-color: Color de fondo.</li> <li>background-image: Imagen de fondo.</li> <li>background-repeat: Repetici\u00f3n de la imagen.</li> <li>background-size: Tama\u00f1o de la imagen de fondo.</li> <li>background-position: Posici\u00f3n de la imagen de fondo.</li> </ul> <pre><code>body {\n    background-color: #ecf0f1;\n    background-image: url('fondo.jpg');\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n}\n</code></pre>"},{"location":"ud3/#diseno-de-layout","title":"Dise\u00f1o de Layout","text":""},{"location":"ud3/#flexbox","title":"Flexbox","text":"<p>Flexbox es un modelo de dise\u00f1o unidimensional que facilita la alineaci\u00f3n y distribuci\u00f3n de elementos dentro de un contenedor.</p>"},{"location":"ud3/#contenedor-flex","title":"Contenedor Flex","text":"<pre><code>.container {\n    display: flex;\n    flex-direction: row; /* column, row-reverse, column-reverse */\n    justify-content: space-between; /* flex-start, flex-end, center, space-around, space-evenly */\n    align-items: center; /* stretch, flex-start, flex-end, center, baseline */\n}\n</code></pre>"},{"location":"ud3/#elementos-flex","title":"Elementos Flex","text":"<pre><code>.item {\n    flex: 1; /* grow, shrink, basis */\n    margin: 10px;\n}\n</code></pre>"},{"location":"ud3/#ejemplo-completo","title":"Ejemplo Completo","text":"<pre><code>&lt;div class=\"container\"&gt;\n    &lt;div class=\"item\"&gt;Elemento 1&lt;/div&gt;\n    &lt;div class=\"item\"&gt;Elemento 2&lt;/div&gt;\n    &lt;div class=\"item\"&gt;Elemento 3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.container {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 200px;\n    background-color: #f8f9fa;\n}\n\n.item {\n    background-color: #007bff;\n    color: white;\n    padding: 20px;\n    border-radius: 5px;\n}\n</code></pre>"},{"location":"ud3/#grid-layout","title":"Grid Layout","text":"<p>Grid Layout es un sistema de dise\u00f1o bidimensional que permite crear estructuras complejas con filas y columnas.</p>"},{"location":"ud3/#contenedor-grid","title":"Contenedor Grid","text":"<pre><code>.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr); /* 3 columnas de igual tama\u00f1o */\n    grid-gap: 10px; /* Espacio entre filas y columnas */\n}\n</code></pre>"},{"location":"ud3/#elementos-grid","title":"Elementos Grid","text":"<pre><code>.grid-item {\n    background-color: #28a745;\n    color: white;\n    padding: 20px;\n    text-align: center;\n}\n</code></pre>"},{"location":"ud3/#ejemplo-completo_1","title":"Ejemplo Completo","text":"<pre><code>&lt;div class=\"grid-container\"&gt;\n    &lt;div class=\"grid-item\"&gt;1&lt;/div&gt;\n    &lt;div class=\"grid-item\"&gt;2&lt;/div&gt;\n    &lt;div class=\"grid-item\"&gt;3&lt;/div&gt;\n    &lt;div class=\"grid-item\"&gt;4&lt;/div&gt;\n    &lt;div class=\"grid-item\"&gt;5&lt;/div&gt;\n    &lt;div class=\"grid-item\"&gt;6&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 15px;\n    background-color: #f1f1f1;\n    padding: 10px;\n}\n\n.grid-item {\n    background-color: #28a745;\n    color: white;\n    padding: 30px 0;\n    font-size: 30px;\n    text-align: center;\n}\n</code></pre>"},{"location":"ud3/#transiciones-y-animaciones","title":"Transiciones y Animaciones","text":""},{"location":"ud3/#transiciones","title":"Transiciones","text":"<p>Las transiciones permiten cambiar las propiedades CSS de un elemento de manera suave durante un per\u00edodo de tiempo.</p>"},{"location":"ud3/#sintaxis","title":"Sintaxis","text":"<pre><code>.selector {\n    transition: propiedad duraci\u00f3n timing-funci\u00f3n retraso;\n}\n</code></pre>"},{"location":"ud3/#ejemplo_2","title":"Ejemplo","text":"<pre><code>button {\n    background-color: #3498db;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n    background-color: #2980b9;\n}\n</code></pre>"},{"location":"ud3/#animaciones","title":"Animaciones","text":"<p>Las animaciones permiten definir una serie de estilos que cambian a lo largo del tiempo.</p>"},{"location":"ud3/#sintaxis_1","title":"Sintaxis","text":"<pre><code>@keyframes nombre-animaci\u00f3n {\n    desde { /* estilos iniciales */ }\n    hasta { /* estilos finales */ }\n}\n\n.selector {\n    animation: nombre-animaci\u00f3n duraci\u00f3n timing-funci\u00f3n retraso iteraciones direcci\u00f3n relleno;\n}\n</code></pre>"},{"location":"ud3/#ejemplo_3","title":"Ejemplo","text":"<pre><code>@keyframes girar {\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n.icono {\n    display: inline-block;\n    animation: girar 2s linear infinite;\n}\n</code></pre> <pre><code>&lt;div class=\"icono\"&gt;\ud83d\udd04&lt;/div&gt;\n</code></pre>"},{"location":"ud3/#responsividad-y-media-queries","title":"Responsividad y Media Queries","text":"<p>Las Media Queries permiten aplicar estilos CSS espec\u00edficos seg\u00fan las caracter\u00edsticas del dispositivo, como el ancho de la pantalla.</p>"},{"location":"ud3/#ejemplo-basico","title":"Ejemplo B\u00e1sico","text":"<pre><code>/* Estilos por defecto */\nbody {\n    font-size: 16px;\n}\n\n/* Para pantallas con un ancho m\u00e1ximo de 768px */\n@media (max-width: 768px) {\n    body {\n        font-size: 14px;\n    }\n}\n\n/* Para pantallas con un ancho m\u00e1ximo de 480px */\n@media (max-width: 480px) {\n    body {\n        font-size: 12px;\n    }\n}\n</code></pre>"},{"location":"ud3/#diseno-responsive-con-flexbox","title":"Dise\u00f1o Responsive con Flexbox","text":"<pre><code>.container {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.item {\n    flex: 1 1 300px; /* grow, shrink, basis */\n    margin: 10px;\n}\n\n/* Ajuste para pantallas peque\u00f1as */\n@media (max-width: 600px) {\n    .container {\n        flex-direction: column;\n    }\n}\n</code></pre>"},{"location":"ud3/#definicion-de-variables-css-y-dark-mode","title":"Definici\u00f3n de Variables CSS y Dark Mode","text":"<p>Para implementar un modo oscuro (dark mode) utilizando variables en CSS, puedes seguir estos pasos:</p> <ol> <li>Define las variables para el tema claro y oscuro: Utiliza el selector <code>:root</code> para establecer las variables CSS globales que definir\u00e1n los colores para ambos temas.</li> </ol> <pre><code>   :root {\n     /* Tema claro */\n     --background-color: #ffffff;\n     --text-color: #000000;\n     --accent-color: #007BFF;\n   }\n\n   [data-theme=\"dark\"] {\n     /* Tema oscuro */\n     --background-color: #121212;\n     --text-color: #E0E0E0;\n     --accent-color: #BB86FC;\n   }\n</code></pre>"},{"location":"ud3/#aplicacion-de-variables-en-el-css","title":"Aplicaci\u00f3n de Variables en el CSS","text":"<ol> <li>Utiliza las variables en tus estilos CSS: Aplica las variables en los elementos de tu p\u00e1gina para que los estilos cambien din\u00e1micamente seg\u00fan el tema seleccionado.</li> </ol> <pre><code>   body {\n     background-color: var(--background-color);\n     color: var(--text-color);\n   }\n\n   a, button {\n     color: var(--accent-color);\n   }\n</code></pre>"},{"location":"ud3/#cambio-de-tema-con-javascript","title":"Cambio de Tema con JavaScript","text":"<ol> <li>Implementa el cambio de tema con JavaScript: Puedes alternar entre temas a\u00f1adiendo o removiendo un atributo <code>data-theme</code> al elemento <code>body</code>.</li> </ol> <pre><code>   const toggleButton = document.getElementById(\"toggle-button\");\n\n   toggleButton.addEventListener(\"click\", function() {\n     const body = document.body;\n     const currentTheme = body.getAttribute(\"data-theme\");\n     const newTheme = currentTheme === \"dark\" ? \"light\" : \"dark\";\n     body.setAttribute(\"data-theme\", newTheme);\n   });\n</code></pre> <ol> <li>HTML para el bot\u00f3n de cambio de tema:</li> </ol> <pre><code>   &lt;button id=\"toggle-button\"&gt;Cambiar Tema&lt;/button&gt;\n</code></pre>"},{"location":"ud3/#uso-de-media-queries-para-preferencias-del-usuario","title":"Uso de Media Queries para Preferencias del Usuario","text":"<ol> <li>Detecta la preferencia del sistema operativo: Utiliza la media query <code>prefers-color-scheme</code> para aplicar autom\u00e1ticamente el tema seg\u00fan la preferencia del usuario.</li> </ol> <pre><code>   const prefersDarkScheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n   if (prefersDarkScheme.matches) {\n     document.body.setAttribute(\"data-theme\", \"dark\");\n   } else {\n     document.body.setAttribute(\"data-theme\", \"light\");\n   }\n</code></pre>"},{"location":"ud3/#nuevas-caracteristicas-de-css3","title":"Nuevas Caracter\u00edsticas de CSS3","text":""},{"location":"ud3/#la-regla-scope","title":"La Regla <code>@scope</code>","text":"<p>La regla <code>@scope</code> es una propuesta avanzada en CSS que permite definir un \u00e1mbito espec\u00edfico dentro del cual se aplican ciertas reglas de estilo. Esto facilita el encapsulamiento de estilos, evitando conflictos globales y mejorando la mantenibilidad del c\u00f3digo CSS.</p>"},{"location":"ud3/#sintaxis-basica_1","title":"Sintaxis B\u00e1sica","text":"<pre><code>@scope .mi-contenedor {\n    /* Reglas CSS aqu\u00ed solo aplicar\u00e1n dentro de .mi-contenedor */\n    h1 {\n        color: blue;\n    }\n\n    .boton {\n        background-color: green;\n    }\n}\n</code></pre>"},{"location":"ud3/#estado-actual-de-la-regla-scope","title":"Estado Actual de la Regla <code>@scope</code>","text":"<p>Hasta la fecha de mi conocimiento (octubre de 2023), la regla <code>@scope</code> a\u00fan est\u00e1 en etapa de propuesta y no es soportada de manera nativa por la mayor\u00eda de los navegadores. Por lo tanto, su uso directo en proyectos web est\u00e1ndar no es factible. Sin embargo, entender su funcionamiento es beneficioso para futuros desarrollos y para aprovechar otras t\u00e9cnicas de encapsulamiento de estilos disponibles en frameworks modernos como React y Vue.</p>"},{"location":"ud3/#ejemplo-propuesta","title":"Ejemplo (Propuesta)","text":"<pre><code>@scope .mi-contenedor {\n    h1 {\n        color: blue;\n    }\n\n    .boton {\n        background-color: green;\n    }\n}\n</code></pre> <p>En este ejemplo, las reglas dentro de <code>@scope .mi-contenedor</code> solo se aplicar\u00e1n a los elementos que est\u00e9n dentro del contenedor con la clase <code>mi-contenedor</code>.</p>"},{"location":"ud3/#otras-nuevas-caracteristicas","title":"Otras Nuevas Caracter\u00edsticas","text":"<p>Adem\u00e1s de la regla <code>@scope</code>, CSS3 ha introducido m\u00faltiples nuevas caracter\u00edsticas que mejoran la capacidad de dise\u00f1o y estilizaci\u00f3n de las p\u00e1ginas web:</p> <ul> <li>Variables CSS (<code>--variable</code>): Permiten definir variables reutilizables para colores, tama\u00f1os, etc.</li> </ul> <pre><code>    :root {\n        --color-primario: #3498db;\n        --padding-base: 10px;\n    }\n\n    .boton {\n        background-color: var(--color-primario);\n        padding: var(--padding-base);\n    }\n</code></pre> <ul> <li>Propiedades de Sombra (<code>box-shadow</code>, <code>text-shadow</code>): Para agregar sombras a elementos y textos.</li> </ul> <pre><code>    .caja {\n        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    h1 {\n        text-shadow: 2px 2px #ff0000;\n    }\n</code></pre> <ul> <li>Transformaciones 2D y 3D (<code>transform</code>): Para rotaciones, escalados, traslaciones y m\u00e1s.</li> </ul> <pre><code>    .elemento {\n        transform: rotate(45deg) scale(1.2);\n    }\n</code></pre> <ul> <li>Filtros CSS (<code>filter</code>): Para aplicar efectos visuales como desenfoques y cambios de color.</li> </ul> <pre><code>    img {\n        filter: grayscale(50%);\n    }\n</code></pre> <ul> <li>Clipping y Masking (<code>clip-path</code>, <code>mask</code>): Para crear formas complejas y m\u00e1scaras en elementos.</li> </ul> <pre><code>    .caja {\n        clip-path: circle(50%);\n    }\n</code></pre>"},{"location":"ud3/#buenas-practicas-en-css","title":"Buenas Pr\u00e1cticas en CSS","text":"<ol> <li> <p>Organizaci\u00f3n del C\u00f3digo:</p> <ul> <li>Utiliza comentarios para separar secciones.</li> <li>Agrupa selectores relacionados.</li> <li>Sigue una estructura l\u00f3gica (por ejemplo, de lo general a lo espec\u00edfico).</li> </ul> </li> <li> <p>Nomenclatura Consistente:</p> <ul> <li>Sigue convenciones como BEM (Block Element Modifier) para nombrar clases.</li> </ul> </li> </ol> <pre><code>    /* BEM Example */\n    .tarjeta {\n        /* Block */\n    }\n\n    .tarjeta__titulo {\n        /* Element */\n    }\n\n    .tarjeta__titulo--destacado {\n        /* Modifier */\n    }\n</code></pre> <ol> <li> <p>Evita el Uso Excesivo de <code>!important</code>:</p> <ul> <li>Solo \u00fasalo cuando sea absolutamente necesario para sobreescribir estilos espec\u00edficos.</li> </ul> </li> <li> <p>Optimizaci\u00f3n de Selectores:</p> <ul> <li>Utiliza selectores espec\u00edficos para mejorar el rendimiento.</li> <li>Evita selectores demasiado generales que puedan afectar a muchos elementos innecesariamente.</li> </ul> </li> <li> <p>Uso de Variables CSS:</p> <ul> <li>Define variables para colores, tama\u00f1os y otros valores repetitivos.</li> </ul> </li> </ol> <pre><code>    :root {\n        --color-primario: #3498db;\n        --padding-base: 10px;\n    }\n\n    .boton {\n        background-color: var(--color-primario);\n        padding: var(--padding-base);\n    }\n</code></pre> <ol> <li>Compatibilidad entre Navegadores:<ul> <li>Utiliza prefijos de proveedores cuando sea necesario para asegurar la compatibilidad.</li> </ul> </li> </ol> <pre><code>    .caja {\n        -webkit-border-radius: 10px;\n        -moz-border-radius: 10px;\n        border-radius: 10px;\n    }\n</code></pre> <ol> <li> <p>Minimizaci\u00f3n y Compresi\u00f3n:</p> <ul> <li>Minimiza los archivos CSS para reducir el tama\u00f1o y mejorar la carga.</li> <li>Utiliza herramientas de compresi\u00f3n como CSSNano o UglifyCSS.</li> </ul> </li> <li> <p>Evita el CSS Innecesario:</p> <ul> <li>Borra los estilos no utilizados para mantener el c\u00f3digo limpio y eficiente.</li> </ul> </li> </ol>"},{"location":"ud4-1/","title":"UT4.1 - DOM manipulation and events","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>Document</p> <ul> <li>Browser environment, specs</li> <li>DOM tree</li> <li>Walking the DOM</li> <li>Searching: getElement, querySelector</li> <li>Node properties: type, tag and contents</li> <li>Attributes and properties</li> <li>Modifying the document</li> <li>Styles and classes</li> <li>Element size and scrolling</li> <li>Window sizes and scrolling</li> <li>Coordinates</li> </ul> <p>Introduction to Events</p> <ul> <li>Introduction to browser events</li> <li>Bubbling and capturing</li> <li>Event delegation</li> <li>Browser default actions</li> <li>Dispatching custom events</li> </ul> <p>UI Events</p> <ul> <li>Mouse events</li> <li>Moving the mouse: mouseover/out, mouseenter/leave</li> <li>Drag'n'Drop with mouse events</li> <li>Pointer events</li> <li>Keyboard: keydown and keyup</li> <li>Scrolling</li> </ul> <p>Forms, controls</p> <ul> <li>Form properties and methods</li> <li>Focusing: focus/blur</li> <li>Events: change, input, cut, copy, paste</li> <li>Forms: event and method submit</li> </ul> <p>Regular expressions</p> <p>Document and resource loading</p> <ul> <li>Page: DOMContentLoaded, load, beforeunload, unload, beforeunload, unload</li> <li>Scripts: async, defer</li> <li>Resource loading: onload and onerror</li> </ul> <p>Storing data in the browser</p> <ul> <li>Cookies, document.cookie</li> <li>LocalStorage, sessionStorage</li> </ul>"},{"location":"ud4-1/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Form Validation by Building a Calorie Counter</li> <li>Learn Regular Expressions by Building a Spam Filter</li> <li>Review DOM Manipulation by Building a Rock, Paper, Scissors Game</li> <li>Learn localStorage by Building a Todo App</li> <li>Learn Fetch and Promises by Building an fCC Authors Page,</li> <li>Learn Asynchronous Programming by Building an fCC Forum Leaderboard</li> </ul>"},{"location":"ud4/","title":"UT4 Introducci\u00f3n a JavaScript Moderno","text":""},{"location":"ud4/#introduccion","title":"Introducci\u00f3n","text":"<p>JavaScript es un lenguaje de programaci\u00f3n dise\u00f1ado para a\u00f1adir interactividad y dinamismo a las p\u00e1ginas web. Se utiliza tanto en el lado del cliente (navegador) como en el lado del servidor (con tecnolog\u00edas como Node.js). Con el tiempo, JavaScript ha evolucionado significativamente, convirti\u00e9ndose en un lenguaje potente y vers\u00e1til.</p>"},{"location":"ud4/#historia-y-evolucion","title":"Historia y evoluci\u00f3n","text":"<ul> <li>1995: Creaci\u00f3n de JavaScript por Brendan Eich en Netscape.</li> <li>ECMAScript 2015 (ES6): Introducci\u00f3n de caracter\u00edsticas modernas como <code>let</code>, <code>const</code>, clases y funciones flecha.</li> </ul>"},{"location":"ud4/#caracteristicas-de-los-lenguajes-de-script-de-cliente","title":"Caracter\u00edsticas de los lenguajes de script de cliente","text":"<ul> <li>Ejecuci\u00f3n en el cliente: El c\u00f3digo se ejecuta en el navegador del usuario, reduciendo la carga en el servidor.</li> <li>Interactividad: Permite respuestas din\u00e1micas a las acciones del usuario.</li> <li>Integraci\u00f3n con HTML y CSS: JavaScript trabaja junto con estos lenguajes para crear experiencias web ricas.</li> <li>Sintaxis flexible: Soporta m\u00faltiples paradigmas como programaci\u00f3n orientada a objetos y funcional.</li> <li>Est\u00e1ndares: ECMAScript (ES) establece las reglas y funcionalidades que definen el lenguaje JavaScript.</li> </ul>"},{"location":"ud4/#integracion-en-una-pagina-web","title":"Integraci\u00f3n en una p\u00e1gina web","text":"<p>Podemos incluir JavaScript en nuestras p\u00e1ginas HTML de varias maneras:</p> <pre><code>&lt;script&gt;\n  console.log('Hola desde JavaScript');\n&lt;/script&gt;\n</code></pre> <p>O vinculando un archivo externo:</p> <pre><code>&lt;script src=\"app.js\" defer&gt;&lt;/script&gt;\n</code></pre> <p>Recomendaci\u00f3n: Utiliza siempre <code>defer</code> o <code>async</code> para optimizar la carga del script.</p>"},{"location":"ud4/#variables","title":"Variables","text":"<p>Las variables son contenedores para almacenar datos. JavaScript moderno ofrece tres formas principales de declararlas:</p> <ul> <li><code>let</code>: Para valores que pueden cambiar.</li> <li><code>const</code>: Para valores constantes (que no cambian).</li> <li><code>var</code>: Obsoleto; se recomienda evitarlo debido a problemas con el alcance.</li> </ul>"},{"location":"ud4/#ejemplo","title":"Ejemplo:","text":"<pre><code>let nombre = \"Juan\";\nconst edad = 30;\n// edad = 31; // Esto causar\u00e1 un error.\n</code></pre>"},{"location":"ud4/#scope-y-hoisting","title":"Scope y Hoisting","text":"<p><code>let</code> y <code>const</code> tienen un alcance de bloque, mientras que <code>var</code> ignora los bloques. Esto puede causar errores inesperados si no se usa con cuidado.</p> <pre><code>if (true) {\n  let mensaje = \"Hola\";\n  console.log(mensaje); // Hola\n}\n// console.log(mensaje); // Error: no est\u00e1 definido\n</code></pre> <p>Mejor pr\u00e1ctica: Usa siempre <code>const</code> si el valor no cambia y <code>let</code> para valores variables.</p>"},{"location":"ud4/#strings","title":"Strings","text":"<p>Los strings representan texto. Se pueden definir usando comillas simples (<code>'</code>), dobles (<code>\"</code>), o plantillas literales (<code>`</code>).</p>"},{"location":"ud4/#caracteristicas-importantes","title":"Caracter\u00edsticas importantes:","text":"<ol> <li> <p>Interpolaci\u00f3n: <code>javascript    const nombre = \"Ana\";    console.log(`Hola, ${nombre}!`); // Hola, Ana!</code></p> </li> <li> <p>M\u00e9todos \u00fatiles: <code>javascript    let texto = \" JavaScript moderno \";    console.log(texto.trim().toUpperCase()); // \"JAVASCRIPT MODERNO\"</code></p> </li> </ol> <p>Mejor pr\u00e1ctica: Usa plantillas literales para concatenar strings y mejorar la legibilidad del c\u00f3digo.</p>"},{"location":"ud4/#numeros","title":"N\u00fameros","text":"<p>JavaScript maneja n\u00fameros de punto flotante por defecto. Puedes realizar operaciones matem\u00e1ticas b\u00e1sicas y avanzadas usando el objeto <code>Math</code>.</p>"},{"location":"ud4/#ejemplo_1","title":"Ejemplo:","text":"<pre><code>console.log(10 + 5); // 15\nconsole.log(Math.pow(2, 3)); // 8\nconsole.log(Math.random()); // N\u00famero aleatorio entre 0 y 1\n</code></pre> <p>Mejor pr\u00e1ctica: Usa bibliotecas como <code>BigInt</code> o <code>Decimal.js</code> para c\u00e1lculos de alta precisi\u00f3n.</p>"},{"location":"ud4/#operadores","title":"Operadores","text":"<p>Los operadores permiten realizar c\u00e1lculos y evaluaciones l\u00f3gicas.</p>"},{"location":"ud4/#ejemplo_2","title":"Ejemplo:","text":"<ol> <li>Aritm\u00e9ticos: <code>javascript    console.log(10 % 3); // 1 (m\u00f3dulo)</code></li> <li>L\u00f3gicos: <code>javascript    console.log(10 &gt; 5 &amp;&amp; 5 &lt; 8); // true</code></li> </ol>"},{"location":"ud4/#booleans","title":"Booleans","text":"<p>Los valores booleanos pueden ser <code>true</code> o <code>false</code>. Tambi\u00e9n existen valores \"truthy\" (considerados verdaderos) y \"falsy\" (considerados falsos).</p>"},{"location":"ud4/#ejemplo_3","title":"Ejemplo:","text":"<pre><code>console.log(Boolean(\"\")); // false\nconsole.log(Boolean(42)); // true\n</code></pre> <p>Mejor pr\u00e1ctica: Siempre verifica expl\u00edcitamente las condiciones para evitar errores con valores \"truthy\" y \"falsy\".</p>"},{"location":"ud4/#valores-truthy-y-falsy","title":"Valores Truthy y Falsy","text":"<p>En JavaScript, cada valor tiene una propiedad booleana inherente, que se considera truthy (verdadera) o falsy (falsa) cuando se eval\u00faa en un contexto booleano.</p>"},{"location":"ud4/#valores-falsy","title":"Valores Falsy","text":"<p>Los siguientes valores son siempre considerados falsy en JavaScript:</p> <ul> <li><code>false</code></li> <li><code>0</code> (cero)</li> <li><code>-0</code> (cero negativo)</li> <li><code>0n</code> (BigInt cero)</li> <li><code>''</code>, <code>\"\"</code>, ``` (cadenas vac\u00edas)</li> <li><code>null</code></li> <li><code>undefined</code></li> <li><code>NaN</code></li> <li><code>document.all</code>[3]</li> </ul>"},{"location":"ud4/#valores-truthy","title":"Valores Truthy","text":"<p>Todos los dem\u00e1s valores son considerados truthy. Algunos ejemplos incluyen:</p> <ul> <li>N\u00fameros distintos de cero (positivos y negativos)</li> <li>Cadenas no vac\u00edas</li> <li>Objetos y arrays (incluso si est\u00e1n vac\u00edos)</li> <li>Funciones</li> <li><code>true</code></li> <li>Fechas</li> </ul>"},{"location":"ud4/#evaluacion-en-contextos-booleanos","title":"Evaluaci\u00f3n en Contextos Booleanos","text":"<p>JavaScript utiliza la coerci\u00f3n de tipos en contextos booleanos[5]. Esto significa que los valores se convierten autom\u00e1ticamente a <code>true</code> o <code>false</code> cuando se utilizan en operaciones que requieren un booleano, como en las declaraciones <code>if</code> o en operadores l\u00f3gicos.</p> <p>Por ejemplo:</p> <pre><code>if (42) {\n    console.log(\"Este c\u00f3digo se ejecutar\u00e1 porque 42 es truthy\");\n}\n\nif (\"\") {\n    console.log(\"Este c\u00f3digo no se ejecutar\u00e1 porque una cadena vac\u00eda es falsy\");\n}\n</code></pre>"},{"location":"ud4/#aplicaciones-practicas","title":"Aplicaciones Pr\u00e1cticas","text":"<p>Entender los conceptos de truthy y falsy es crucial para escribir c\u00f3digo JavaScript eficiente y evitar errores sutiles. Por ejemplo, se pueden utilizar para asignar valores predeterminados o para realizar comprobaciones condicionales de manera concisa[1].</p> <pre><code>let username = \"\";\nlet displayName = username || \"Invitado\";\nconsole.log(displayName); // Imprimir\u00e1 \"Invitado\"\n</code></pre> <p>En este caso, si <code>username</code> es falsy (una cadena vac\u00eda), se asignar\u00e1 \"Invitado\" a <code>displayName</code>.</p>"},{"location":"ud4/#objetos","title":"Objetos","text":"<p>Un objeto es una colecci\u00f3n de propiedades clave-valor.</p>"},{"location":"ud4/#creacion-y-manipulacion","title":"Creaci\u00f3n y manipulaci\u00f3n:","text":"<pre><code>const persona = { nombre: \"Luis\", edad: 25 };\nconsole.log(persona.nombre); // Luis\npersona.edad = 26; // Modificaci\u00f3n\n</code></pre> <p>Mejor pr\u00e1ctica: Usa la desestructuraci\u00f3n para trabajar con objetos:</p> <pre><code>const { nombre, edad } = persona;\nconsole.log(nombre); // Luis\n</code></pre>"},{"location":"ud4/#arrays","title":"Arrays","text":"<p>Los arrays son listas ordenadas de elementos.</p>"},{"location":"ud4/#ejemplo_4","title":"Ejemplo:","text":"<pre><code>let numeros = [1, 2, 3];\nnumeros.push(4);\nconsole.log(numeros); // [1, 2, 3, 4]\n</code></pre> <p>M\u00e9todos \u00fatiles: - <code>map</code>: Para transformar elementos. - <code>filter</code>: Para filtrar elementos. - <code>reduce</code>: Para calcular un resultado acumulado.</p>"},{"location":"ud4/#fechas","title":"Fechas","text":"<p>El objeto <code>Date</code> maneja fechas y horas.</p>"},{"location":"ud4/#ejemplo_5","title":"Ejemplo:","text":"<pre><code>const ahora = new Date();\nconsole.log(ahora.getFullYear()); // 2024\n</code></pre> <p>Mejor pr\u00e1ctica: Usa bibliotecas como <code>date-fns</code> o <code>moment</code> para trabajar con fechas m\u00e1s complejas.</p>"},{"location":"ud4/#estructuras-de-control","title":"Estructuras de control","text":"<p>Permiten tomar decisiones o repetir acciones.</p>"},{"location":"ud4/#ejemplo_6","title":"Ejemplo:","text":"<pre><code>if (edad &gt;= 18) {\n  console.log(\"Mayor de edad\");\n} else {\n  console.log(\"Menor de edad\");\n}\n</code></pre> <p>Mejor pr\u00e1ctica: Usa <code>switch</code> o un objeto de configuraci\u00f3n para manejar m\u00faltiples condiciones.</p>"},{"location":"ud4/#iteradores","title":"Iteradores","text":"<p>Permiten recorrer arrays u objetos iterables.</p>"},{"location":"ud4/#ejemplo_7","title":"Ejemplo:","text":"<pre><code>let frutas = [\"manzana\", \"pera\", \"uva\"];\nfrutas.forEach(fruta =&gt; console.log(fruta));\n</code></pre>"},{"location":"ud4/#funciones","title":"Funciones","text":"<p>Las funciones encapsulan l\u00f3gica reutilizable.</p>"},{"location":"ud4/#ejemplo_8","title":"Ejemplo:","text":"<pre><code>const saludar = (nombre) =&gt; `Hola, ${nombre}!`;\nconsole.log(saludar(\"Marta\"));\n</code></pre> <p>Mejor pr\u00e1ctica: Usa funciones puras que no dependan del estado externo.</p>"},{"location":"ud4/#metodos-de-arrays","title":"M\u00e9todos de Arrays","text":"<p>M\u00e9todos clave para trabajar con arrays:</p>"},{"location":"ud4/#ejemplo_9","title":"Ejemplo:","text":"<pre><code>const numeros = [1, 2, 3, 4];\nconst dobles = numeros.map(num =&gt; num * 2);\nconsole.log(dobles); // [2, 4, 6, 8]\n</code></pre>"},{"location":"ud4/#programacion-orientada-a-objetos-poo","title":"Programaci\u00f3n Orientada a Objetos (POO)","text":"<p>La POO en JavaScript se basa en clases y objetos.</p>"},{"location":"ud4/#ejemplo_10","title":"Ejemplo:","text":"<pre><code>class Animal {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n  saludar() {\n    return `Hola, soy ${this.nombre}`;\n  }\n}\n\nclass Perro extends Animal {\n  ladrar() {\n    return \"Guau!\";\n  }\n}\n\nconst miPerro = new Perro(\"Max\");\nconsole.log(miPerro.saludar()); // Hola, soy Max\n</code></pre>"},{"location":"ud4/#dom-document-object-model","title":"DOM (Document Object Model)","text":"<p>El DOM es una representaci\u00f3n estructurada del documento HTML o XML cargado en el navegador. Permite interactuar y manipular elementos, estilos y contenido de la p\u00e1gina web.</p>"},{"location":"ud4/#seleccion-y-acceso-a-elementos","title":"Selecci\u00f3n y acceso a elementos","text":"<p>Podemos seleccionar elementos en el DOM utilizando m\u00e9todos como: - <code>getElementById</code>: Selecciona un elemento por su ID. - <code>querySelector</code>: Selecciona el primer elemento que coincide con un selector CSS. - <code>querySelectorAll</code>: Selecciona todos los elementos que coinciden con un selector CSS.</p> <p>Ejemplo:</p> <pre><code>const titulo = document.getElementById(\"titulo\");\nconst botones = document.querySelectorAll(\"button\");\nconsole.log(titulo.textContent); // Muestra el texto del elemento con ID \"titulo\"\n</code></pre>"},{"location":"ud4/#creacion-y-modificacion-de-elementos","title":"Creaci\u00f3n y modificaci\u00f3n de elementos","text":"<p>Podemos crear nuevos elementos y a\u00f1adirlos al DOM, o modificar los existentes.</p> <p>Ejemplo:</p> <pre><code>// Crear un nuevo p\u00e1rrafo\\const nuevoParrafo = document.createElement(\"p\");\nnuevoParrafo.textContent = \"Este es un p\u00e1rrafo din\u00e1mico.\";\n\n// A\u00f1adirlo al cuerpo del documento\ndocument.body.appendChild(nuevoParrafo);\n\n// Modificar un elemento existente\nconst titulo = document.querySelector(\"h1\");\ntitulo.textContent = \"T\u00edtulo actualizado\";\n</code></pre> <p>Mejor pr\u00e1ctica: Utiliza fragmentos de documento (<code>DocumentFragment</code>) para insertar m\u00faltiples elementos de manera eficiente.</p>"},{"location":"ud4/#eliminacion-de-elementos","title":"Eliminaci\u00f3n de elementos","text":"<p>Podemos eliminar elementos del DOM utilizando m\u00e9todos como: - <code>removeChild</code>: Elimina un elemento hijo de su nodo padre. - <code>remove</code>: Elimina un elemento directamente.</p> <p>Ejemplo:</p> <pre><code>const elemento = document.querySelector(\"#elemento-a-eliminar\");\nelemento.remove();\n</code></pre>"},{"location":"ud4/#manipulacion-de-estilos","title":"Manipulaci\u00f3n de estilos","text":"<p>El DOM permite modificar los estilos CSS de los elementos din\u00e1micamente.</p> <p>Ejemplo:</p> <pre><code>const caja = document.querySelector(\".caja\");\ncaja.style.backgroundColor = \"blue\";\ncaja.style.color = \"white\";\n</code></pre> <p>Mejor pr\u00e1ctica: Para m\u00faltiples cambios de estilo, utiliza clases CSS:</p> <pre><code>caja.classList.add(\"nueva-clase\");\ncaja.classList.remove(\"otra-clase\");\n</code></pre>"},{"location":"ud4/#eventos","title":"Eventos","text":"<p>Los eventos en JavaScript permiten ejecutar c\u00f3digo en respuesta a acciones del usuario, como hacer clic en un bot\u00f3n, mover el rat\u00f3n o cargar la p\u00e1gina.</p>"},{"location":"ud4/#tipos-de-eventos-comunes","title":"Tipos de eventos comunes","text":"<ul> <li><code>click</code>: Se activa cuando un usuario hace clic en un elemento.</li> <li><code>mouseover</code>: Se activa cuando el puntero del rat\u00f3n pasa sobre un elemento.</li> <li><code>keyup</code>: Se activa cuando el usuario suelta una tecla.</li> <li><code>submit</code>: Se activa al enviar un formulario.</li> </ul>"},{"location":"ud4/#manejo-de-eventos","title":"Manejo de eventos","text":"<p>Podemos asignar eventos a elementos utilizando: - <code>addEventListener</code>: M\u00e9todo recomendado, permite agregar m\u00faltiples manejadores a un mismo evento.</p> <p>Ejemplo:</p> <pre><code>const boton = document.querySelector(\"#mi-boton\");\n\nboton.addEventListener(\"click\", () =&gt; {\n  alert(\"\u00a1Bot\u00f3n pulsado!\");\n});\n</code></pre>"},{"location":"ud4/#delegacion-de-eventos","title":"Delegaci\u00f3n de eventos","text":"<p>Es una t\u00e9cnica que asigna el evento a un contenedor com\u00fan en lugar de a cada elemento individual. Es \u00fatil cuando los elementos se crean din\u00e1micamente.</p> <p>Ejemplo:</p> <pre><code>const lista = document.querySelector(\"ul\");\n\nlista.addEventListener(\"click\", (evento) =&gt; {\n  if (evento.target.tagName === \"LI\") {\n    console.log(`Elemento clicado: ${evento.target.textContent}`);\n  }\n});\n</code></pre> <p>Mejor pr\u00e1ctica: Usa delegaci\u00f3n de eventos para mejorar el rendimiento y reducir el n\u00famero de manejadores de eventos en el DOM.</p>"},{"location":"ud4/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Basic String and Array Methods by Building a Music Player</li> <li>Learn the Date Object by Building a Date Formatter</li> <li>Learn Advanced Array Methods by Building a Statistics Calculator</li> <li>Learn Basic OOP by Building a Shopping Cart</li> </ul>"},{"location":"ud5-1/","title":"5.1 JSON Schema y Herramientas de Validaci\u00f3n","text":""},{"location":"ud5-1/#objetivos","title":"Objetivos","text":"<ul> <li>Comprender la necesidad de validar documentos JSON.</li> <li>Aprender a dise\u00f1ar y aplicar JSON Schema correctamente.</li> </ul>"},{"location":"ud5-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Cuando trabajamos con JSON en aplicaciones reales (APIs, bases de datos, configuraciones), necesitamos asegurarnos de que los datos cumplen una estructura y tipos espec\u00edficos. Para eso existe JSON Schema, un est\u00e1ndar abierto que define reglas para validar documentos JSON.</p>"},{"location":"ud5-1/#511-diseno-y-uso-de-json-schema","title":"5.1.1 Dise\u00f1o y Uso de JSON Schema","text":""},{"location":"ud5-1/#que-es-json-schema","title":"\u00bfQu\u00e9 es JSON Schema?","text":"<p>JSON Schema es una especificaci\u00f3n que nos permite describir y validar documentos JSON. Nos ayuda a definir:</p> <ul> <li>Tipos de datos correctos.</li> <li>Estructuras anidadas (objetos, arrays).</li> <li>Reglas de validaci\u00f3n como valores m\u00ednimos, patrones de texto, etc.</li> <li>Formatos especiales como emails o fechas.</li> </ul>"},{"location":"ud5-1/#estandares","title":"Est\u00e1ndares","text":"<p>Actualmente, los m\u00e1s utilizados son:</p> <ul> <li>Draft 7: muy extendido y compatible con la mayor parte de herramientas.</li> <li>Draft 2019-09: versi\u00f3n moderna con nuevas mejoras, como vocabularios personalizados.</li> </ul>"},{"location":"ud5-1/#estructura-de-un-json-schema","title":"Estructura de un JSON Schema","text":"<p>Un JSON Schema est\u00e1 formado por varios atributos importantes:</p> <ul> <li>$schema: (obligatorio) indica la versi\u00f3n de JSON Schema utilizada.</li> <li>type: especifica el tipo de dato (object, array, string, etc.).</li> <li>properties: define las propiedades del objeto, con su nombre y reglas.</li> <li>required: lista de propiedades que deben existir obligatoriamente.</li> <li>items: define el tipo de elementos que contiene un array.</li> <li>additionalProperties: indica si se permiten propiedades no listadas en \"properties\".</li> </ul>"},{"location":"ud5-1/#tipos-de-datos-en-json-schema","title":"Tipos de Datos en JSON Schema","text":"<ul> <li>string: cadenas de texto.</li> <li>number: n\u00fameros (pueden tener decimales).</li> <li>integer: n\u00fameros enteros.</li> <li>boolean: valores <code>true</code> o <code>false</code>.</li> <li>array: listas de elementos.</li> <li>object: conjuntos de pares clave-valor.</li> <li>null: valor nulo (sin contenido).</li> </ul>"},{"location":"ud5-1/#validacion-de-valores","title":"Validaci\u00f3n de Valores","text":"<ul> <li>minLength y maxLength: controlan la longitud de las cadenas de texto.</li> <li>minimum y maximum: definen valores m\u00ednimo y m\u00e1ximo permitidos para n\u00fameros.</li> <li>pattern: permite definir expresiones regulares para validar formatos espec\u00edficos en strings (por ejemplo, c\u00f3digos postales). Una expresi\u00f3n regular es una secuencia de caracteres que define un patr\u00f3n de b\u00fasqueda. Se utilizan para comprobar si un texto cumple un formato determinado. Una expresi\u00f3n regular utiliza una sintaxis especial donde:</li> <li><code>^</code> indica el inicio de una cadena.</li> <li><code>$</code> indica el final de una cadena.</li> <li><code>[A-Z]</code> representa una letra may\u00fascula.</li> <li><code>[0-9]</code> representa un d\u00edgito.</li> <li><code>{n}</code> indica la cantidad exacta de repeticiones.</li> <li><code>.</code> representa cualquier car\u00e1cter.</li> <li><code>*</code> indica cero o m\u00e1s repeticiones.</li> <li><code>+</code> indica una o m\u00e1s repeticiones. </li> </ul> <p>Por ejemplo, podr\u00edamos definir una expresi\u00f3n regular para validar un n\u00famero de tel\u00e9fono, un c\u00f3digo postal o una matr\u00edcula de coche.</p>"},{"location":"ud5-1/#ejemplo-de-pattern","title":"Ejemplo de pattern","text":"<pre><code>{\n  \"type\": \"string\",\n  \"pattern\": \"^[A-Z]{3}[0-9]{4}$\"\n}\n</code></pre> <p>(Valida textos como \"ABC1234\").</p>"},{"location":"ud5-1/#estructuras-complejas","title":"Estructuras Complejas","text":"<ul> <li>Objetos anidados: una propiedad puede ser un objeto que contenga m\u00e1s propiedades.</li> <li>Arrays de objetos: un array puede contener varios objetos validados seg\u00fan un esquema.</li> <li>$ref: permite referenciar otros schemas, reutilizando definiciones comunes.</li> </ul>"},{"location":"ud5-1/#ejemplo-de-objeto-anidado","title":"Ejemplo de objeto anidado","text":"<pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"direccion\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"calle\": { \"type\": \"string\" },\n        \"numero\": { \"type\": \"integer\" }\n      },\n      \"required\": [\"calle\", \"numero\"]\n    }\n  }\n}\n</code></pre>"},{"location":"ud5-1/#formatos-especiales","title":"Formatos Especiales","text":"<ul> <li>email: valida que una cadena sea un correo electr\u00f3nico.</li> <li>date-time: valida fechas y horas en formato ISO.</li> <li>uri: valida direcciones URL.</li> </ul>"},{"location":"ud5-1/#ejemplo-practico-definicion-de-un-producto","title":"Ejemplo Pr\u00e1ctico: Definici\u00f3n de un producto","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Producto\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"nombre\": { \"type\": \"string\", \"minLength\": 1 },\n    \"precio\": { \"type\": \"number\", \"minimum\": 0 },\n    \"enStock\": { \"type\": \"boolean\" }\n  },\n  \"required\": [\"nombre\", \"precio\"]\n}\n</code></pre>"},{"location":"ud5-1/#512-actividad","title":"5.1.2 Actividad","text":"<ul> <li>Crear un JSON Schema para un usuario</li> <li>Validar documentos usando JSON Schema Lint</li> <li>Integrar validaci\u00f3n en WebStorm</li> </ul>"},{"location":"ud5-1/#como-se-haria-integrar-validacion-en-webstorm-explicacion-paso-a-paso-con-ejemplo","title":"C\u00f3mo se har\u00eda integrar validaci\u00f3n en WebStorm (Explicaci\u00f3n paso a paso con ejemplo)","text":"<p>Crear los archivos necesarios:</p> <ul> <li><code>usuario.schema.json</code>: Este archivo contiene el esquema que define c\u00f3mo debe ser un documento de usuario.</li> <li><code>usuario.json</code>: Este archivo ser\u00e1 el que validaremos contra el esquema.</li> </ul> <p>Contenido de <code>usuario.schema.json</code>:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Usuario\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"nombre\": {\n      \"type\": \"string\",\n      \"minLength\": 1\n    },\n    \"correo\": {\n      \"type\": \"string\",\n      \"format\": \"email\"\n    },\n    \"fechaAlta\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    }\n  },\n  \"required\": [\"nombre\", \"correo\", \"fechaAlta\"]\n}\n</code></pre> <p>Contenido de <code>usuario.json</code>:</p> <pre><code>{\n  \"nombre\": \"Alejandro Carmona\",\n  \"correo\": \"acarmar112@g.educaand.es\",\n  \"fechaAlta\": \"2024-04-28T12:34:56Z\"\n}\n</code></pre> <p>Asociar el Schema en WebStorm:</p> <p>Resultados:</p> <ul> <li>WebStorm validar\u00e1 autom\u00e1ticamente el archivo <code>usuario.json</code>.</li> <li>Si hay errores (por ejemplo, si el correo no tiene formato v\u00e1lido), WebStorm los se\u00f1alar\u00e1 directamente.</li> <li>Tambi\u00e9n ofrecer\u00e1 autocompletado de propiedades basado en el Schema.</li> </ul>"},{"location":"ud5-2/","title":"UT5.2: Trabajo con APIs","text":""},{"location":"ud5-2/#objetivos","title":"Objetivos","text":"<ul> <li>Comprender qu\u00e9 es la asincron\u00eda y por qu\u00e9 es esencial en el desarrollo web moderno.</li> <li>Aprender a utilizar Promises para gestionar operaciones que no son instant\u00e1neas.</li> <li>Usar Fetch API para conectar nuestra aplicaci\u00f3n web con APIs p\u00fablicas y trabajar con datos externos.</li> <li>Conocer herramientas que ayudan a validar, probar y depurar datos JSON y solicitudes HTTP.</li> </ul>"},{"location":"ud5-2/#introduccion","title":"Introducci\u00f3n","text":"<p>Hoy en d\u00eda, muchas aplicaciones web necesitan obtener datos de otros servidores o enviar informaci\u00f3n sin que la p\u00e1gina se quede bloqueada esperando. Esto es posible gracias a la asincron\u00eda en JavaScript, que permite realizar operaciones \u201cen segundo plano\u201d mientras el programa sigue ejecut\u00e1ndose.</p> <p>Las principales herramientas que nos ofrece JavaScript para trabajar de forma as\u00edncrona son:</p> <ul> <li>Promises: para manejar el resultado de operaciones que tardan un tiempo. </li> <li>Fetch API: para hacer solicitudes HTTP de forma moderna y sencilla.</li> </ul> <p>Adem\u00e1s, para trabajar correctamente con datos JSON (el formato m\u00e1s usado en las APIs), es muy \u00fatil validar su estructura usando editores inteligentes (WebStorm), herramientas de prueba (Postman) o validadores en l\u00ednea.</p>"},{"location":"ud5-2/#521-trabajo-con-apis","title":"5.2.1 Trabajo con APIs","text":""},{"location":"ud5-2/#asincronia-en-javascript","title":"Asincron\u00eda en JavaScript","text":"<p>La asincron\u00eda permite que, mientras el navegador espera una respuesta del servidor, otras partes del programa sigan funcionando. Esto mejora la experiencia de usuario y la eficiencia de las aplicaciones.</p> <p>Ejemplo: Mientras esperamos los datos del tiempo de una API, podemos seguir mostrando una animaci\u00f3n de carga.</p>"},{"location":"ud5-2/#promises-en-javascript","title":"Promises en JavaScript","text":"<p>Una Promise es como una \u201cpromesa\u201d de que una operaci\u00f3n terminar\u00e1 m\u00e1s tarde, con \u00e9xito o con error.</p> <p>Estados de una Promise:</p> <ul> <li>Pending (\u201cpendiente\u201d): la operaci\u00f3n a\u00fan no ha terminado.</li> <li>Fulfilled (\u201ccumplida\u201d): la operaci\u00f3n ha terminado con \u00e9xito.</li> <li>Rejected (\u201crechazada\u201d): ha ocurrido un error.</li> </ul> <pre><code>let promesa = new Promise((resolve, reject) =&gt; {\n    let exito = true;\n\n    if (exito) {\n        resolve('Operaci\u00f3n exitosa');\n    } else {\n        reject('Ocurri\u00f3 un error');\n    }\n});\n\npromesa\n.then(mensaje =&gt; console.log(mensaje))  // Si todo va bien, muestra el mensaje de \u00e9xito\n.catch(error =&gt; console.error(error));  // Si hay error, muestra el mensaje de error\n\n/* Explicaci\u00f3n paso a paso:\n\u2022   Creamos una nueva Promise con dos funciones internas: resolve (\u00e9xito) y reject (error).\n\u2022   Simulamos un caso de \u00e9xito con let exito = true.\n\u2022   Si exito es true, se ejecuta resolve('Operaci\u00f3n exitosa').\n\u2022   Si fuera false, se ejecutar\u00eda reject('Ocurri\u00f3 un error').\n\u2022   Luego, usamos .then() para gestionar el \u00e9xito y .catch() para gestionar el error.\n*/\n</code></pre>"},{"location":"ud5-2/#fetch-api-en-javascript","title":"Fetch API en JavaScript","text":"<p>Fetch API es una funci\u00f3n moderna para hacer peticiones HTTP (por ejemplo, pedir datos a un servidor).</p> <p>C\u00f3digo b\u00e1sico:</p> <pre><code>fetch('URL')\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data))\n.catch(error =&gt; console.error('Error:', error));\n\nExplicaci\u00f3n:\n1.  fetch('URL') hace la solicitud a la URL indicada.\n2.  .then(response =&gt; response.json()) transforma la respuesta a formato JSON.\n3.  .then(data =&gt; console.log(data)) trabaja con los datos recibidos.\n4.  .catch(error =&gt; console.error('Error:', error)) captura cualquier error.\n\n</code></pre>"},{"location":"ud5-2/#ejemplo-consultar-pokemon-con-fetch-api","title":"Ejemplo: Consultar Pok\u00e9mon con Fetch API","text":"<pre><code>fetch('https://pokeapi.co/api/v2/pokemon/ditto')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        console.log('Datos de Ditto:', data);\n        console.log('Nombre:', data.name);\n        console.log('Altura:', data.height);\n        console.log('Peso:', data.weight);\n    })\n    .catch(error =&gt; {\n        console.error('Error al obtener el Pok\u00e9mon:', error);\n    });\n\n/* Explicaci\u00f3n del ejemplo:\n    \u2022   Se hace una petici\u00f3n a la API de Pok\u00e9mon para consultar a Ditto.\n    \u2022   Se transforma la respuesta a JSON.\n    \u2022   Se muestran datos espec\u00edficos: nombre, altura y peso.\n    \u2022   Si ocurre un error (por ejemplo, problema de red), se captura en .catch().\n*/\n</code></pre> <p>Herramientas Recomendadas - WebStorm:   - Editor que detecta errores de sintaxis en JSON y JavaScript.   - Valida autom\u00e1ticamente esquemas JSON.</p> <ul> <li>Postman:</li> <li>Herramienta para hacer peticiones HTTP f\u00e1cilmente. </li> <li> <p>Ideal para probar APIs antes de programar la conexi\u00f3n en JavaScript. </p> </li> <li> <p>JSON Schema Lint:</p> </li> <li>Web para validar la estructura de archivos JSON: https://jsonschemalint.com/</li> </ul> <p>\u2e3b</p>"},{"location":"ud5-2/#ejercicio-guiado-consultar-pokemon-con-fetch-api","title":"Ejercicio Guiado: Consultar Pok\u00e9mon con Fetch API","text":""},{"location":"ud5-2/#objetivos-del-ejercicio","title":"Objetivos del ejercicio","text":"<ul> <li>Aplicar fetch y Promises para trabajar con APIs p\u00fablicas.</li> <li>Extraer informaci\u00f3n espec\u00edfica de la respuesta JSON.</li> <li>Gestionar errores correctamente.</li> </ul>"},{"location":"ud5-2/#enunciado","title":"Enunciado","text":"<p>Crea un peque\u00f1o programa en JavaScript que:</p> <ol> <li>Solicite los datos de un Pok\u00e9mon concreto usando la Pok\u00e9API: \ud83d\udccd URL: https://pokeapi.co/api/v2/pokemon/{nombre} (Sustituye {nombre} por el Pok\u00e9mon que quieras consultar).</li> <li>Muestre en consola:</li> <li>Nombre del Pok\u00e9mon.</li> <li>Altura (en dec\u00edmetros).</li> <li>Peso (en hectogramos).</li> <li>Tipos que tiene (por ejemplo, \u201cel\u00e9ctrico\u201d, \u201cfuego\u201d, etc.).</li> <li>Gestione posibles errores, como que no se encuentre el Pok\u00e9mon.</li> </ol> <pre><code>\n// 1. Definimos el nombre del Pok\u00e9mon que queremos consultar\nconst nombrePokemon = 'pikachu'; // Cambia este valor para probar otros Pok\u00e9mon\n\n// 2. Hacemos la solicitud usando Fetch API\nfetch(`https://pokeapi.co/api/v2/pokemon/${nombrePokemon}`)\n.then(response =&gt; {\nif (!response.ok) {\nthrow new Error('Pok\u00e9mon no encontrado');\n}\nreturn response.json();\n})\n.then(data =&gt; {\n// 3. Mostramos datos relevantes\nconsole.log('Nombre:', data.name);\nconsole.log('Altura:', data.height);\nconsole.log('Peso:', data.weight);\n\n    // 4. Extraemos y mostramos los tipos\n    const tipos = data.types.map(tipoInfo =&gt; tipoInfo.type.name);\n    console.log('Tipos:', tipos.join(', '));\n})\n.catch(error =&gt; {\nconsole.error('Error al obtener el Pok\u00e9mon:', error.message);\n});\n\n/* Explicaci\u00f3n paso a paso\n1.Definimos una variable nombrePokemon con el nombre del Pok\u00e9mon a buscar.\n2.Realizamos la solicitud fetch() a la API.\n3.Comprobamos que response.ok sea true (si no, lanzamos un error).\n4.Convertimos la respuesta a JSON.\n5.Mostramos en consola:\n    \u2022   El nombre (data.name).\n    \u2022   La altura (data.height).\n    \u2022   El peso (data.weight).\n    \u2022   Los tipos (data.types) mapeados a un array de nombres.\n6.Capturamos cualquier error en .catch() y mostramos un mensaje adecuado.\n\n*/\n</code></pre>"},{"location":"ud5-2/#resultado-esperado-en-consola","title":"Resultado esperado en consola","text":"<p>Buscando pikachu, deber\u00edas ver algo como:</p> <pre><code>  Nombre: pikachu\n  Altura: 4\n  Peso: 60\n  Tipos: electric\n</code></pre> <p>Tareas Extra (Opcionales)</p> <ul> <li>Pedir el nombre del Pok\u00e9mon al usuario usando prompt().</li> <li>Mostrar tambi\u00e9n la imagen del Pok\u00e9mon (data.sprites.front_default) en la p\u00e1gina.</li> <li>Normalizar el nombre (convertirlo a min\u00fasculas usando toLowerCase()).</li> </ul>"},{"location":"ud5-OLD/","title":"UD4 - DOM manipulation and events","text":"![](assets/ud4/ud4-eventos.webp)  <p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>Document</p> <ul> <li>Browser environment, specs</li> <li>DOM tree</li> <li>Walking the DOM</li> <li>Searching: getElement, querySelector</li> <li>Node properties: type, tag and contents</li> <li>Attributes and properties</li> <li>Modifying the document</li> <li>Styles and classes</li> <li>Element size and scrolling</li> <li>Window sizes and scrolling</li> <li>Coordinates</li> </ul> <p>Introduction to Events</p> <ul> <li>Introduction to browser events</li> <li>Bubbling and capturing</li> <li>Event delegation</li> <li>Browser default actions</li> <li>Dispatching custom events</li> </ul> <p>UI Events</p> <ul> <li>Mouse events</li> <li>Moving the mouse: mouseover/out, mouseenter/leave</li> <li>Drag'n'Drop with mouse events</li> <li>Pointer events</li> <li>Keyboard: keydown and keyup</li> <li>Scrolling</li> </ul> <p>Forms, controls</p> <ul> <li>Form properties and methods</li> <li>Focusing: focus/blur</li> <li>Events: change, input, cut, copy, paste</li> <li>Forms: event and method submit</li> </ul> <p>Regular expressions</p> <p>Document and resource loading</p> <ul> <li>Page: DOMContentLoaded, load, beforeunload, unload, beforeunload, unload</li> <li>Scripts: async, defer</li> <li>Resource loading: onload and onerror</li> </ul> <p>Storing data in the browser</p> <ul> <li>Cookies, document.cookie</li> <li>LocalStorage, sessionStorage</li> </ul> <p>Error handling</p> <ul> <li>Error handling, \"try...catch\"</li> <li>Custom errors, extending Error</li> </ul> <p>Promises</p> <ul> <li>Introduction: callbacks</li> <li>Promise</li> <li>Promises chaining</li> <li>Error handling with promises</li> <li>Promise API</li> <li>Promisification</li> <li>Async/await</li> </ul> <p>Network requests</p> <ul> <li>Fetch</li> <li>FormData</li> <li>Fetch: Download progress</li> <li>Fetch: Abort</li> <li>Fetch: Cross-Origin Requests</li> <li>Fetch API</li> <li>URL objects</li> <li>XMLHttpRequest</li> </ul>"},{"location":"ud5-OLD/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Form Validation by Building a Calorie Counter</li> <li>Learn Regular Expressions by Building a Spam Filter</li> <li>Review DOM Manipulation by Building a Rock, Paper, Scissors Game</li> <li>Learn localStorage by Building a Todo App</li> <li>Learn Fetch and Promises by Building an fCC Authors Page,</li> <li>Learn Asynchronous Programming by Building an fCC Forum Leaderboard</li> </ul>"},{"location":"ud5/","title":"UT5 Definici\u00f3n de esquemas y vocabularios en lenguajes de marcas. Introducci\u00f3n","text":""},{"location":"ud5/#objetivos-de-aprendizaje","title":"Objetivos de aprendizaje","text":"<p>El objetivo principal de este tema es que el alumnado comprenda y aplique los conceptos de esquemas y vocabularios en el contexto de los lenguajes de marcas, centr\u00e1ndose en su utilidad para describir, validar y asegurar la integridad de los datos estructurados. Se busca que el estudiante no solo conozca las tecnolog\u00edas, sino que tambi\u00e9n sepa utilizarlas con sentido pr\u00e1ctico.</p>"},{"location":"ud5/#1-introduccion-que-son-los-esquemas-y-vocabularios","title":"1. Introducci\u00f3n: \u00bfQu\u00e9 son los esquemas y vocabularios?","text":""},{"location":"ud5/#11-lenguajes-de-marcas","title":"1.1 Lenguajes de marcas","text":"<p>Dentro de los lenguajes de marcas, XML (eXtensible Markup Language) y JSON (JavaScript Object Notation) son los ejemplos m\u00e1s utilizados para el intercambio de datos. Estos lenguajes permiten representar informaci\u00f3n estructurada de forma jer\u00e1rquica y comprensible tanto para personas como para m\u00e1quinas.</p> <p>Por ejemplo, un archivo XML puede representar los datos de un libro:</p> <pre><code>&lt;libro&gt;\n  &lt;titulo&gt;1984&lt;/titulo&gt;\n  &lt;autor&gt;George Orwell&lt;/autor&gt;\n&lt;/libro&gt;\n</code></pre> <p>Y en JSON ser\u00eda:</p> <pre><code>{\n  \"titulo\": \"1984\",\n  \"autor\": \"George Orwell\"\n}\n</code></pre> <p>Ambos documentos contienen la misma informaci\u00f3n, pero est\u00e1n representados con diferentes estructuras y sintaxis.</p>"},{"location":"ud5/#12-que-es-un-esquema","title":"1.2 \u00bfQu\u00e9 es un esquema?","text":"<p>Un esquema es un documento que define c\u00f3mo debe estar estructurado otro documento. Sirve como gu\u00eda o patr\u00f3n para asegurar que los datos sean correctos y cumplan unas normas m\u00ednimas. Sin un esquema, podr\u00edamos tener documentos incompletos, con datos mal formateados o err\u00f3neos.</p>"},{"location":"ud5/#13-que-es-un-vocabulario","title":"1.3 \u00bfQu\u00e9 es un vocabulario?","text":"<p>En el contexto de los lenguajes de marcas, un vocabulario es el conjunto de etiquetas, atributos, tipos de datos y estructuras predefinidas que se utilizan para describir un tipo de informaci\u00f3n. Por ejemplo, un vocabulario de \u201clibros\u201d incluir\u00eda etiquetas como <code>&lt;titulo&gt;</code>, <code>&lt;autor&gt;</code>, <code>&lt;paginas&gt;</code> y reglas sobre c\u00f3mo deben organizarse.</p>"},{"location":"ud5/#2-tecnologias-para-definir-esquemas-xml-y-json","title":"2. Tecnolog\u00edas para definir esquemas: XML y JSON","text":""},{"location":"ud5/#21-xml-y-xsd","title":"2.1 XML y XSD","text":"<ul> <li>XML es el lenguaje de marcas que se utiliza para representar datos.</li> <li>XSD (XML Schema Definition) es el lenguaje que se utiliza para definir la estructura v\u00e1lida que debe tener un documento XML.</li> </ul>"},{"location":"ud5/#para-que-se-usa-xsd","title":"\u00bfPara qu\u00e9 se usa XSD?","text":"<p>XSD permite validar un documento XML contra una estructura predefinida. Es decir, asegura que el documento XML: - Contiene los elementos esperados. - Los elementos aparecen en el orden correcto. - Los datos son del tipo adecuado (texto, n\u00fameros, fechas, etc.). - Se cumplen restricciones como valores m\u00ednimos, formatos o presencia obligatoria.</p> <p>Es especialmente \u00fatil cuando se intercambian datos entre sistemas distintos o se automatiza el procesamiento de informaci\u00f3n. En estos casos, saber con certeza que los datos cumplen una estructura es clave para evitar errores.</p>"},{"location":"ud5/#donde-se-define-el-xsd","title":"\u00bfD\u00f3nde se define el XSD?","text":"<p>El XSD se escribe como un archivo independiente (por ejemplo, <code>videojuego.xsd</code>) y se enlaza en el documento XML mediante atributos en la etiqueta ra\u00edz:</p> <pre><code>&lt;videojuego xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n            xsi:noNamespaceSchemaLocation=\"videojuego.xsd\"&gt;\n</code></pre> <p>Esto indica que el XML debe validarse con el esquema indicado.</p>"},{"location":"ud5/#ejemplo-de-xml","title":"Ejemplo de XML:","text":"<pre><code>&lt;videojuego&gt;\n  &lt;titulo&gt;The Legend of Zelda&lt;/titulo&gt;\n  &lt;estudio&gt;Nintendo&lt;/estudio&gt;\n  &lt;genero&gt;Aventura&lt;/genero&gt;\n  &lt;pegi&gt;12&lt;/pegi&gt;\n  &lt;arte&gt;Pixel&lt;/arte&gt;\n&lt;/videojuego&gt;\n</code></pre>"},{"location":"ud5/#ejemplo-de-xsd-correspondiente","title":"Ejemplo de XSD correspondiente:","text":"<pre><code>&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n  &lt;xs:element name=\"videojuego\"&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=\"titulo\" type=\"xs:string\"/&gt;\n        &lt;xs:element name=\"estudio\" type=\"xs:string\"/&gt;\n        &lt;xs:element name=\"genero\" type=\"xs:string\"/&gt;\n        &lt;xs:element name=\"pegi\" type=\"xs:integer\"/&gt;\n        &lt;xs:element name=\"arte\" type=\"xs:string\"/&gt;\n      &lt;/xs:sequence&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>"},{"location":"ud5/#22-json-y-json-schema","title":"2.2 JSON y JSON Schema","text":"<ul> <li>JSON es un formato ligero para el intercambio de datos, muy usado en desarrollo web y APIs.</li> <li>JSON Schema es el equivalente a XSD, pero para describir y validar la estructura de un archivo JSON.</li> </ul>"},{"location":"ud5/#para-que-se-usa-json-schema","title":"\u00bfPara qu\u00e9 se usa JSON Schema?","text":"<p>JSON Schema permite: - Validar que un documento JSON tenga los campos esperados. - Comprobar que los datos son del tipo correcto. - Establecer restricciones (valores m\u00ednimos, longitud de cadenas, formato de correos, etc.).</p> <p>Se usa ampliamente en: - APIs REST (por ejemplo, para validar peticiones y respuestas). - Formularios web. - Configuraciones y archivos de intercambio de datos.</p>"},{"location":"ud5/#donde-se-define","title":"\u00bfD\u00f3nde se define?","text":"<p>El esquema JSON suele estar en un archivo separado (por ejemplo, <code>videojuego_schema.json</code>) y se utiliza en herramientas o entornos que soportan validaci\u00f3n autom\u00e1tica. A diferencia de XML, no se suele enlazar directamente desde el JSON.</p>"},{"location":"ud5/#ejemplo-de-json","title":"Ejemplo de JSON:","text":"<pre><code>{\n  \"nombre\": \"Halo\",\n  \"estudio\": \"343 Industries\",\n  \"genero\": \"Acci\u00f3n\",\n  \"pegi\": 18,\n  \"arte\": \"3D\"\n}\n</code></pre>"},{"location":"ud5/#ejemplo-de-json-schema-correspondiente","title":"Ejemplo de JSON Schema correspondiente:","text":"<pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"nombre\": { \"type\": \"string\" },\n    \"estudio\": { \"type\": \"string\" },\n    \"genero\": { \"type\": \"string\" },\n    \"pegi\": { \"type\": \"integer\", \"minimum\": 3, \"maximum\": 18 },\n    \"arte\": { \"type\": \"string\" }\n  },\n  \"required\": [\"nombre\", \"estudio\", \"genero\", \"pegi\"]\n}\n</code></pre>"},{"location":"ud5/#3-creacion-y-validacion-de-descripciones-de-documentos","title":"3. Creaci\u00f3n y validaci\u00f3n de descripciones de documentos","text":"<p>Uno de los usos m\u00e1s relevantes de los esquemas es garantizar que los documentos de datos (ya sean XML o JSON) cumplan una estructura predefinida. Esto asegura la calidad de los datos y facilita su tratamiento autom\u00e1tico.</p> <p>Los esquemas permiten definir tanto los tipos de datos (por ejemplo, texto, n\u00famero o fecha) como restricciones espec\u00edficas, como el n\u00famero m\u00ednimo o m\u00e1ximo, el formato (correo electr\u00f3nico, URI, etc.), longitud o valores obligatorios.</p> <p>Una vez creado un esquema, se puede usar para validar si un documento cumple lo que define. Esta validaci\u00f3n puede hacerse manualmente o mediante herramientas autom\u00e1ticas, como:</p> <ul> <li>https://jsonschemavalidator.net para validar JSON.</li> <li>https://www.freeformatter.com/xml-validator-xsd.html para validar XML contra XSD.</li> <li>Editores como Visual Studio Code, que permiten cargar el esquema y mostrar errores de validaci\u00f3n en tiempo real.</li> </ul> <p>Ejemplo de validaci\u00f3n de JSON:</p> <p>Documento JSON:</p> <pre><code>{\n  \"curso\": \"1\u00ba DAW\",\n  \"asignatura\": \"Lenguajes de Marcas\",\n  \"horas\": 96\n}\n</code></pre> <p>Esquema JSON correspondiente:</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"curso\": { \"type\": \"string\" },\n    \"asignatura\": { \"type\": \"string\" },\n    \"horas\": { \"type\": \"integer\", \"minimum\": 1 }\n  },\n  \"required\": [\"curso\", \"asignatura\", \"horas\"]\n}\n</code></pre>"},{"location":"ud5/#4-herramientas-de-creacion-y-validacion","title":"4. Herramientas de creaci\u00f3n y validaci\u00f3n","text":""},{"location":"ud5/#para-xml-y-xsd","title":"Para XML y XSD:","text":"<ul> <li>Freeformatter XML Validator: permite validar archivos XML contra su XSD desde el navegador.</li> <li>Oxygen XML Editor: entorno profesional con soporte para edici\u00f3n, validaci\u00f3n, esquemas y transformaciones.</li> <li>Visual Studio Code: con extensiones como XML Language Support, permite validar mientras se edita.</li> </ul>"},{"location":"ud5/#para-json-y-json-schema","title":"Para JSON y JSON Schema:","text":"<ul> <li>JSONLint: comprueba la validez de la sintaxis JSON.</li> <li>JSON Schema Validator: herramienta online para validar estructura contra un esquema.</li> <li>Visual Studio Code: con JSON Schema Store u otras extensiones, ofrece autocompletado y validaci\u00f3n en tiempo real.</li> </ul>"},{"location":"ud5/#en-webstorm","title":"En WebStorm","text":"<p>WebStorm tiene soporte nativo para trabajar con archivos JSON, XML y sus esquemas (JSON Schema y XSD). Aunque no usa tantas extensiones como Visual Studio Code, muchas funciones ya est\u00e1n integradas.</p>"},{"location":"ud5/#para-json-y-json-schema_1","title":"Para JSON y JSON Schema","text":""},{"location":"ud5/#validacion-automatica-con-json-schema","title":"Validaci\u00f3n autom\u00e1tica con JSON Schema","text":"<p>WebStorm detecta muchos esquemas de forma autom\u00e1tica (como los de TypeScript, ESLint, etc.), pero puedes usar tus propios esquemas as\u00ed:</p> <ol> <li>Ve a <code>Preferences</code> (o <code>Settings</code>) \u2192 <code>Languages &amp; Frameworks</code> \u2192 <code>Schemas and DTDs</code> \u2192 <code>JSON Schema Mappings</code>.</li> <li>Haz clic en <code>+</code> para a\u00f1adir tu esquema JSON.</li> <li>Asocia tu esquema a archivos concretos o patrones como <code>*.json</code>.</li> <li>WebStorm validar\u00e1, autocompletar\u00e1 y marcar\u00e1 errores en tiempo real al editar tus JSON.</li> </ol>"},{"location":"ud5/#otras-funciones-utiles","title":"Otras funciones \u00fatiles","text":"<ul> <li>Autocompletado basado en el esquema.</li> <li>Advertencias y errores de validaci\u00f3n en el editor.</li> <li>Navegaci\u00f3n r\u00e1pida por el esquema.</li> </ul>"},{"location":"ud5/#para-xml-y-xsd_1","title":"Para XML y XSD","text":""},{"location":"ud5/#soporte-nativo-de-xml-y-esquemas-xsd","title":"Soporte nativo de XML y esquemas XSD","text":"<p>WebStorm reconoce archivos <code>.xml</code> y <code>.xsd</code>. Si enlazas el esquema correctamente, se activa la validaci\u00f3n autom\u00e1tica.</p>"},{"location":"ud5/#ejemplo-de-enlace-a-esquema","title":"Ejemplo de enlace a esquema:","text":"<pre><code>&lt;documento xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:noNamespaceSchemaLocation=\"archivo.xsd\"&gt;\n</code></pre>"},{"location":"ud5/#funcionalidades","title":"Funcionalidades","text":"<ul> <li>Validaci\u00f3n autom\u00e1tica de estructura y tipos. </li> <li>Autocompletado de etiquetas y atributos definidos en el XSD. </li> <li>Resaltado de errores en directo.</li> </ul>"},{"location":"ud5/#mapeo-de-esquemas-manual","title":"Mapeo de esquemas manual","text":"<ul> <li>Ve a Preferences \u2192 Languages &amp; Frameworks \u2192 Schemas and DTDs \u2192 XML Catalog. </li> <li>Puedes a\u00f1adir rutas a archivos .xsd y asociarlos a archivos XML espec\u00edficos o a un patr\u00f3n.</li> </ul>"},{"location":"ud5/#plugins-utiles-opcional","title":"Plugins \u00fatiles (opcional)","text":"<p>Aunque muchas funciones vienen integradas, puedes explorar estos plugins desde Settings &gt; Plugins:</p> <ul> <li>JSON Viewer </li> <li>Tools </li> <li>thView + XSLT Support</li> </ul>"},{"location":"ud5/#5-actividad-para-practicar","title":"5. Actividad para practicar","text":"<p>Enunciado: Crea un documento JSON que represente un cat\u00e1logo de productos. Cada producto debe tener:</p> <ul> <li><code>nombre</code>: string</li> <li><code>precio</code>: n\u00famero mayor que 0</li> <li><code>stock</code>: entero positivo</li> <li><code>categor\u00eda</code>: uno de \"libros\", \"ropa\", \"inform\u00e1tica\"</li> </ul> <p>Despu\u00e9s, crea su JSON Schema y valida con una herramienta online.</p>"},{"location":"sesiones/ud5-1/","title":"Ud5 1","text":"<p>\ud83e\udde0 Sesi\u00f3n 1: Introducci\u00f3n a esquemas y vocabularios</p> <p>\u2e3b</p> <p>\ud83c\udfaf Objetivos de la sesi\u00f3n \u2022   Comprender qu\u00e9 son los esquemas y vocabularios en el contexto de los lenguajes de marcas. \u2022   Diferenciar entre estructura, sintaxis y sem\u00e1ntica. \u2022   Introducir la validaci\u00f3n de documentos y su utilidad. \u2022   Conocer y comparar XML y JSON como lenguajes para representar datos estructurados. \u2022   Aprender las tecnolog\u00edas de validaci\u00f3n: DTD, XSD, JSON Schema.</p> <p>\u2e3b</p> <p>\ud83e\udde9 1. \u00bfQu\u00e9 son los esquemas y vocabularios?</p> <p>Un esquema es una especificaci\u00f3n que define la estructura v\u00e1lida de un documento. Act\u00faa como una plantilla o \u201ccontrato\u201d que describe: \u2022   Qu\u00e9 elementos pueden aparecer. \u2022   En qu\u00e9 orden deben estar. \u2022   Qu\u00e9 atributos deben o pueden tener. \u2022   Qu\u00e9 tipo de datos contiene cada valor.</p> <p>Un vocabulario es el conjunto de nombres de elementos y atributos v\u00e1lidos en un dominio concreto. Es m\u00e1s sem\u00e1ntico que estructural.</p> <p>\ud83d\udd0d Ejemplo sencillo (XML):</p> <p> Guillermo 40 </p> <p>Aqu\u00ed, el vocabulario incluye persona, nombre y edad, mientras que un esquema definir\u00eda que: \u2022   persona debe tener nombre y edad. \u2022   nombre es un texto. \u2022   edad es un n\u00famero entero.</p> <p>\u2e3b</p> <p>\ud83d\udcda 2. Contextualizando XML y JSON</p> <p>Caracter\u00edstica  XML JSON Sintaxis    Verbosa, etiquetas de cierre    M\u00e1s concisa, con {} y [] Tipado  Tipado m\u00e1s estricto con XSD Tipado flexible con JSON Schema Legibilidad Dif\u00edcil para humanos    M\u00e1s legible Uso com\u00fan   Documentos estructurados, SOAP  APIs, datos ligeros (REST)</p> <p>\u2e3b</p> <p>\ud83e\udde0 3. Estructura, sintaxis y sem\u00e1ntica \u2022   Estructura: El esqueleto de un documento. Qu\u00e9 elementos contiene y c\u00f3mo se organizan. \u2022   Sintaxis: Las reglas del lenguaje (uso correcto de etiquetas, comillas, llaves\u2026). \u2022   Sem\u00e1ntica: El significado de los elementos y atributos. Ej. nombre vs alias.</p> <p>\u2e3b</p> <p>\u2705 4. Validaci\u00f3n de documentos</p> <p>\u00bfPor qu\u00e9 validar? \u2022   Detectar errores antes de procesar datos. \u2022   Garantizar la interoperabilidad entre sistemas. \u2022   Verificar que el contenido sigue una estructura esperada. \u2022   Facilitar el mantenimiento.</p> <p>\u00bfCon qu\u00e9 se valida?</p> <p>Lenguaje    Tecnolog\u00eda de validaci\u00f3n XML DTD, XML Schema (XSD) JSON    JSON Schema</p> <p>\u2e3b</p> <p>\ud83d\udd17 5. Asociaci\u00f3n de documentos y esquemas</p> <p>XML se vincula a un esquema XSD con el atributo xsi:schemaLocation:</p> <p> Guillermo 40 </p> <p>JSON no incluye esta asociaci\u00f3n internamente por convenci\u00f3n. En su lugar, las herramientas externas (como validadores o APIs) asocian el JSON al esquema de validaci\u00f3n.</p> <p>\u2e3b</p> <p>\ud83d\udee0\ufe0f Pr\u00e1ctica guiada</p> <ol> <li>Validaci\u00f3n de XML con DTD</li> </ol> <p>Archivo XML:</p> <p> Guillermo 40 </p> <p>Archivo persona.dtd:</p> <p>&lt;!ELEMENT persona (nombre, edad)&gt; &lt;!ELEMENT nombre (#PCDATA)&gt; &lt;!ELEMENT edad (#PCDATA)&gt;</p> <ol> <li>Validaci\u00f3n con XML Schema (XSD)</li> </ol> <p>Archivo XML:</p> <p> Guillermo 40 </p> <p>Archivo persona.xsd:</p> <p> </p> <ol> <li>Comparativa visual JSON vs XML</li> </ol> <p>XML:</p> <p> Guillermo 40 </p> <p>JSON:</p> <p>{ \"nombre\": \"Guillermo\", \"edad\": 40 }</p> <p>Discusi\u00f3n en clase: \u2022   \u00bfCu\u00e1l es m\u00e1s legible? \u2022   \u00bfCu\u00e1l ser\u00eda m\u00e1s c\u00f3modo para APIs? \u2022   \u00bfQu\u00e9 ventajas ofrece XML en entornos empresariales?</p> <p>\u2e3b</p> <p>\ud83e\uddf0 Herramientas \u2022   Navegador web: para validar XML con herramientas online como XMLValidation.com \u2022   VSCode o WebStorm: para editar y validar localmente archivos .xml, .dtd, .xsd, .json</p> <p>\u2e3b</p> <p>\ud83d\udccc Tarea opcional / extra en clase</p> <p>Valida un archivo XML propio con una estructura inventada (por ejemplo, un listado de recetas, libros o alumnos), definiendo su DTD o XSD asociado.</p>"}]}