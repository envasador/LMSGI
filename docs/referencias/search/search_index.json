{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lenguajes de Marcas","text":""},{"location":"#bienvenidos-al-modulo-de-lenguajes-de-marcas-y-sistemas-de-gestion-de-la-informacion-del-ciclo-de-desarrollo-de-aplicaciones-web","title":"\u00a1Bienvenidos al m\u00f3dulo de Lenguajes de Marcas y Sistemas de Gesti\u00f3n de la Informaci\u00f3n del ciclo de Desarrollo de Aplicaciones Web!","text":"<p>Este curso est\u00e1 dise\u00f1ado para que adquieras las habilidades necesarias en el manejo de lenguajes de marcas y sistemas de gesti\u00f3n de informaci\u00f3n, los cuales son fundamentales en el desarrollo de aplicaciones web modernas. A lo largo del m\u00f3dulo, aprender\u00e1s c\u00f3mo estructurar, transmitir y presentar informaci\u00f3n utilizando tecnolog\u00edas clave como HTML, CSS, JSON, y JavaScript.</p>"},{"location":"#tabla-de-contenido","title":"Tabla de contenido","text":"<ul> <li>Unidad 1: Introducci\u00f3n a los lenguajes de marcas</li> <li>Unidad 2: HTML5</li> </ul>"},{"location":"#referencias-web-generales","title":"Referencias web generales","text":"<p>El desarrollo de software est\u00e1 en constante evoluci\u00f3n, actualmente podemos observar como una avalancha de nuevas tendencias tecnol\u00f3gicas y metodolog\u00edas se va abriendo paso. Este es el motivo principal por el que la mayor parte de los apuntes proporcionados no son m\u00e1s que referencias web actuales a los temas que vamos a tratar.</p> <ul> <li>HTML5 by Manz</li> <li>SVG by Manz</li> <li>CSS by Manz</li> <li>Javascript by Manz</li> <li>DOM by Manz</li> <li>FreeCodeCamp</li> <li>developer.mozilla.org</li> <li>The Modern JavaScript Tutorial</li> <li>lenguajejs.com</li> <li>Javascript Cheatsheet</li> <li>Javascript notes By Majo Ledesma</li> </ul>"},{"location":"#que-vas-a-aprender","title":"\u00bfQu\u00e9 vas a aprender?","text":""},{"location":"#1-lenguajes-de-marcas","title":"1. Lenguajes de Marcas","text":"<p>Estudiar\u00e1s las caracter\u00edsticas fundamentales de los lenguajes de marcas como HTML y XML, los cuales permiten estructurar y almacenar informaci\u00f3n de manera eficiente. Te familiarizar\u00e1s con las diferentes versiones de estos lenguajes y c\u00f3mo aplicarlos en contextos reales, analizando la estructura de documentos y comprendiendo las ventajas que ofrecen en el manejo de la informaci\u00f3n.</p>"},{"location":"#2-creacion-de-documentos-web","title":"2. Creaci\u00f3n de Documentos Web","text":"<p>Aqu\u00ed te sumergir\u00e1s en la construcci\u00f3n de p\u00e1ginas web utilizando HTML5 para la estructura y CSS para la presentaci\u00f3n. Aprender\u00e1s a aplicar hojas de estilo que mejoren la apariencia de los sitios web, optimizando su dise\u00f1o para diferentes dispositivos y validando tanto el c\u00f3digo HTML como las hojas de estilo para cumplir con los est\u00e1ndares de la web.</p>"},{"location":"#3-programacion-con-javascript","title":"3. Programaci\u00f3n con JavaScript","text":"<p>Ver\u00e1s c\u00f3mo JavaScript te permite interactuar con las p\u00e1ginas web, manipulando el DOM (Document Object Model) para cambiar din\u00e1micamente el contenido, el estilo y la estructura de los documentos. Aprender\u00e1s a seleccionar, modificar y eliminar elementos de una p\u00e1gina web, as\u00ed como a hacer que estos cambios sean reactivos e interactivos.</p>"},{"location":"#4-validacion-de-documentos-con-json","title":"4. Validaci\u00f3n de Documentos con JSON","text":"<p>Uno de los formatos m\u00e1s populares para el intercambio de datos en la web es JSON (JavaScript Object Notation). Aprender\u00e1s a: - Describir y estructurar la informaci\u00f3n en formato JSON, utilizando objetos, arrays y pares clave-valor. - Validar documentos JSON mediante el uso de herramientas como JSON Schema, que te permitir\u00e1n asegurar que los datos recibidos cumplen con las reglas de estructura y tipos requeridos. - Aplicar JSON en APIs web, entendiendo c\u00f3mo se utiliza para transmitir informaci\u00f3n entre servidores y clientes en aplicaciones modernas.</p>"},{"location":"#5-hojas-de-estilo-css","title":"5. Hojas de Estilo CSS","text":"<p>Adem\u00e1s de aprender a estructurar p\u00e1ginas web con HTML, ver\u00e1s c\u00f3mo CSS te permite mejorar la presentaci\u00f3n visual de estas p\u00e1ginas. Aprender\u00e1s a aplicar estilos a los elementos HTML, a crear dise\u00f1os responsivos que se adapten a distintos dispositivos y a utilizar las \u00faltimas caracter\u00edsticas de CSS3 para animaciones, transiciones y otros efectos visuales avanzados.</p>"},{"location":"#por-que-es-importante","title":"\u00bfPor qu\u00e9 es importante?","text":"<p>El manejo adecuado de estos lenguajes es esencial para el desarrollo web profesional. Aprender\u00e1s no solo a crear p\u00e1ginas web est\u00e9ticamente atractivas, sino tambi\u00e9n a garantizar que la informaci\u00f3n que manejen sea clara, accesible y bien estructurada. Estas habilidades son clave para el desarrollo de aplicaciones modernas que interact\u00faan con datos y ofrecen experiencias din\u00e1micas y personalizadas para los usuarios.</p>"},{"location":"#herramientas-que-usaras","title":"Herramientas que usar\u00e1s:","text":"<ul> <li>HTML5 y CSS3: Para estructurar y dar estilo a las p\u00e1ginas web.</li> <li>JavaScript: Para hacer que las p\u00e1ginas sean din\u00e1micas e interactivas.</li> <li>JSON: Para el intercambio y validaci\u00f3n de datos entre aplicaciones.</li> <li>JSON Schema: Para garantizar que los datos cumplan con una estructura determinada.</li> </ul> <p>Al finalizar este curso, estar\u00e1s preparado para desarrollar aplicaciones web modernas que gestionen y presenten informaci\u00f3n de forma eficaz, aplicando las mejores pr\u00e1cticas de desarrollo y dise\u00f1o web.</p>"},{"location":"ud1/","title":"Introducci\u00f3n a los Lenguajes de Marcas","text":""},{"location":"ud1/#1-que-es-un-lenguaje-de-marcas-y-para-que-sirve","title":"1. \u00bfQu\u00e9 es un lenguaje de marcas y para qu\u00e9 sirve?","text":"<p>Los lenguajes de marcas son sistemas que utilizan etiquetas (marcas) para estructurar, organizar o describir contenido dentro de un documento. Estas marcas no son visibles en la salida final, sino que proporcionan instrucciones sobre c\u00f3mo presentar o procesar la informaci\u00f3n. Su prop\u00f3sito es permitir la separaci\u00f3n del contenido de su estructura o presentaci\u00f3n, facilitando la manipulaci\u00f3n y el intercambio de datos entre diferentes sistemas.</p>"},{"location":"ud1/#ejemplos-de-aplicaciones","title":"Ejemplos de aplicaciones:","text":"<ul> <li>HTML (HyperText Markup Language) estructura p\u00e1ginas web.</li> <li>XML (eXtensible Markup Language) intercambia y almacena datos entre sistemas.</li> <li>Markdown simplifica la escritura de texto estructurado para generar documentos o p\u00e1ginas web.</li> </ul>"},{"location":"ud1/#2-breve-historia-de-los-lenguajes-de-marcas","title":"2. Breve historia de los lenguajes de marcas","text":"<p>La evoluci\u00f3n de los lenguajes de marcas comenz\u00f3 con el GML (Generalized Markup Language) creado en los a\u00f1os 60 por IBM. Este lenguaje fue precursor de muchos otros:</p> <ul> <li>GML (Generalized Markup Language): Creado por IBM en los a\u00f1os 60, permit\u00eda a los usuarios etiquetar el contenido de un documento para diferentes prop\u00f3sitos.</li> <li>SGML (Standard Generalized Markup Language): Aprobado como est\u00e1ndar en 1986, fue una evoluci\u00f3n del GML y estableci\u00f3 las bases de muchos lenguajes posteriores.</li> <li>HTML (HyperText Markup Language): Basado en SGML, fue desarrollado en los 90 para estructurar documentos web. Marc\u00f3 el auge de la Web.</li> <li>XML (eXtensible Markup Language): Introducido en 1998, ofrece un formato m\u00e1s simple y flexible que SGML y se utiliza ampliamente para el intercambio de datos entre sistemas.</li> <li>Otros lenguajes, como Markdown, LaTeX y JSON, surgieron para resolver problemas espec\u00edficos en cuanto a la presentaci\u00f3n o manipulaci\u00f3n de informaci\u00f3n.</li> </ul>"},{"location":"ud1/#3-tipos-de-lenguajes-de-marcas-con-ejemplos-y-ampliacion","title":"3. Tipos de lenguajes de marcas con ejemplos y ampliaci\u00f3n","text":""},{"location":"ud1/#31-gml-generalized-markup-language","title":"3.1. GML (Generalized Markup Language)","text":"<p>GML fue desarrollado por IBM en la d\u00e9cada de los 60. Se considera uno de los primeros lenguajes de marcas y sent\u00f3 las bases de lo que m\u00e1s tarde se convertir\u00eda en SGML. Su principal objetivo era permitir a los autores etiquetar documentos para su procesamiento y presentaci\u00f3n, pero fue reemplazado por lenguajes m\u00e1s avanzados debido a su simplicidad.</p> <ul> <li>Uso t\u00edpico: Documentaci\u00f3n t\u00e9cnica en sistemas antiguos.</li> <li>Ventaja: Marc\u00f3 el inicio de los lenguajes de marcas.</li> <li>Desventaja: Limitado en t\u00e9rminos de flexibilidad y capacidad para definir estructuras complejas.</li> </ul> <pre><code>:title.General Markup Language\n:author.John Doe\n:section.Starting GML\nThis is a paragraph in GML.\n</code></pre>"},{"location":"ud1/#32-sgml-standard-generalized-markup-language","title":"3.2. SGML (Standard Generalized Markup Language)","text":"<p>SGML fue desarrollado en los a\u00f1os 80 como una evoluci\u00f3n de GML, con el prop\u00f3sito de ser un meta-lenguaje, es decir, un lenguaje para definir otros lenguajes de marcas. SGML es muy flexible, pero tambi\u00e9n bastante complejo, lo que llev\u00f3 a la creaci\u00f3n de lenguajes m\u00e1s espec\u00edficos y sencillos como HTML y XML.</p> <ul> <li>Uso t\u00edpico: Documentaci\u00f3n t\u00e9cnica y sistemas de publicaci\u00f3n.</li> <li>Ventaja: Extremadamente flexible, permite definir cualquier tipo de documento.</li> <li>Desventaja: Complejo de implementar, y poco adecuado para entornos web.</li> </ul> <pre><code>&lt;!DOCTYPE example SYSTEM \"example.dtd\"&gt;\n&lt;document&gt;\n  &lt;title&gt;This is SGML&lt;/title&gt;\n  &lt;body&gt;\n    &lt;p&gt;SGML example content&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/document&gt;\n</code></pre>"},{"location":"ud1/#33-html-hypertext-markup-language","title":"3.3. HTML (HyperText Markup Language)","text":"<p>HTML es el est\u00e1ndar para crear p\u00e1ginas web. Se desarroll\u00f3 en los a\u00f1os 90 y est\u00e1 basado en SGML, aunque simplificado para facilitar su uso en la Web. A lo largo de los a\u00f1os, HTML ha evolucionado, con HTML5 siendo la versi\u00f3n m\u00e1s reciente, que incluye soporte para multimedia, gr\u00e1ficos y aplicaciones interactivas.</p> <ul> <li>Uso t\u00edpico: Estructuraci\u00f3n de contenido web.</li> <li>Ventaja: Amplio soporte en navegadores, f\u00e1cil de aprender.</li> <li>Desventaja: Limitado para el manejo de datos complejos; dependiente de CSS y JavaScript para la presentaci\u00f3n y funcionalidad avanzada.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;HTML Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello, World!&lt;/h1&gt;\n    &lt;p&gt;This is a paragraph in HTML.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ud1/#34-xml-extensible-markup-language","title":"3.4. XML (eXtensible Markup Language)","text":"<p>XML es una versi\u00f3n simplificada de SGML, dise\u00f1ada para ser tanto legible por humanos como por m\u00e1quinas. Su prop\u00f3sito principal es estructurar datos para intercambiarlos entre sistemas heterog\u00e9neos, sin atarse a la presentaci\u00f3n visual. XML no tiene etiquetas predefinidas, lo que permite a los usuarios definir sus propias estructuras.</p> <ul> <li>Uso t\u00edpico: Intercambio y almacenamiento de datos en aplicaciones web y empresariales.</li> <li>Ventaja: Flexible y extensible; puede ser interpretado por muchos sistemas.</li> <li>Desventaja: La sintaxis es verbosa y puede ser dif\u00edcil de manejar en documentos muy grandes.</li> </ul> <pre><code>&lt;book&gt;\n  &lt;title&gt;XML Developer's Guide&lt;/title&gt;\n  &lt;author&gt;Jane Doe&lt;/author&gt;\n  &lt;price&gt;44.95&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>"},{"location":"ud1/#35-markdown","title":"3.5. Markdown","text":"<p>Markdown es un lenguaje de marcas ligero creado para ser f\u00e1cil de leer y escribir. Est\u00e1 dise\u00f1ado para ser convertido r\u00e1pidamente a HTML u otros formatos, lo que lo hace ideal para la redacci\u00f3n de textos simples con formato. Es com\u00fanmente usado en documentaci\u00f3n de software, blogs y foros.</p> <ul> <li>Uso t\u00edpico: Blogs, documentaci\u00f3n t\u00e9cnica, generaci\u00f3n de HTML simple.</li> <li>Ventaja: Sencillo y r\u00e1pido de escribir, alta legibilidad.</li> <li>Desventaja: No es adecuado para documentos complejos o con muchos estilos avanzados.</li> </ul> <pre><code># This is a title\nThis is a paragraph with **bold** and *italic* text.\n</code></pre>"},{"location":"ud1/#36-latex","title":"3.6. LaTeX","text":"<p>LaTeX es un sistema de composici\u00f3n tipogr\u00e1fica utilizado principalmente en entornos acad\u00e9micos y cient\u00edficos. Es ideal para crear documentos con f\u00f3rmulas matem\u00e1ticas complejas, bibliograf\u00edas y tablas de contenido automatizadas. Aunque tiene una curva de aprendizaje m\u00e1s pronunciada, ofrece un control fino sobre la presentaci\u00f3n de los documentos.</p> <ul> <li>Uso t\u00edpico: Publicaciones acad\u00e9micas, libros, informes cient\u00edficos.</li> <li>Ventaja: Excelente para documentos cient\u00edficos y matem\u00e1ticos.</li> <li>Desventaja: Curva de aprendizaje pronunciada; requiere compilaci\u00f3n.</li> </ul> <pre><code>\\documentclass{article}\n\\title{LaTeX Example}\n\\author{John Doe}\n\\begin{document}\n\\maketitle\n\\section{Introduction}\nThis is a paragraph in LaTeX.\n\\end{document}\n</code></pre>"},{"location":"ud1/#37-json-javascript-object-notation","title":"3.7. JSON (JavaScript Object Notation)","text":"<p>JSON es un formato ligero para el intercambio de datos entre servidores y aplicaciones web. Su estructura es sencilla, basada en pares de clave-valor, y est\u00e1 ampliamente utilizado en APIs y aplicaciones web debido a su compatibilidad con JavaScript.</p> <ul> <li>Uso t\u00edpico: Intercambio de datos entre servidores y aplicaciones web.</li> <li>Ventaja: Ligero, f\u00e1cil de interpretar por m\u00e1quinas y legible para humanos.</li> <li>Desventaja: No es adecuado para documentos muy complejos o con relaciones jer\u00e1rquicas profundas.</li> </ul> <pre><code>{\n  \"title\": \"JSON Example\",\n  \"author\": \"John Doe\",\n  \"published\": true\n}\n</code></pre>"},{"location":"ud1/#4-cuadro-resumen-comparativo","title":"4. Cuadro resumen comparativo","text":"Lenguaje Prop\u00f3sito Basado en \u00c1mbito de uso Sintaxis Ejemplo Ventajas Desventajas GML Estructurar documentos IBM Documentaci\u00f3n t\u00e9cnica B\u00e1sico <code>:title.General Markup</code> Simple, pionero de los lenguajes de marcas Limitado en flexibilidad y uso moderno SGML Definir otros lenguajes de marcas GML Documentaci\u00f3n compleja Complejo <code>&lt;document&gt;&lt;title&gt;SGML</code> Extremadamente flexible Complejo y dif\u00edcil de implementar HTML Estructurar p\u00e1ginas web SGML Web Etiquetas predef. <code>&lt;html&gt;&lt;body&gt;&lt;h1&gt;</code> Soporte universal en navegadores Necesita CSS y JavaScript para ser funcional XML Estructurar e intercambiar datos SGML Almacenamiento, intercambio Flexible <code>&lt;book&gt;&lt;title&gt;XML Guide&lt;/title&gt;</code> Extensible, universal para datos Verboso y dif\u00edcil de manejar en documentos grandes Markdown Escritura de texto con formato Independ. Documentaci\u00f3n, blogs Ligero <code># Title</code> Simple, legible, f\u00e1cil de convertir a HTML Limitado para documentos complejos LaTeX Composici\u00f3n de documentos TEX Publicaciones cient\u00edficas R\u00edgido <code>\\section{Introduction}</code> Excelente para matem\u00e1ticas y publicaciones formales Curva de aprendizaje pronunciada JSON Intercambio de datos Independ. Aplicaciones web, APIs Clave-valor <code>{ \"title\": \"JSON\" }</code> Ligero, f\u00e1cil de interpretar No apto para datos complejos con muchas relaciones ```"},{"location":"ud2/","title":"Introducci\u00f3n a HTML5","text":""},{"location":"ud2/#1-historia-de-html-y-evolucion-hacia-html5","title":"1. Historia de HTML y evoluci\u00f3n hacia HTML5","text":"<ul> <li>Origen de HTML (1990-1991): HTML (HyperText Markup Language) fue creado por Tim Berners-Lee, el padre de la World Wide Web. La primera versi\u00f3n fue muy b\u00e1sica, con un conjunto limitado de etiquetas que permit\u00edan estructurar contenido sencillo.</li> <li>Evoluci\u00f3n de HTML: A lo largo de los a\u00f1os, HTML evolucion\u00f3 para incluir nuevas funcionalidades como tablas, estilos, y formularios en HTML 3.2 y 4.01.</li> <li>La necesidad de HTML5:<ul> <li>Con el auge de la web multimedia y las aplicaciones interactivas, HTML4 se qued\u00f3 atr\u00e1s.</li> <li>Se necesitaba un lenguaje est\u00e1ndar que soportara video, audio y gr\u00e1ficos sin necesidad de plugins como Flash.</li> <li>HTML5 fue desarrollado por el W3C e introducido en 2008, con la meta de crear una web m\u00e1s sem\u00e1ntica, accesible y compatible con dispositivos m\u00f3viles.</li> </ul> </li> <li>Caracter\u00edsticas clave de HTML5:<ul> <li>Soporte multimedia nativo (audio y video).</li> <li>Nuevas APIs, como Canvas para gr\u00e1ficos 2D, Web Storage y Geolocation.</li> <li>Mayor \u00e9nfasis en la sem\u00e1ntica del contenido con nuevas etiquetas.</li> </ul> </li> </ul>"},{"location":"ud2/#2-estructura-basica-de-un-documento-html5","title":"2. Estructura b\u00e1sica de un documento HTML5","text":"<ul> <li>DOCTYPE: El documento HTML5 comienza con <code>&lt;!DOCTYPE html&gt;</code>, que le indica al navegador que debe interpretar el documento como HTML5.</li> <li>Etiquetas principales:<ul> <li><code>&lt;html&gt;</code>: Elemento ra\u00edz que envuelve todo el contenido.</li> <li><code>&lt;head&gt;</code>: Contiene metadatos sobre el documento (como el t\u00edtulo, enlaces a hojas de estilo, meta descripciones, etc.).</li> <li><code>&lt;meta charset=\"UTF-8\"&gt;</code>: Para definir la codificaci\u00f3n de caracteres del documento (UTF-8 es el est\u00e1ndar recomendado).</li> <li><code>&lt;title&gt;</code>: Define el t\u00edtulo que se muestra en la pesta\u00f1a del navegador.</li> <li><code>&lt;body&gt;</code>: Contiene el contenido visible para el usuario (texto, im\u00e1genes, videos, etc.).</li> </ul> </li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html lang=\"es\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n        &lt;title&gt;Mi primer documento HTML5&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\u00a1Hola, Mundo!&lt;/h1&gt;\n        &lt;p&gt;Este es un documento b\u00e1sico en HTML5.&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>"},{"location":"ud2/#3-etiquetas-basicas-en-html5","title":"3. Etiquetas b\u00e1sicas en HTML5","text":""},{"location":"ud2/#31-etiquetas-de-encabezado-y-parrafo","title":"3.1. Etiquetas de encabezado y p\u00e1rrafo","text":"<ul> <li><code>&lt;h1&gt;</code> a <code>&lt;h6&gt;</code>: Para definir t\u00edtulos y subt\u00edtulos en el documento.<ul> <li><code>&lt;h1&gt;</code> es el nivel m\u00e1s importante y <code>&lt;h6&gt;</code> el menos importante.</li> </ul> </li> <li><code>&lt;p&gt;</code>: Para definir p\u00e1rrafos de texto.</li> </ul>"},{"location":"ud2/#32-etiquetas-de-contenido-en-bloque-y-en-linea","title":"3.2. Etiquetas de contenido en bloque y en l\u00ednea","text":"<ul> <li>Contenido en bloque:<ul> <li><code>&lt;div&gt;</code>: Un contenedor gen\u00e9rico para contenido en bloque.</li> <li><code>&lt;section&gt;</code>: Agrupa contenido tem\u00e1tico relacionado.</li> <li><code>&lt;article&gt;</code>: Para contenido independiente que podr\u00eda ser reutilizado, como una publicaci\u00f3n de blog.</li> <li><code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;nav&gt;</code>: Partes estructurales de una p\u00e1gina web.</li> </ul> </li> <li>Contenido en l\u00ednea:<ul> <li><code>&lt;span&gt;</code>: Un contenedor gen\u00e9rico para contenido en l\u00ednea.</li> <li><code>&lt;a href=\"#\"&gt;</code>: Enlaces que permiten la navegaci\u00f3n entre p\u00e1ginas.</li> <li>Etiquetas de estilo en l\u00ednea: <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;mark&gt;</code>, <code>&lt;code&gt;</code> para marcar texto con importancia, \u00e9nfasis, resaltado o c\u00f3digo fuente.</li> </ul> </li> </ul>"},{"location":"ud2/#33-listas","title":"3.3. Listas","text":"<ul> <li>Listas ordenadas (<code>&lt;ol&gt;</code>) y no ordenadas (<code>&lt;ul&gt;</code>) con elementos de lista (<code>&lt;li&gt;</code>).</li> </ul>"},{"location":"ud2/#34-imagenes-y-multimedia","title":"3.4. Im\u00e1genes y multimedia","text":"<ul> <li><code>&lt;img src=\"ruta\" alt=\"descripci\u00f3n\"&gt;</code>: Inserta una imagen.</li> <li><code>&lt;video&gt;</code> y <code>&lt;audio&gt;</code>: Etiquetas para incorporar multimedia nativa, sin necesidad de plugins.<ul> <li>Ejemplo de video: <code>html &lt;video controls&gt;     &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;     Tu navegador no soporta la etiqueta video. &lt;/video&gt;</code></li> </ul> </li> </ul>"},{"location":"ud2/#35-formularios","title":"3.5. Formularios","text":"<ul> <li>El uso de formularios es esencial para la interacci\u00f3n del usuario.<ul> <li><code>&lt;form&gt;</code>: Contenedor del formulario.</li> <li><code>&lt;input type=\"text\"&gt;</code>, <code>&lt;input type=\"email\"&gt;</code>, <code>&lt;input type=\"submit\"&gt;</code>: Campos de entrada de datos.</li> <li><code>&lt;label&gt;</code>: Para etiquetar los campos de entrada.</li> </ul> </li> </ul> <p>```html  Nombre: </p> <p>```</p>"},{"location":"ud2/#36-tablas-en-html5","title":"3.6. Tablas en HTML5","text":"<p>Las tablas permiten organizar datos en filas y columnas. Aunque no se recomienda para la maquetaci\u00f3n de p\u00e1ginas, siguen siendo \u00fatiles para mostrar datos tabulares.</p> <ul> <li><code>&lt;table&gt;</code>: Elemento contenedor de la tabla.</li> <li><code>&lt;thead&gt;</code>: Agrupa el encabezado de la tabla.</li> <li><code>&lt;tbody&gt;</code>: Agrupa el cuerpo de la tabla.</li> <li><code>&lt;tr&gt;</code>: Define una fila en la tabla.</li> <li><code>&lt;th&gt;</code>: Define una celda de encabezado (por defecto en negrita y centrada).</li> <li><code>&lt;td&gt;</code>: Define una celda de datos en la tabla.</li> </ul> <p>Ejemplo b\u00e1sico de tabla:</p> <p>```html   Nombre Edad Ciudad Juan 25 Madrid Ana 30 Barcelona </p> <p>```</p> <ul> <li>Atributos importantes:<ul> <li><code>border</code>: Define el grosor del borde de la tabla. (En HTML5 se recomienda usar CSS para manejar estilos).</li> <li><code>colspan</code>: Hace que una celda se extienda por varias columnas.</li> <li><code>rowspan</code>: Hace que una celda se extienda por varias filas.</li> </ul> </li> </ul> <p>Ejemplo con <code>colspan</code> y <code>rowspan</code>:</p> <p>```html   Producto Precio Cantidad Manzanas 1.00\u20ac 10 Peras 1.50\u20ac Total 20\u20ac </p> <p>```</p> <ul> <li>Accesibilidad en tablas:<ul> <li>Utiliza los atributos <code>scope=\"col\"</code> o <code>scope=\"row\"</code> en las celdas de encabezado (<code>&lt;th&gt;</code>) para mejorar la accesibilidad y ayudar a los lectores de pantalla a interpretar mejor la tabla.</li> <li>Ejemplo:   ```html  Nombre Edad Ciudad Juan 25 Madrid </li> </ul> </li> </ul> <p>```</p>"},{"location":"ud2/#4-html5-semantico-un-enfoque-hacia-la-accesibilidad-y-seo","title":"4. HTML5 Sem\u00e1ntico: Un enfoque hacia la accesibilidad y SEO","text":"<ul> <li>La introducci\u00f3n de etiquetas sem\u00e1nticas en HTML5 mejora la accesibilidad para lectores de pantalla y optimiza el SEO.<ul> <li><code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;nav&gt;</code>: Ayudan a estructurar mejor el contenido, proporcionando informaci\u00f3n clara sobre su funci\u00f3n.</li> </ul> </li> <li>Beneficios de las etiquetas sem\u00e1nticas:<ul> <li>Mejoran la comprensi\u00f3n del contenido por parte de los motores de b\u00fasqueda.</li> <li>Facilitan la lectura del c\u00f3digo por otros desarrolladores.</li> <li>Mejoran la accesibilidad para usuarios con discapacidades.</li> </ul> </li> </ul>"},{"location":"ud2/#recursos-complementarios","title":"Recursos complementarios","text":"<ul> <li>Documentaci\u00f3n oficial de HTML5 (MDN Web Docs)</li> <li>W3C HTML5 Specification</li> <li>HTML5 by Manz</li> </ul> <p>Ejemplos y ejercicios pr\u00e1cticos: Crear una p\u00e1gina HTML b\u00e1sica que incluya un formulario de contacto, un art\u00edculo con im\u00e1genes y videos, y una lista de tareas.</p>"},{"location":"ud2/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la Learn HTML by Building a Cat Photo App  de freeCodeCamp.</p>"},{"location":"ud3/","title":"UD3 - User-Defined Structures","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>JavaScript Fundamentals</p> <ul> <li>Functions</li> <li>Function expressions</li> <li>Arrow functions, the basics</li> <li>JavaScript specials</li> </ul> <p>Data types</p> <ul> <li>Methods of primitives</li> <li>Numbers</li> <li>Strings</li> <li>Arrays</li> <li>Array methods</li> <li>Iterables</li> <li>Map and Set</li> <li>Object.keys, values, entries</li> <li>Destructuring assignment</li> <li>Date and time</li> <li>JSON methods, toJSON</li> </ul> <p>Objects: the basics</p> <ul> <li>Objects</li> <li>Object references and copying</li> <li>Object methods, \"this\"</li> <li>Constructor, operator \"new\"</li> </ul> <p>Object properties configuration</p> <ul> <li>Property getters and setters</li> </ul> <p>Classes</p> <ul> <li>Class basic syntax</li> <li>Class inheritance</li> <li>Static properties and methods</li> <li>Private and protected properties and methods</li> </ul>"},{"location":"ud3/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Basic String and Array Methods by Building a Music Player</li> <li>Learn the Date Object by Building a Date Formatter</li> <li>Learn Advanced Array Methods by Building a Statistics Calculator</li> <li>Learn Basic OOP by Building a Shopping Cart</li> </ul>"},{"location":"ud4/","title":"UD4 - DOM manipulation and events","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>Document</p> <ul> <li>Browser environment, specs</li> <li>DOM tree</li> <li>Walking the DOM</li> <li>Searching: getElement, querySelector</li> <li>Node properties: type, tag and contents</li> <li>Attributes and properties</li> <li>Modifying the document</li> <li>Styles and classes</li> <li>Element size and scrolling</li> <li>Window sizes and scrolling</li> <li>Coordinates</li> </ul> <p>Introduction to Events</p> <ul> <li>Introduction to browser events</li> <li>Bubbling and capturing</li> <li>Event delegation</li> <li>Browser default actions</li> <li>Dispatching custom events</li> </ul> <p>UI Events</p> <ul> <li>Mouse events</li> <li>Moving the mouse: mouseover/out, mouseenter/leave</li> <li>Drag'n'Drop with mouse events</li> <li>Pointer events</li> <li>Keyboard: keydown and keyup</li> <li>Scrolling</li> </ul> <p>Forms, controls</p> <ul> <li>Form properties and methods</li> <li>Focusing: focus/blur</li> <li>Events: change, input, cut, copy, paste</li> <li>Forms: event and method submit</li> </ul> <p>Regular expressions</p> <p>Document and resource loading</p> <ul> <li>Page: DOMContentLoaded, load, beforeunload, unload, beforeunload, unload</li> <li>Scripts: async, defer</li> <li>Resource loading: onload and onerror</li> </ul> <p>Storing data in the browser</p> <ul> <li>Cookies, document.cookie</li> <li>LocalStorage, sessionStorage</li> <li>IndexedDB</li> </ul> <p>Error handling</p> <ul> <li>Error handling, \"try...catch\"</li> <li>Custom errors, extending Error</li> </ul> <p>Promises</p> <ul> <li>Introduction: callbacks</li> <li>Promise</li> <li>Promises chaining</li> <li>Error handling with promises</li> <li>Promise API</li> <li>Promisification</li> <li>Async/await</li> </ul> <p>Network requests</p> <ul> <li>Fetch</li> <li>FormData</li> <li>Fetch: Download progress</li> <li>Fetch: Abort</li> <li>Fetch: Cross-Origin Requests</li> <li>Fetch API</li> <li>URL objects</li> <li>XMLHttpRequest</li> </ul>"},{"location":"ud4/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Form Validation by Building a Calorie Counter</li> <li>Learn Regular Expressions by Building a Spam Filter</li> <li>Review DOM Manipulation by Building a Rock, Paper, Scissors Game</li> <li>Learn localStorage by Building a Todo App</li> <li>Learn Fetch and Promises by Building an fCC Authors Page,</li> <li>Learn Asynchronous Programming by Building an fCC Forum Leaderboard</li> </ul>"},{"location":"ud5.1-Empezando-con-React/","title":"Empezando con React","text":"<p>Vamos, en primer lugar, antes de empezar con nuestros proyectos de clase, a hacer varios cursos que nos van a servir para introducirnos en estas nuevas tecnolog\u00edas. </p>"},{"location":"ud5.1-Empezando-con-React/#introduccion-a-react","title":"Introducci\u00f3n a React","text":"<p>En primer lugar empezaremos por este curso introductorio de React, en el cual aprenderemos c\u00f3mo crear diferentes tipos de componentes de React.</p>"},{"location":"ud5.1-Empezando-con-React/#introduccion-a-redux","title":"Introducci\u00f3n a Redux","text":"<p>A medida que las aplicaciones crecen en tama\u00f1o y alcance, la gesti\u00f3n de datos compartidos se vuelve mucho m\u00e1s dif\u00edcil. Redux es un \"contenedor de estados\" que ayuda a que nuestras aplicaciones funcionen de manera predecible y que sean m\u00e1s f\u00e1ciles de probar.</p> <p>Vamos ahora a aprender algo de redux mediante este curso, aprenderemos los fundamentos de Redux para administrar datos en toda su aplicaci\u00f3n.</p>"},{"location":"ud5.1-Empezando-con-React/#react-y-redux","title":"React y Redux","text":"<p>Ahora que sabemos c\u00f3mo administrar el flujo de datos compartidos con Redux, es hora de combinar ese conocimiento con React. En \u00e9ste curso de freecodecamp vamos a crear un componente de React y administraremos el estado localmente a nivel de componente y en toda la aplicaci\u00f3n con Redux.</p>"},{"location":"ud5.2-Paso-a-paso/","title":"Paso a paso con React","text":"<p>En la documentaci\u00f3n oficial de React encontraremos toda la informaci\u00f3n de la librer\u00eda, y adem\u00e1s, algunos tutoriales muy interesantes. Uno de los recursos de obligada visita es su gu\u00eda de inicio r\u00e1pido.</p>"},{"location":"ud5.2-Paso-a-paso/#otros-materiales","title":"Otros materiales","text":"<p>A parte de lo anteriormente visto, estaremos usando mas funcionalidades, dejamos por aqu\u00ed algunos enlaces que estar\u00eda bien ir revisando a estas alturas:</p> <ul> <li>React Routing Guide</li> <li>Redux</li> <li>React Redux</li> <li>Redux Dev Tools</li> </ul>"},{"location":"ud5/","title":"UD5 - React.js","text":"<p>React es sin duda una de las tecnolog\u00edas web m\u00e1s revolucionarias de la actualidad, fue lanzado por primera vez en 2013 por Facebook y es actualmente mantenido por ellos mismo y la comunidad de c\u00f3digo abierto, la cual se extiende alrededor del mundo.</p> <p>React, a diferencia de muchas tecnolog\u00edas del desarrollo web, es una librer\u00eda lo que lo hace mucho m\u00e1s f\u00e1cil de implementar en muchos desarrollos, ya que se encarga exclusivamente de la interfaz gr\u00e1fica del usuario y consume los datos a trav\u00e9s de API que por lo general son REST.</p> <p>El nombre de React proviene de su capacidad de crear interfaces de usuario reactivas, la cual es la capacidad de una aplicaci\u00f3n para actualizar toda la interfaz gr\u00e1fica en cadena, como si se tratara de una f\u00f3rmula en Excel, donde al cambiar el valor de una celda autom\u00e1ticamente actualiza todas las celdas que depende del valor actualizado y esto se repite con las celdas que a la vez depend\u00eda de estas \u00faltimas.</p>"},{"location":"ud5/#como-funciona-react","title":"C\u00f3mo funciona React","text":"<p>React nos permite crear la interfaz UI mediante una sintaxis propia llamada Javascript XML (JSX) el cual es una mezcla entre XML y HTML que permite la construcci\u00f3n de elementos HTML de una forma muy simple y r\u00e1pida.</p> <p>Las aplicaciones desarrolladas mediante JSX no pueden ser interpretadas por el navegador, por lo que es requerido que todo el c\u00f3digo sea convertido a Javascript nativo mediante un proceso llamado transpilaci\u00f3n, el cual es parecido a la compilaci\u00f3n, pero en este proceso no se lleva a cabo una compilaci\u00f3n como tal, sino que el c\u00f3digo es convertido de JSX a Javascript.</p> <p>Este proceso es llevado a cabo mediante herramientas como Webpack el cual es el m\u00e1s ampliamente utilizado.</p> <p> </p> <p>Como vemos en la imagen, Webpack es en realidad un empaquetador, el cual organiza, compacta y mediante plugins como Babel realiza la transpilaci\u00f3n, arrojando como resultado una serie de archivos compactos y listos para ser utilizados.</p>"},{"location":"ud5/#react-y-el-backend","title":"React y el Backend","text":"<p>React solo sirve para la creaci\u00f3n de interfaz gr\u00e1fica, por lo que el desarrollo del backend queda fuera de React y es precisamente eso lo que lo hace una librer\u00eda super portable, ya que la podemos integrar con cualquier API ya desarrollada.</p> <p>C\u00f3mo React no es capaz de resolver la parte del backend es necesario desarrollar el API de datos mediante otras tecnolog\u00edas como NodeJS, el cual es por lo general el servidor m\u00e1s utilizado para el desarrollo con React.</p> <p>El API es consumido mediante AJAX a medida que la aplicaci\u00f3n lo demanda.</p> <p> </p>"},{"location":"ud5/#react-y-web-components","title":"React y Web Components","text":"<p>React utiliza un concepto llamado Web Componentes, el cual es la creaci\u00f3n de tus propias etiquetas de HTML para representar tus componentes. Te imaginas crear un login en tu p\u00e1gina utilizando una etiqueta como esta &lt;login&gt;, pues esta forma de trabajar es la que propone React, donde todo lo que desarrollemos sean componentes que puedan ser reutilizables cuantas veces queramos, incluso podr\u00e1n ser empaquetadas como librer\u00edas para que las utilices en diferentes desarrollos. Esto lo puedes ver como si cada componente fuera una peque\u00f1a caja, y lo \u00fanico que tenemos que hacer es colocar las cajas donde la necesitemos.</p> <p> </p> <p>Como podemos ver en la imagen, cada parte de la aplicaci\u00f3n puede ser un componente (etiqueta) el cual solo se tiene que agregar a la p\u00e1gina para crear interfaces gr\u00e1ficas mucho m\u00e1s r\u00e1pido. Ahora veamos c\u00f3mo quedar\u00eda esta misma p\u00e1gina, pero en c\u00f3digo con React:</p> <pre><code>import React from 'react'\nimport NavBar from './NavBar'\nimport Login from './Login'\nimport Footer from './Footer'\nclass LoginApp extends React.Component{\n  render(){\n    return(\n    &lt;div&gt;\n        &lt;NavBar/&gt;\n        &lt;Login/&gt;\n        &lt;Footer/&gt;\n    &lt;/div&gt;\n    )\n  }\n}\n</code></pre> <p>Observemos que estamos utilizando las etiquetas como NavBar y Login,  las cuales no son propias de HTML.</p>"},{"location":"ud5/#react-y-el-shadow-dom","title":"React y el Shadow DOM","text":"<p>Como se ha comentado anteriormente, React se ejecuta del lado de cliente, por lo que es esta misma la encargada de actualizar el DOM a medida que el usuario interact\u00faa con la UI, sin embargo, el proceso de actualizaci\u00f3n del DOM es un trabajo muy costoso para el navegador, por lo que actualizar el DOM cada vez que el usuario realiza una acci\u00f3n, no es una opci\u00f3n, es por esto que React provee un DOM propio llamado Shadow DOM el cual es una versi\u00f3n del DOM sobre la cual React trabaja para realizar los cambios, y una vez que calcula todos los cambios que hay que realizar es solo entonces cuando actualiza el DOM del navegador. </p> <p>Este proceso es en realidad muy complejo y React se encarga por completo de su gesti\u00f3n, por lo que como programadores no hace falta preocuparnos por estos detalles en la mayor\u00eda de las veces.</p> <p> </p> <p>Cuando se realiza un cambio en el Shadow DOM, este se sincroniza con el DOM original y es necesario realizar un proceso llamado reconciliaci\u00f3n, el cual es el encargado de aplicar los cambios del Shadow DOM al DOM real.</p> <p> </p>"},{"location":"ud5/#react-y-los-estados","title":"React y los Estados","text":"<p>Una de las principales caracter\u00edsticas de React es que los componentes pueden mantener estados. Los estados le indican los datos que el componente muestra, e incluso el formato en se muestran.</p> <p>Por ejemplo, podemos tener un formulario, el cual tenga los estados de solo lectura y edici\u00f3n, en el primero, solo mostraremos los datos en texto plano, como un &lt;p&gt; o un &lt;span&gt; mientras que cuando el formulario est\u00e1 en estado de edici\u00f3n, podemos representar el formulario con &lt;imput type=\u201dtext\u201d /&gt;</p> <p>Cuando un componente por alguna raz\u00f3n modifica su estado, entra en lo que se le conoce como Dirty o Sucio, y esto le indica a React que debe de haber un proceso de reconciliaci\u00f3n para actualizar los datos en la UI. Como ya hablamos en hace un momento, React utiliza programaci\u00f3n Reactiva para actualizar los componentes, de tal forma, que cuando un componente es actualizado, todos los componentes hijos del \u00e1rbol DOM ser\u00e1n evaluados para determinar si deben de ser tambi\u00e9n actualizados.</p> <p> </p> <p>En la imagen podemos apreciar en rojo, los componentes que fueron actualizados por el usuario, por lo que React deber\u00e1 iniciar el proceso dereconciliaci\u00f3n para estos componentes, pero adicional, si este componente tiene componentes hijos, React deber\u00e1 determinar si los hijos necesitan ser tambi\u00e9n actualizados en cascada, a \u00e9ste proceso es a lo que se le conoce como programaci\u00f3n Reactiva.</p>"},{"location":"ud5/#deploy-de-react","title":"Deploy de React","text":"<p>Finalmente, React tiene una forma muy particular de ser cargado por el navegador, pues cuando el usuario entra a la p\u00e1gina, est\u00e1 solo tiene un elemento, sobre el cual react montar\u00e1 toda la aplicaci\u00f3n.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"/bundle.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Adicional del elemento root, se carga un JavaScript llamado bundle.js el cual es en realidad TODA LA APLICACI\u00d3N en un solo archivo, el cual es generado por Webpack tras ejecutar el proceso de transpilaci\u00f3n. Cuando el bundle.js se carga por completo, reemplaza el componente root por la aplicaci\u00f3n desarrollada en React.</p>"}]}