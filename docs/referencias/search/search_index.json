{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lenguajes de Marcas","text":""},{"location":"#bienvenidos-al-modulo-de-lenguajes-de-marcas-y-sistemas-de-gestion-de-la-informacion-del-ciclo-de-desarrollo-de-aplicaciones-web","title":"\u00a1Bienvenidos al m\u00f3dulo de Lenguajes de Marcas y Sistemas de Gesti\u00f3n de la Informaci\u00f3n del ciclo de Desarrollo de Aplicaciones Web!","text":"<p>Este curso est\u00e1 dise\u00f1ado para que adquieras las habilidades necesarias en el manejo de lenguajes de marcas y sistemas de gesti\u00f3n de informaci\u00f3n, los cuales son fundamentales en el desarrollo de aplicaciones web modernas. A lo largo del m\u00f3dulo, aprender\u00e1s c\u00f3mo estructurar, transmitir y presentar informaci\u00f3n utilizando tecnolog\u00edas clave como HTML, CSS, JSON, y JavaScript.</p>"},{"location":"#tabla-de-contenido","title":"Tabla de contenido","text":"<ul> <li>Unidad 1: Introducci\u00f3n a los lenguajes de marcas</li> </ul>"},{"location":"#referencias-web-generales","title":"Referencias web generales","text":"<p>El desarrollo de software est\u00e1 en constante evoluci\u00f3n, actualmente podemos observar como una avalancha de nuevas tendencias tecnol\u00f3gicas y metodolog\u00edas se va abriendo paso. Este es el motivo principal por el que la mayor parte de los apuntes proporcionados no son m\u00e1s que referencias web actuales a los temas que vamos a tratar.</p> <ul> <li>HTML5 by Manz</li> <li>SVG by Manz</li> <li>CSS by Manz</li> <li>Javascript by Manz</li> <li>DOM by Manz</li> <li>FreeCodeCamp</li> <li>developer.mozilla.org</li> <li>The Modern JavaScript Tutorial</li> <li>lenguajejs.com</li> <li>Javascript Cheatsheet</li> <li>Javascript notes By Majo Ledesma</li> </ul>"},{"location":"#que-vas-a-aprender","title":"\u00bfQu\u00e9 vas a aprender?","text":""},{"location":"#1-lenguajes-de-marcas","title":"1. Lenguajes de Marcas","text":"<p>Estudiar\u00e1s las caracter\u00edsticas fundamentales de los lenguajes de marcas como HTML y XML, los cuales permiten estructurar y almacenar informaci\u00f3n de manera eficiente. Te familiarizar\u00e1s con las diferentes versiones de estos lenguajes y c\u00f3mo aplicarlos en contextos reales, analizando la estructura de documentos y comprendiendo las ventajas que ofrecen en el manejo de la informaci\u00f3n.</p>"},{"location":"#2-creacion-de-documentos-web","title":"2. Creaci\u00f3n de Documentos Web","text":"<p>Aqu\u00ed te sumergir\u00e1s en la construcci\u00f3n de p\u00e1ginas web utilizando HTML5 para la estructura y CSS para la presentaci\u00f3n. Aprender\u00e1s a aplicar hojas de estilo que mejoren la apariencia de los sitios web, optimizando su dise\u00f1o para diferentes dispositivos y validando tanto el c\u00f3digo HTML como las hojas de estilo para cumplir con los est\u00e1ndares de la web.</p>"},{"location":"#3-programacion-con-javascript","title":"3. Programaci\u00f3n con JavaScript","text":"<p>Ver\u00e1s c\u00f3mo JavaScript te permite interactuar con las p\u00e1ginas web, manipulando el DOM (Document Object Model) para cambiar din\u00e1micamente el contenido, el estilo y la estructura de los documentos. Aprender\u00e1s a seleccionar, modificar y eliminar elementos de una p\u00e1gina web, as\u00ed como a hacer que estos cambios sean reactivos e interactivos.</p>"},{"location":"#4-validacion-de-documentos-con-json","title":"4. Validaci\u00f3n de Documentos con JSON","text":"<p>Uno de los formatos m\u00e1s populares para el intercambio de datos en la web es JSON (JavaScript Object Notation). Aprender\u00e1s a: - Describir y estructurar la informaci\u00f3n en formato JSON, utilizando objetos, arrays y pares clave-valor. - Validar documentos JSON mediante el uso de herramientas como JSON Schema, que te permitir\u00e1n asegurar que los datos recibidos cumplen con las reglas de estructura y tipos requeridos. - Aplicar JSON en APIs web, entendiendo c\u00f3mo se utiliza para transmitir informaci\u00f3n entre servidores y clientes en aplicaciones modernas.</p>"},{"location":"#5-hojas-de-estilo-css","title":"5. Hojas de Estilo CSS","text":"<p>Adem\u00e1s de aprender a estructurar p\u00e1ginas web con HTML, ver\u00e1s c\u00f3mo CSS te permite mejorar la presentaci\u00f3n visual de estas p\u00e1ginas. Aprender\u00e1s a aplicar estilos a los elementos HTML, a crear dise\u00f1os responsivos que se adapten a distintos dispositivos y a utilizar las \u00faltimas caracter\u00edsticas de CSS3 para animaciones, transiciones y otros efectos visuales avanzados.</p>"},{"location":"#por-que-es-importante","title":"\u00bfPor qu\u00e9 es importante?","text":"<p>El manejo adecuado de estos lenguajes es esencial para el desarrollo web profesional. Aprender\u00e1s no solo a crear p\u00e1ginas web est\u00e9ticamente atractivas, sino tambi\u00e9n a garantizar que la informaci\u00f3n que manejen sea clara, accesible y bien estructurada. Estas habilidades son clave para el desarrollo de aplicaciones modernas que interact\u00faan con datos y ofrecen experiencias din\u00e1micas y personalizadas para los usuarios.</p>"},{"location":"#herramientas-que-usaras","title":"Herramientas que usar\u00e1s:","text":"<ul> <li>HTML5 y CSS3: Para estructurar y dar estilo a las p\u00e1ginas web.</li> <li>JavaScript: Para hacer que las p\u00e1ginas sean din\u00e1micas e interactivas.</li> <li>JSON: Para el intercambio y validaci\u00f3n de datos entre aplicaciones.</li> <li>JSON Schema: Para garantizar que los datos cumplan con una estructura determinada.</li> </ul> <p>Al finalizar este curso, estar\u00e1s preparado para desarrollar aplicaciones web modernas que gestionen y presenten informaci\u00f3n de forma eficaz, aplicando las mejores pr\u00e1cticas de desarrollo y dise\u00f1o web.</p>"},{"location":"ud1/","title":"UD1","text":"<p>Claro, a continuaci\u00f3n te presento el tema completo sobre la Introducci\u00f3n a los Lenguajes de Marcas en formato Markdown, integrando una clasificaci\u00f3n m\u00e1s completa y extensa en el punto 2, as\u00ed como todos los dem\u00e1s contenidos detallados anteriormente.</p>"},{"location":"ud1/#tema-introduccion-a-los-lenguajes-de-marcas","title":"Tema: Introducci\u00f3n a los Lenguajes de Marcas","text":""},{"location":"ud1/#1-definicion-de-lenguajes-de-marcas","title":"1. Definici\u00f3n de Lenguajes de Marcas","text":"<p>Los lenguajes de marcas son un conjunto de reglas que se utilizan para anotar, etiquetar o marcar un texto de modo que defina tanto la estructura como la presentaci\u00f3n del contenido en el documento. El prop\u00f3sito principal de estos lenguajes es agregar sem\u00e1ntica y organizar la informaci\u00f3n para que pueda ser interpretada por diversos sistemas, como navegadores web, procesadores de texto, entre otros.</p> <p>En esencia, un lenguaje de marcas est\u00e1 compuesto por \"etiquetas\" o \"tags\" que se agrupan de manera jer\u00e1rquica para representar relaciones dentro de los datos.</p>"},{"location":"ud1/#2-clasificacion-de-los-lenguajes-de-marcas","title":"2. Clasificaci\u00f3n de los Lenguajes de Marcas","text":"<p>Los lenguajes de marcas pueden clasificarse de diversas maneras seg\u00fan diferentes criterios. A continuaci\u00f3n, se presenta una clasificaci\u00f3n m\u00e1s completa y detallada:</p>"},{"location":"ud1/#a-segun-su-proposito","title":"A. Seg\u00fan su Prop\u00f3sito","text":""},{"location":"ud1/#1-lenguajes-de-presentacion","title":"1. Lenguajes de Presentaci\u00f3n","text":"<p>Estos lenguajes est\u00e1n dise\u00f1ados principalmente para controlar c\u00f3mo se muestra la informaci\u00f3n, es decir, c\u00f3mo se formatea y visualiza un documento. No suelen preocuparse por el contenido en s\u00ed, sino por su apariencia final.</p> <ul> <li>HTML (HyperText Markup Language): El lenguaje de marcas m\u00e1s utilizado en la web para estructurar y presentar contenido visualmente. Aunque ha evolucionado para incluir elementos sem\u00e1nticos, su prop\u00f3sito principal sigue siendo la presentaci\u00f3n.</li> </ul> <p>Ejemplo de HTML:   ```html  Ejemplo HTML Encabezado <p>Este es un p\u00e1rrafo de ejemplo.</p> </p> <p>```</p> <ul> <li>CSS (Cascading Style Sheets): Aunque t\u00e9cnicamente no es un lenguaje de marcas, CSS complementa a HTML proporcionando control sobre el dise\u00f1o y formato visual de los documentos. CSS trabaja a nivel de presentaci\u00f3n para definir estilos como colores, m\u00e1rgenes y tipograf\u00edas.</li> </ul> <p>Ejemplo de CSS: <code>css   h1 {       color: blue;       font-size: 24px;   }   p {       color: black;       font-family: Arial, sans-serif;   }</code></p> <ul> <li>LaTeX: Utilizado principalmente en entornos acad\u00e9micos para producir documentos cient\u00edficamente precisos, como art\u00edculos y libros. En lugar de centrarse en la estructura de datos, LaTeX se enfoca en el formato del documento.</li> </ul> <p>Ejemplo de LaTeX: <code>latex   \\documentclass{article}   \\begin{document}   \\title{Introducci\u00f3n a LaTeX}   \\author{Jane Doe}   \\date{\\today}   \\maketitle   \\section{Introducci\u00f3n}   Este es un p\u00e1rrafo en LaTeX. Es conocido por su capacidad para manejar ecuaciones complejas:   \\[ E = mc^2 \\]   \\end{document}</code></p>"},{"location":"ud1/#2-lenguajes-de-datos","title":"2. Lenguajes de Datos","text":"<p>Estos lenguajes est\u00e1n dise\u00f1ados para estructurar, almacenar e intercambiar datos, en lugar de definir su apariencia visual. Generalmente se utilizan en aplicaciones que necesitan manipular informaci\u00f3n estructurada o datos jer\u00e1rquicos.</p> <ul> <li>XML (eXtensible Markup Language): XML es un lenguaje de marcas utilizado para definir reglas de formateo de datos de una manera legible para humanos y m\u00e1quinas. Es ampliamente utilizado en aplicaciones de intercambio de datos (web services, almacenamiento de configuraciones, etc.).</li> </ul> <p>Ejemplo de XML: <code>xml   &lt;libro&gt;       &lt;titulo&gt;Introducci\u00f3n a XML&lt;/titulo&gt;       &lt;autor&gt;John Doe&lt;/autor&gt;       &lt;publicado&gt;2024&lt;/publicado&gt;   &lt;/libro&gt;</code></p> <ul> <li>JSON (JavaScript Object Notation): JSON es un formato de intercambio de datos ligero que se utiliza principalmente para la comunicaci\u00f3n entre servidores y clientes web. A diferencia de XML, no es un lenguaje de marcas tradicional (no utiliza etiquetas), pero se clasifica como un formato de datos estructurado.</li> </ul> <p>Ejemplo de JSON: <code>json   {       \"titulo\": \"Introducci\u00f3n a JSON\",       \"autor\": \"Jane Doe\",       \"publicado\": 2024   }</code></p> <ul> <li>YAML (YAML Ain\u2019t Markup Language): YAML es un formato de serializaci\u00f3n de datos que es muy legible y ampliamente utilizado para archivos de configuraci\u00f3n, especialmente en entornos DevOps y de infraestructura como c\u00f3digo.</li> </ul> <p>Ejemplo de YAML: <code>yaml   libro:     titulo: \"Introducci\u00f3n a YAML\"     autor: \"John Doe\"     publicado: 2024</code></p>"},{"location":"ud1/#b-segun-su-estructura","title":"B. Seg\u00fan su Estructura","text":""},{"location":"ud1/#1-lenguajes-de-marcas-jerarquicos","title":"1. Lenguajes de Marcas Jer\u00e1rquicos","text":"<p>Organizan la informaci\u00f3n en una estructura de \u00e1rbol, donde los elementos se anidan dentro de otros elementos, permitiendo una organizaci\u00f3n jer\u00e1rquica.</p> <ul> <li>SGML (Standard Generalized Markup Language): Es un metalinguaje que permite definir lenguajes de marcas personalizados con una estructura jer\u00e1rquica. Tanto HTML como XML derivan de SGML.</li> </ul> <p>Ejemplo de SGML:   ```sgml   </p> <p> Introducci\u00f3n a SGML John Doe    ```</p> <ul> <li>XML (eXtensible Markup Language): Tambi\u00e9n pertenece a esta categor\u00eda, ya que organiza los datos en una estructura de \u00e1rbol con elementos padres e hijos.</li> </ul>"},{"location":"ud1/#2-lenguajes-de-marcas-lineales","title":"2. Lenguajes de Marcas Lineales","text":"<p>No tienen una estructura jer\u00e1rquica expl\u00edcita, sino que est\u00e1n dise\u00f1ados para ser le\u00eddos de principio a fin de manera secuencial.</p> <ul> <li>Markdown: Markdown es un lenguaje de marcado ligero dise\u00f1ado para ser legible como texto plano. Se utiliza ampliamente para la creaci\u00f3n de documentaci\u00f3n, como README en proyectos de software.</li> </ul> <p>Ejemplo de Markdown: <code>markdown   # T\u00edtulo del Documento   Este es un p\u00e1rrafo en Markdown. **Texto en negrita** y *texto en cursiva*.</code></p>"},{"location":"ud1/#c-segun-su-ambito-de-aplicacion","title":"C. Seg\u00fan su \u00c1mbito de Aplicaci\u00f3n","text":""},{"location":"ud1/#1-lenguajes-de-proposito-general","title":"1. Lenguajes de Prop\u00f3sito General","text":"<p>Estos lenguajes pueden ser utilizados en una amplia variedad de aplicaciones y contextos.</p> <ul> <li> <p>SGML: Es un lenguaje de prop\u00f3sito general para definir otros lenguajes de marcas, con aplicaciones en industrias como la edici\u00f3n, documentaci\u00f3n t\u00e9cnica y bibliotecas digitales.</p> </li> <li> <p>XML: XML es altamente flexible y puede usarse para representar y transmitir datos en pr\u00e1cticamente cualquier aplicaci\u00f3n, desde configuraciones de software hasta intercambios de datos entre servicios web.</p> </li> </ul>"},{"location":"ud1/#2-lenguajes-de-proposito-especifico","title":"2. Lenguajes de Prop\u00f3sito Espec\u00edfico","text":"<p>Estos lenguajes est\u00e1n dise\u00f1ados para resolver problemas o necesidades espec\u00edficas, como formatear documentos acad\u00e9micos, generar informes o facilitar la edici\u00f3n colaborativa de contenidos.</p> <ul> <li> <p>LaTeX: Aunque puede ser usado para una variedad de documentos, su aplicaci\u00f3n se enfoca en la producci\u00f3n de textos acad\u00e9micos, especialmente aquellos que incluyen f\u00f3rmulas matem\u00e1ticas complejas.</p> </li> <li> <p>HTML: Est\u00e1 especializado en la creaci\u00f3n y presentaci\u00f3n de documentos para la web. Su estructura est\u00e1 optimizada para ser interpretada por navegadores web.</p> </li> <li> <p>SMIL (Synchronized Multimedia Integration Language): Un lenguaje de marcas que se utiliza para describir presentaciones multimedia, espec\u00edfico para la sincronizaci\u00f3n de contenido audiovisual.</p> </li> </ul> <p>Ejemplo de SMIL: <code>smil   &lt;smil&gt;     &lt;head&gt;       &lt;layout&gt;         &lt;root-layout width=\"800px\" height=\"600px\"/&gt;       &lt;/layout&gt;     &lt;/head&gt;     &lt;body&gt;       &lt;audio src=\"audio.mp3\" /&gt;       &lt;video src=\"video.mp4\" /&gt;     &lt;/body&gt;   &lt;/smil&gt;</code></p>"},{"location":"ud1/#d-segun-su-flexibilidad","title":"D. Seg\u00fan su Flexibilidad","text":""},{"location":"ud1/#1-lenguajes-de-marcas-extensibles","title":"1. Lenguajes de Marcas Extensibles","text":"<p>Permiten la creaci\u00f3n de nuevas etiquetas o la extensi\u00f3n del conjunto de etiquetas b\u00e1sicas para ajustarse a diferentes necesidades.</p> <ul> <li> <p>XML: Es el ejemplo cl\u00e1sico de un lenguaje extensible, ya que permite a los usuarios definir sus propias etiquetas seg\u00fan el contexto de la aplicaci\u00f3n.</p> </li> <li> <p>SGML: Tambi\u00e9n es extensible, permitiendo la definici\u00f3n de nuevos lenguajes de marcas derivados.</p> </li> </ul>"},{"location":"ud1/#2-lenguajes-de-marcas-fijos","title":"2. Lenguajes de Marcas Fijos","text":"<p>Tienen un conjunto fijo de etiquetas que no pueden ser extendidas por los usuarios.</p> <ul> <li>HTML: Aunque HTML ha evolucionado a lo largo del tiempo (de HTML 1.0 a HTML5), los desarrolladores no pueden agregar etiquetas personalizadas como se puede en XML o SGML. Deben ce\u00f1irse al conjunto de etiquetas definidas por el est\u00e1ndar.</li> </ul>"},{"location":"ud1/#e-segun-el-nivel-de-abstraccion","title":"E. Seg\u00fan el Nivel de Abstracci\u00f3n","text":""},{"location":"ud1/#1-lenguajes-de-bajo-nivel","title":"1. Lenguajes de Bajo Nivel","text":"<p>Ofrecen poco nivel de abstracci\u00f3n y est\u00e1n m\u00e1s cerca de la representaci\u00f3n f\u00edsica de los datos.</p> <ul> <li>PostScript: Aunque no es estrictamente un lenguaje de marcas en el sentido moderno, PostScript es un lenguaje de descripci\u00f3n de p\u00e1ginas utilizado en impresi\u00f3n, donde los detalles de la presentaci\u00f3n est\u00e1n muy vinculados al dispositivo de salida.</li> </ul>"},{"location":"ud1/#2-lenguajes-de-alto-nivel","title":"2. Lenguajes de Alto Nivel","text":"<p>Ofrecen un mayor nivel de abstracci\u00f3n, permitiendo a los usuarios centrarse en el contenido en lugar de los detalles t\u00e9cnicos de su representaci\u00f3n.</p> <ul> <li> <p>HTML: Es un lenguaje de alto nivel, ya que los desarrolladores no necesitan preocuparse por c\u00f3mo el navegador renderiza los elementos visuales en pantalla.</p> </li> <li> <p>LaTeX: Es un lenguaje de alto nivel para la creaci\u00f3n de documentos cient\u00edficos, donde el usuario se centra en la estructura del documento, dejando los detalles tipogr\u00e1ficos al motor de LaTeX.</p> </li> </ul>"},{"location":"ud1/#f-otros-criterios-de-clasificacion","title":"F. Otros Criterios de Clasificaci\u00f3n","text":""},{"location":"ud1/#1-lenguajes-basados-en-texto-vs-basados-en-etiquetas","title":"1. Lenguajes Basados en Texto vs. Basados en Etiquetas","text":"<ul> <li> <p>Basados en Etiquetas: Utilizan etiquetas para marcar el inicio y el fin de elementos, como HTML y XML.</p> </li> <li> <p>Basados en Texto: Utilizan s\u00edmbolos o convenciones de texto para definir la estructura, como Markdown.</p> </li> </ul>"},{"location":"ud1/#2-lenguajes-estaticos-vs-dinamicos","title":"2. Lenguajes Est\u00e1ticos vs. Din\u00e1micos","text":"<ul> <li> <p>Est\u00e1ticos: La estructura del documento no cambia din\u00e1micamente, como HTML y LaTeX.</p> </li> <li> <p>Din\u00e1micos: Permiten la manipulaci\u00f3n y modificaci\u00f3n de la estructura de datos en tiempo real, como JSON utilizado en aplicaciones web interactivas.</p> </li> </ul>"},{"location":"ud1/#3-historia-y-evolucion-de-los-lenguajes-de-marcas","title":"3. Historia y Evoluci\u00f3n de los Lenguajes de Marcas","text":"<p>Los lenguajes de marcas han evolucionado con el tiempo para adaptarse a nuevas necesidades tecnol\u00f3gicas y de presentaci\u00f3n de datos.</p>"},{"location":"ud1/#a-gml-generalized-markup-language","title":"A. GML (Generalized Markup Language)","text":"<p>Desarrollado por IBM en los a\u00f1os 60, GML permiti\u00f3 el uso de etiquetas personalizadas para definir la estructura de los documentos. Este lenguaje no estaba limitado a un conjunto espec\u00edfico de etiquetas, lo que permit\u00eda una gran flexibilidad. Sin embargo, su falta de est\u00e1ndares llev\u00f3 a la creaci\u00f3n de SGML.</p> <p>Ejemplo de c\u00f3digo GML:</p> <pre><code>:h1. T\u00edtulo del Documento.\n:p. Este es un p\u00e1rrafo en GML.\n</code></pre> <p>En este ejemplo, las etiquetas <code>:h1.</code> y <code>:p.</code> se utilizan para marcar el t\u00edtulo y el p\u00e1rrafo respectivamente, sin una estructura formal o reglas estrictas como las que conocemos hoy en d\u00eda en otros lenguajes.</p>"},{"location":"ud1/#b-sgml-standard-generalized-markup-language","title":"B. SGML (Standard Generalized Markup Language)","text":"<p>SGML es un est\u00e1ndar internacional (ISO 8879) para definir lenguajes de marcas. Es un metalinguaje, lo que significa que proporciona un conjunto de reglas para definir otros lenguajes de marcas. Su flexibilidad le permiti\u00f3 ser usado en una amplia gama de aplicaciones, desde documentaci\u00f3n t\u00e9cnica hasta bibliotecas digitales.</p> <p>Ejemplo de c\u00f3digo SGML:</p> <pre><code>&lt;!DOCTYPE libro SYSTEM \"libro.dtd\"&gt;\n&lt;libro&gt;\n    &lt;titulo&gt;Introducci\u00f3n a SGML&lt;/titulo&gt;\n    &lt;capitulo&gt;\n        &lt;titulo&gt;Cap\u00edtulo 1: Historia&lt;/titulo&gt;\n        &lt;parrafo&gt;Este es un p\u00e1rrafo de ejemplo en SGML.&lt;/parrafo&gt;\n    &lt;/capitulo&gt;\n&lt;/libro&gt;\n</code></pre> <p>El DTD (Document Type Definition) en SGML define la estructura de los documentos, similar a un esquema en XML.</p>"},{"location":"ud1/#c-html-hypertext-markup-language","title":"C. HTML (HyperText Markup Language)","text":"<p>HTML es el lenguaje de marcas est\u00e1ndar utilizado para crear p\u00e1ginas web. Fue desarrollado a principios de los 90 por Tim Berners-Lee. A diferencia de SGML, HTML es mucho m\u00e1s sencillo y tiene un conjunto limitado de etiquetas que est\u00e1n enfocadas en estructurar contenido web.</p> <p>HTML ha pasado por varias versiones, siendo HTML5 la versi\u00f3n actual, que incluye mejoras para el manejo de multimedia, formularios y gr\u00e1ficos.</p> <p>Ejemplo de c\u00f3digo HTML:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;P\u00e1gina HTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Encabezado Principal&lt;/h1&gt;\n    &lt;p&gt;Este es un p\u00e1rrafo en HTML con una &lt;a href=\"#\"&gt;enlace&lt;/a&gt; de ejemplo.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Este c\u00f3digo muestra una estructura b\u00e1sica de una p\u00e1gina HTML con un encabezado y un p\u00e1rrafo que incluye un enlace.</p>"},{"location":"ud1/#d-xml-extensible-markup-language","title":"D. XML (eXtensible Markup Language)","text":"<p>XML es un lenguaje derivado de SGML dise\u00f1ado para ser legible por m\u00e1quinas y humanos. A diferencia de HTML, que tiene un conjunto fijo de etiquetas, XML permite a los usuarios definir sus propias etiquetas, lo que lo hace extremadamente flexible. Se utiliza ampliamente para el intercambio de datos entre aplicaciones.</p> <p>Ejemplo de c\u00f3digo XML:</p> <pre><code>&lt;libro&gt;\n    &lt;titulo&gt;Introducci\u00f3n a XML&lt;/titulo&gt;\n    &lt;autor&gt;John Doe&lt;/autor&gt;\n    &lt;capitulos&gt;\n        &lt;capitulo numero=\"1\"&gt;\n            &lt;titulo&gt;Primer Cap\u00edtulo&lt;/titulo&gt;\n            &lt;contenido&gt;Este es el contenido del primer cap\u00edtulo.&lt;/contenido&gt;\n        &lt;/capitulo&gt;\n    &lt;/capitulos&gt;\n&lt;/libro&gt;\n</code></pre> <p>XML es muy utilizado en aplicaciones web para la transferencia de datos estructurados entre cliente y servidor, aunque JSON ha ganado terreno en los \u00faltimos a\u00f1os.</p>"},{"location":"ud1/#e-latex","title":"E. LaTeX","text":"<p>LaTeX no es exactamente un lenguaje de marcado convencional, pero es un lenguaje de tipograf\u00eda. Se utiliza principalmente para la creaci\u00f3n de documentos cient\u00edficos y acad\u00e9micos, debido a su capacidad para manejar matem\u00e1ticas complejas y un control preciso del formato del texto.</p> <p>Ejemplo de c\u00f3digo LaTeX:</p> <pre><code>\\documentclass{article}\n\\begin{document}\n\\title{Introducci\u00f3n a LaTeX}\n\\author{John Doe}\n\\date{\\today}\n\\maketitle\n\\section{Introducci\u00f3n}\nEste es un p\u00e1rrafo de texto en LaTeX. Es muy popular en el \u00e1mbito acad\u00e9mico.\n\\end{document}\n</code></pre> <p>LaTeX es ampliamente utilizado en disciplinas como matem\u00e1ticas, f\u00edsica e inform\u00e1tica, ya que permite una representaci\u00f3n muy precisa de ecuaciones y otros s\u00edmbolos.</p>"},{"location":"ud1/#f-json-javascript-object-notation","title":"F. JSON (JavaScript Object Notation)","text":"<p>JSON es un formato ligero de intercambio de datos basado en texto. Es f\u00e1cil de leer para los humanos y f\u00e1cil de generar para las m\u00e1quinas. Fue dise\u00f1ado originalmente para JavaScript, pero ahora se usa en casi todos los lenguajes de programaci\u00f3n.</p> <p>Ejemplo de c\u00f3digo JSON:</p> <pre><code>{\n    \"titulo\": \"Aprendiendo JSON\",\n    \"capitulos\": [\n        {\n            \"numero\": 1,\n            \"titulo\": \"Introducci\u00f3n a JSON\"\n        },\n        {\n            \"numero\": 2,\n            \"titulo\": \"Estructuras de datos en JSON\"\n        }\n    ]\n}\n</code></pre> <p>JSON se utiliza ampliamente en el desarrollo de aplicaciones web, especialmente en APIs, debido a su simplicidad y eficiencia en la transmisi\u00f3n de datos.</p>"},{"location":"ud1/#4-lenguajes-de-marcas-mas-utilizados","title":"4. Lenguajes de Marcas M\u00e1s Utilizados","text":"<p>En esta secci\u00f3n se detallan los lenguajes de marcas m\u00e1s utilizados en la actualidad, sus caracter\u00edsticas principales y ejemplos pr\u00e1cticos de c\u00f3digo.</p>"},{"location":"ud1/#a-html-hypertext-markup-language","title":"A. HTML (HyperText Markup Language)","text":"<p>HTML es el lenguaje de marcas est\u00e1ndar utilizado para crear p\u00e1ginas web. Fue desarrollado a principios de los 90 por Tim Berners-Lee. A diferencia de SGML, HTML es mucho m\u00e1s sencillo y tiene un conjunto limitado de etiquetas que est\u00e1n enfocadas en estructurar contenido web.</p> <p>HTML ha pasado por varias versiones, siendo HTML5 la versi\u00f3n actual, que incluye mejoras para el manejo de multimedia, formularios y gr\u00e1ficos.</p> <p>Ejemplo de c\u00f3digo HTML:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;P\u00e1gina HTML&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Encabezado Principal&lt;/h1&gt;\n    &lt;p&gt;Este es un p\u00e1rrafo en HTML con una &lt;a href=\"#\"&gt;enlace&lt;/a&gt; de ejemplo.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Este c\u00f3digo muestra una estructura b\u00e1sica de una p\u00e1gina HTML con un encabezado y un p\u00e1rrafo que incluye un enlace.</p>"},{"location":"ud1/#b-xml-extensible-markup-language","title":"B. XML (eXtensible Markup Language)","text":"<p>XML es un lenguaje derivado de SGML dise\u00f1ado para ser legible por m\u00e1quinas y humanos. A diferencia de HTML, que tiene un conjunto fijo de etiquetas, XML permite a los usuarios definir sus propias etiquetas, lo que lo hace extremadamente flexible. Se utiliza ampliamente para el intercambio de datos entre aplicaciones.</p> <p>Ejemplo de c\u00f3digo XML:</p> <pre><code>&lt;libro&gt;\n    &lt;titulo&gt;Introducci\u00f3n a XML&lt;/titulo&gt;\n    &lt;autor&gt;John Doe&lt;/autor&gt;\n    &lt;capitulos&gt;\n        &lt;capitulo numero=\"1\"&gt;\n            &lt;titulo&gt;Primer Cap\u00edtulo&lt;/titulo&gt;\n            &lt;contenido&gt;Este es el contenido del primer cap\u00edtulo.&lt;/contenido&gt;\n        &lt;/capitulo&gt;\n    &lt;/capitulos&gt;\n&lt;/libro&gt;\n</code></pre> <p>XML es muy utilizado en aplicaciones web para la transferencia de datos estructurados entre cliente y servidor, aunque JSON ha ganado terreno en los \u00faltimos a\u00f1os.</p>"},{"location":"ud1/#c-latex","title":"C. LaTeX","text":"<p>LaTeX no es exactamente un lenguaje de marcado convencional, pero es un lenguaje de tipograf\u00eda. Se utiliza principalmente para la creaci\u00f3n de documentos cient\u00edficos y acad\u00e9micos, debido a su capacidad para manejar matem\u00e1ticas complejas y un control preciso del formato del texto.</p> <p>Ejemplo de c\u00f3digo LaTeX:</p> <pre><code>\\documentclass{article}\n\\begin{document}\n\\title{Introducci\u00f3n a LaTeX}\n\\author{John Doe}\n\\date{\\today}\n\\maketitle\n\\section{Introducci\u00f3n}\nEste es un p\u00e1rrafo de texto en LaTeX. Es muy popular en el \u00e1mbito acad\u00e9mico.\n\\end{document}\n</code></pre> <p>LaTeX es ampliamente utilizado en disciplinas como matem\u00e1ticas, f\u00edsica e inform\u00e1tica, ya que permite una representaci\u00f3n muy precisa de ecuaciones y otros s\u00edmbolos.</p>"},{"location":"ud1/#d-json-javascript-object-notation","title":"D. JSON (JavaScript Object Notation)","text":"<p>JSON es un formato ligero de intercambio de datos basado en texto. Es f\u00e1cil de leer para los humanos y f\u00e1cil de generar para las m\u00e1quinas. Fue dise\u00f1ado originalmente para JavaScript, pero ahora se usa en casi todos los lenguajes de programaci\u00f3n.</p> <p>Ejemplo de c\u00f3digo JSON:</p> <pre><code>{\n    \"titulo\": \"Aprendiendo JSON\",\n    \"capitulos\": [\n        {\n            \"numero\": 1,\n            \"titulo\": \"Introducci\u00f3n a JSON\"\n        },\n        {\n            \"numero\": 2,\n            \"titulo\": \"Estructuras de datos en JSON\"\n        }\n    ]\n}\n</code></pre> <p>JSON se utiliza ampliamente en el desarrollo de aplicaciones web, especialmente en APIs, debido a su simplicidad y eficiencia en la transmisi\u00f3n de datos.</p>"},{"location":"ud1/#5-comparacion-de-los-lenguajes-de-marcas","title":"5. Comparaci\u00f3n de los Lenguajes de Marcas","text":"<p>A continuaci\u00f3n se presenta una tabla comparativa que resume las caracter\u00edsticas principales de cada lenguaje de marcas mencionado:</p> Lenguaje Prop\u00f3sito Ventajas Desventajas GML Primer lenguaje de marcado estructurado Flexibilidad en la definici\u00f3n de etiquetas Obsoleto y complejo SGML Definir lenguajes de marcas Muy flexible, puede usarse para crear nuevos lenguajes Complejo y dif\u00edcil de implementar HTML Creaci\u00f3n de contenido web Amplia adopci\u00f3n y f\u00e1cil de usar No describe datos ni es extensible XML Estructuraci\u00f3n de datos Flexible y estandarizado Verboso y menos eficiente comparado con JSON LaTeX Composici\u00f3n tipogr\u00e1fica Control preciso sobre el formato Curva de aprendizaje pronunciada JSON Intercambio de datos Simple y eficiente para aplicaciones web No soporta estructuras complejas como XML YAML Serializaci\u00f3n de datos/configuraci\u00f3n Muy legible y f\u00e1cil de escribir Menos est\u00e1ndar que JSON/XML Markdown Creaci\u00f3n de contenido legible en texto plano F\u00e1cil de aprender y usar Limitado en funcionalidades avanzadas SMIL Descripci\u00f3n de presentaciones multimedia Permite la sincronizaci\u00f3n de contenido audiovisual Uso muy espec\u00edfico y limitado"},{"location":"ud1/#6-conclusion","title":"6. Conclusi\u00f3n","text":"<p>Los lenguajes de marcas han jugado un papel fundamental en la evoluci\u00f3n del desarrollo web y el manejo de datos. Desde los primeros intentos con GML hasta las soluciones modernas como JSON y LaTeX, cada lenguaje ha respondido a necesidades espec\u00edficas de estructuraci\u00f3n y presentaci\u00f3n de informaci\u00f3n.</p> <p>A medida que las tecnolog\u00edas y las necesidades han cambiado, tambi\u00e9n lo han hecho estos lenguajes. Hoy en d\u00eda, es esencial comprender las caracter\u00edsticas, ventajas y limitaciones de cada uno para elegir el m\u00e1s adecuado seg\u00fan el contexto del proyecto. Esta comprensi\u00f3n no solo facilita la creaci\u00f3n de contenido bien estructurado y presentado, sino que tambi\u00e9n optimiza la interoperabilidad y el intercambio de datos entre diferentes sistemas y plataformas.</p>"},{"location":"ud2/","title":"UD2 - JavaScript fundamentals","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>JavaScript Fundamentals</p> <ul> <li>Hello, world!</li> <li>Code structure</li> <li>The modern mode, \"use strict\"</li> <li>Variables</li> <li>Data types</li> <li>Interaction: alert, prompt, confirm</li> <li>Type Conversions</li> <li>Basic operators, maths</li> <li>Comparisons</li> <li>Conditional branching: if, '?'</li> <li>Logical operators</li> <li>Nullish coalescing operator '??'</li> <li>Loops: while and for</li> <li>The \"switch\" statement</li> </ul> <p>Code quality</p> <ul> <li>Debugging in the browser</li> <li>Coding Style</li> <li>Comments</li> <li>Ninja code</li> </ul>"},{"location":"ud2/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li> <p>Learn Introductory JavaScript by Building a Pyramid Generator</p> </li> <li> <p>Review JavaScript Fundamentals by Building a Gradebook App</p> </li> <li> <p>Learn Basic JavaScript by Building a Role Playing Game</p> </li> <li> <p>Learn Basic Debugging by Building a Random Background Color Changer</p> </li> </ul>"},{"location":"ud3/","title":"UD3 - User-Defined Structures","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>JavaScript Fundamentals</p> <ul> <li>Functions</li> <li>Function expressions</li> <li>Arrow functions, the basics</li> <li>JavaScript specials</li> </ul> <p>Data types</p> <ul> <li>Methods of primitives</li> <li>Numbers</li> <li>Strings</li> <li>Arrays</li> <li>Array methods</li> <li>Iterables</li> <li>Map and Set</li> <li>Object.keys, values, entries</li> <li>Destructuring assignment</li> <li>Date and time</li> <li>JSON methods, toJSON</li> </ul> <p>Objects: the basics</p> <ul> <li>Objects</li> <li>Object references and copying</li> <li>Object methods, \"this\"</li> <li>Constructor, operator \"new\"</li> </ul> <p>Object properties configuration</p> <ul> <li>Property getters and setters</li> </ul> <p>Classes</p> <ul> <li>Class basic syntax</li> <li>Class inheritance</li> <li>Static properties and methods</li> <li>Private and protected properties and methods</li> </ul>"},{"location":"ud3/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Basic String and Array Methods by Building a Music Player</li> <li>Learn the Date Object by Building a Date Formatter</li> <li>Learn Advanced Array Methods by Building a Statistics Calculator</li> <li>Learn Basic OOP by Building a Shopping Cart</li> </ul>"},{"location":"ud4/","title":"UD4 - DOM manipulation and events","text":"<p>Como referencia de para esta unidad se ha tomado el material de \"The Modern JavaScript Tutorial\". En concreto los siguientes apartados del mismo:</p> <p>Document</p> <ul> <li>Browser environment, specs</li> <li>DOM tree</li> <li>Walking the DOM</li> <li>Searching: getElement, querySelector</li> <li>Node properties: type, tag and contents</li> <li>Attributes and properties</li> <li>Modifying the document</li> <li>Styles and classes</li> <li>Element size and scrolling</li> <li>Window sizes and scrolling</li> <li>Coordinates</li> </ul> <p>Introduction to Events</p> <ul> <li>Introduction to browser events</li> <li>Bubbling and capturing</li> <li>Event delegation</li> <li>Browser default actions</li> <li>Dispatching custom events</li> </ul> <p>UI Events</p> <ul> <li>Mouse events</li> <li>Moving the mouse: mouseover/out, mouseenter/leave</li> <li>Drag'n'Drop with mouse events</li> <li>Pointer events</li> <li>Keyboard: keydown and keyup</li> <li>Scrolling</li> </ul> <p>Forms, controls</p> <ul> <li>Form properties and methods</li> <li>Focusing: focus/blur</li> <li>Events: change, input, cut, copy, paste</li> <li>Forms: event and method submit</li> </ul> <p>Regular expressions</p> <p>Document and resource loading</p> <ul> <li>Page: DOMContentLoaded, load, beforeunload, unload, beforeunload, unload</li> <li>Scripts: async, defer</li> <li>Resource loading: onload and onerror</li> </ul> <p>Storing data in the browser</p> <ul> <li>Cookies, document.cookie</li> <li>LocalStorage, sessionStorage</li> <li>IndexedDB</li> </ul> <p>Error handling</p> <ul> <li>Error handling, \"try...catch\"</li> <li>Custom errors, extending Error</li> </ul> <p>Promises</p> <ul> <li>Introduction: callbacks</li> <li>Promise</li> <li>Promises chaining</li> <li>Error handling with promises</li> <li>Promise API</li> <li>Promisification</li> <li>Async/await</li> </ul> <p>Network requests</p> <ul> <li>Fetch</li> <li>FormData</li> <li>Fetch: Download progress</li> <li>Fetch: Abort</li> <li>Fetch: Cross-Origin Requests</li> <li>Fetch API</li> <li>URL objects</li> <li>XMLHttpRequest</li> </ul>"},{"location":"ud4/#material-de-refuerzo-y-ampliacion","title":"Material de refuerzo y ampliaci\u00f3n","text":"<p>Se recomienda la realizaci\u00f3n de los siguientes cursos de la certificaci\u00f3n algoritmos de javascript y estructuras de datos de freeCodeCamp.</p> <ul> <li>Learn Form Validation by Building a Calorie Counter</li> <li>Learn Regular Expressions by Building a Spam Filter</li> <li>Review DOM Manipulation by Building a Rock, Paper, Scissors Game</li> <li>Learn localStorage by Building a Todo App</li> <li>Learn Fetch and Promises by Building an fCC Authors Page,</li> <li>Learn Asynchronous Programming by Building an fCC Forum Leaderboard</li> </ul>"},{"location":"ud5.1-Empezando-con-React/","title":"Empezando con React","text":"<p>Vamos, en primer lugar, antes de empezar con nuestros proyectos de clase, a hacer varios cursos que nos van a servir para introducirnos en estas nuevas tecnolog\u00edas. </p>"},{"location":"ud5.1-Empezando-con-React/#introduccion-a-react","title":"Introducci\u00f3n a React","text":"<p>En primer lugar empezaremos por este curso introductorio de React, en el cual aprenderemos c\u00f3mo crear diferentes tipos de componentes de React.</p>"},{"location":"ud5.1-Empezando-con-React/#introduccion-a-redux","title":"Introducci\u00f3n a Redux","text":"<p>A medida que las aplicaciones crecen en tama\u00f1o y alcance, la gesti\u00f3n de datos compartidos se vuelve mucho m\u00e1s dif\u00edcil. Redux es un \"contenedor de estados\" que ayuda a que nuestras aplicaciones funcionen de manera predecible y que sean m\u00e1s f\u00e1ciles de probar.</p> <p>Vamos ahora a aprender algo de redux mediante este curso, aprenderemos los fundamentos de Redux para administrar datos en toda su aplicaci\u00f3n.</p>"},{"location":"ud5.1-Empezando-con-React/#react-y-redux","title":"React y Redux","text":"<p>Ahora que sabemos c\u00f3mo administrar el flujo de datos compartidos con Redux, es hora de combinar ese conocimiento con React. En \u00e9ste curso de freecodecamp vamos a crear un componente de React y administraremos el estado localmente a nivel de componente y en toda la aplicaci\u00f3n con Redux.</p>"},{"location":"ud5.2-Paso-a-paso/","title":"Paso a paso con React","text":"<p>En la documentaci\u00f3n oficial de React encontraremos toda la informaci\u00f3n de la librer\u00eda, y adem\u00e1s, algunos tutoriales muy interesantes. Uno de los recursos de obligada visita es su gu\u00eda de inicio r\u00e1pido.</p>"},{"location":"ud5.2-Paso-a-paso/#otros-materiales","title":"Otros materiales","text":"<p>A parte de lo anteriormente visto, estaremos usando mas funcionalidades, dejamos por aqu\u00ed algunos enlaces que estar\u00eda bien ir revisando a estas alturas:</p> <ul> <li>React Routing Guide</li> <li>Redux</li> <li>React Redux</li> <li>Redux Dev Tools</li> </ul>"},{"location":"ud5/","title":"UD5 - React.js","text":"<p>React es sin duda una de las tecnolog\u00edas web m\u00e1s revolucionarias de la actualidad, fue lanzado por primera vez en 2013 por Facebook y es actualmente mantenido por ellos mismo y la comunidad de c\u00f3digo abierto, la cual se extiende alrededor del mundo.</p> <p>React, a diferencia de muchas tecnolog\u00edas del desarrollo web, es una librer\u00eda lo que lo hace mucho m\u00e1s f\u00e1cil de implementar en muchos desarrollos, ya que se encarga exclusivamente de la interfaz gr\u00e1fica del usuario y consume los datos a trav\u00e9s de API que por lo general son REST.</p> <p>El nombre de React proviene de su capacidad de crear interfaces de usuario reactivas, la cual es la capacidad de una aplicaci\u00f3n para actualizar toda la interfaz gr\u00e1fica en cadena, como si se tratara de una f\u00f3rmula en Excel, donde al cambiar el valor de una celda autom\u00e1ticamente actualiza todas las celdas que depende del valor actualizado y esto se repite con las celdas que a la vez depend\u00eda de estas \u00faltimas.</p>"},{"location":"ud5/#como-funciona-react","title":"C\u00f3mo funciona React","text":"<p>React nos permite crear la interfaz UI mediante una sintaxis propia llamada Javascript XML (JSX) el cual es una mezcla entre XML y HTML que permite la construcci\u00f3n de elementos HTML de una forma muy simple y r\u00e1pida.</p> <p>Las aplicaciones desarrolladas mediante JSX no pueden ser interpretadas por el navegador, por lo que es requerido que todo el c\u00f3digo sea convertido a Javascript nativo mediante un proceso llamado transpilaci\u00f3n, el cual es parecido a la compilaci\u00f3n, pero en este proceso no se lleva a cabo una compilaci\u00f3n como tal, sino que el c\u00f3digo es convertido de JSX a Javascript.</p> <p>Este proceso es llevado a cabo mediante herramientas como Webpack el cual es el m\u00e1s ampliamente utilizado.</p> <p> </p> <p>Como vemos en la imagen, Webpack es en realidad un empaquetador, el cual organiza, compacta y mediante plugins como Babel realiza la transpilaci\u00f3n, arrojando como resultado una serie de archivos compactos y listos para ser utilizados.</p>"},{"location":"ud5/#react-y-el-backend","title":"React y el Backend","text":"<p>React solo sirve para la creaci\u00f3n de interfaz gr\u00e1fica, por lo que el desarrollo del backend queda fuera de React y es precisamente eso lo que lo hace una librer\u00eda super portable, ya que la podemos integrar con cualquier API ya desarrollada.</p> <p>C\u00f3mo React no es capaz de resolver la parte del backend es necesario desarrollar el API de datos mediante otras tecnolog\u00edas como NodeJS, el cual es por lo general el servidor m\u00e1s utilizado para el desarrollo con React.</p> <p>El API es consumido mediante AJAX a medida que la aplicaci\u00f3n lo demanda.</p> <p> </p>"},{"location":"ud5/#react-y-web-components","title":"React y Web Components","text":"<p>React utiliza un concepto llamado Web Componentes, el cual es la creaci\u00f3n de tus propias etiquetas de HTML para representar tus componentes. Te imaginas crear un login en tu p\u00e1gina utilizando una etiqueta como esta &lt;login&gt;, pues esta forma de trabajar es la que propone React, donde todo lo que desarrollemos sean componentes que puedan ser reutilizables cuantas veces queramos, incluso podr\u00e1n ser empaquetadas como librer\u00edas para que las utilices en diferentes desarrollos. Esto lo puedes ver como si cada componente fuera una peque\u00f1a caja, y lo \u00fanico que tenemos que hacer es colocar las cajas donde la necesitemos.</p> <p> </p> <p>Como podemos ver en la imagen, cada parte de la aplicaci\u00f3n puede ser un componente (etiqueta) el cual solo se tiene que agregar a la p\u00e1gina para crear interfaces gr\u00e1ficas mucho m\u00e1s r\u00e1pido. Ahora veamos c\u00f3mo quedar\u00eda esta misma p\u00e1gina, pero en c\u00f3digo con React:</p> <pre><code>import React from 'react'\nimport NavBar from './NavBar'\nimport Login from './Login'\nimport Footer from './Footer'\nclass LoginApp extends React.Component{\n  render(){\n    return(\n    &lt;div&gt;\n        &lt;NavBar/&gt;\n        &lt;Login/&gt;\n        &lt;Footer/&gt;\n    &lt;/div&gt;\n    )\n  }\n}\n</code></pre> <p>Observemos que estamos utilizando las etiquetas como NavBar y Login,  las cuales no son propias de HTML.</p>"},{"location":"ud5/#react-y-el-shadow-dom","title":"React y el Shadow DOM","text":"<p>Como se ha comentado anteriormente, React se ejecuta del lado de cliente, por lo que es esta misma la encargada de actualizar el DOM a medida que el usuario interact\u00faa con la UI, sin embargo, el proceso de actualizaci\u00f3n del DOM es un trabajo muy costoso para el navegador, por lo que actualizar el DOM cada vez que el usuario realiza una acci\u00f3n, no es una opci\u00f3n, es por esto que React provee un DOM propio llamado Shadow DOM el cual es una versi\u00f3n del DOM sobre la cual React trabaja para realizar los cambios, y una vez que calcula todos los cambios que hay que realizar es solo entonces cuando actualiza el DOM del navegador. </p> <p>Este proceso es en realidad muy complejo y React se encarga por completo de su gesti\u00f3n, por lo que como programadores no hace falta preocuparnos por estos detalles en la mayor\u00eda de las veces.</p> <p> </p> <p>Cuando se realiza un cambio en el Shadow DOM, este se sincroniza con el DOM original y es necesario realizar un proceso llamado reconciliaci\u00f3n, el cual es el encargado de aplicar los cambios del Shadow DOM al DOM real.</p> <p> </p>"},{"location":"ud5/#react-y-los-estados","title":"React y los Estados","text":"<p>Una de las principales caracter\u00edsticas de React es que los componentes pueden mantener estados. Los estados le indican los datos que el componente muestra, e incluso el formato en se muestran.</p> <p>Por ejemplo, podemos tener un formulario, el cual tenga los estados de solo lectura y edici\u00f3n, en el primero, solo mostraremos los datos en texto plano, como un &lt;p&gt; o un &lt;span&gt; mientras que cuando el formulario est\u00e1 en estado de edici\u00f3n, podemos representar el formulario con &lt;imput type=\u201dtext\u201d /&gt;</p> <p>Cuando un componente por alguna raz\u00f3n modifica su estado, entra en lo que se le conoce como Dirty o Sucio, y esto le indica a React que debe de haber un proceso de reconciliaci\u00f3n para actualizar los datos en la UI. Como ya hablamos en hace un momento, React utiliza programaci\u00f3n Reactiva para actualizar los componentes, de tal forma, que cuando un componente es actualizado, todos los componentes hijos del \u00e1rbol DOM ser\u00e1n evaluados para determinar si deben de ser tambi\u00e9n actualizados.</p> <p> </p> <p>En la imagen podemos apreciar en rojo, los componentes que fueron actualizados por el usuario, por lo que React deber\u00e1 iniciar el proceso dereconciliaci\u00f3n para estos componentes, pero adicional, si este componente tiene componentes hijos, React deber\u00e1 determinar si los hijos necesitan ser tambi\u00e9n actualizados en cascada, a \u00e9ste proceso es a lo que se le conoce como programaci\u00f3n Reactiva.</p>"},{"location":"ud5/#deploy-de-react","title":"Deploy de React","text":"<p>Finalmente, React tiene una forma muy particular de ser cargado por el navegador, pues cuando el usuario entra a la p\u00e1gina, est\u00e1 solo tiene un elemento, sobre el cual react montar\u00e1 toda la aplicaci\u00f3n.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"/bundle.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Adicional del elemento root, se carga un JavaScript llamado bundle.js el cual es en realidad TODA LA APLICACI\u00d3N en un solo archivo, el cual es generado por Webpack tras ejecutar el proceso de transpilaci\u00f3n. Cuando el bundle.js se carga por completo, reemplaza el componente root por la aplicaci\u00f3n desarrollada en React.</p>"}]}